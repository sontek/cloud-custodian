{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started \u00b6 Install Cloud Custodian \u00b6 These instructions will install Cloud Custodian. Cloud Custodian is a Python application that supports Python 3 on Linux, MacOS and Windows. We recommend using at least the minimum supported version of Python. If python3 --version shows a Python version that is not actively supported and the steps above don't apply to your environment, you can still install a current release of Python manually. This guide may be a useful reference. Note Some Enterprise/Long Term Support Linux distributions may support Python longer than the upstream support period. If you are in this situation it might be prudent to contact your vendor to see if there are other supported ways to use a more recent version. In some cases using the Docker container might be an appropriate solution. Linux and OSX Windows Docker To install Cloud Custodian : python3 -m venv custodian source custodian/bin/activate pip install c7n # This includes AWS support To install Cloud Custodian for Azure, you will also need to run: pip install c7n_azure # Install Azure package To install Cloud Custodian for GCP, you will also need to run: pip install c7n_gcp # Install GCP Package To install Cloud Custodian run: python3 -m venv custodian ./custodian/bin/activate pip install c7n # This includes AWS support To install Cloud Custodian for Azure, you will also need to run: pip install c7n_azure To install Cloud Custodian for GCP, you will also need to run: pip install c7n_gcp To install via docker, run: docker pull cloudcustodian/c7n You'll need to export cloud provider credentials to the container when executing. One example, if you\\'re using environment variables for provider credentials: docker run -it \\ -v $(pwd)/output:/home/custodian/output \\ -v $(pwd)/policy.yml:/home/custodian/policy.yml \\ --env-file <(env | grep \"^AWS\\|^AZURE\\|^GOOGLE\") \\ cloudcustodian/c7n run -v -s /home/custodian/output /home/custodian/policy.yml Note Ensure you install the correct follow-on package depending on the cloud you are deploying to, otherwise you won't have the right modules for that specific cloud. Explore Cloud Custodian \u00b6 Run custodian -h to see a list of available commands. Run custodian schema to see the complete list of cloud resources against which you can run policies. To invoke command-line help with more information about policy schema details, run custodian schema -h . Run custodian schema <cloud-provider> to see the available resources for a specific cloud provider: custodian schema aws Run custodian schema <cloud-provider>.<resource> to see the available filters and actions for each resource. Drill down to get more information about available policy settings for each resource, where the model for the command is:: custodian schema <cloud>.<resource>.<category>.<item> For example: custodian schema aws.s3.filters.is-log-target provides the following information:: Help ---- Filter and return buckets are log destinations. Not suitable for use in lambda on large accounts, This is a api heavy process to detect scan all possible log sources. Sources: - elb (Access Log) - s3 (Access Log) - cfn (Template writes) - cloudtrail :example: .. code-block: yaml policies: - name: s3-log-bucket resource: s3 filters: - type: is-log-target Schema ------ { 'additionalProperties': False, 'properties': { 'type': { 'enum': ['is-log-target']}, 'value': { 'type': 'boolean'}}, 'required': ['type'], 'type': 'object'} Additionally, you can use the schema command to view information on the different supported modes in Cloud Custodian:: custodian schema mode Cloud Provider Specific Help \u00b6 For specific setup isntructions for AWS, Azure, and GCP, visit the relevant getting started page. AWS Azure GCP Troubleshooting & Tinkering \u00b6 The policy is validated automatically when you run it, but you can also validate it separately: custodian validate custodian.yml You can also check which resources are identified by the policy, without running any actions on the resources: custodian run --dryrun -s . custodian.yml Monitor resources \u00b6 Additional commands let you monitor your services in detail. You can generate metrics, log outputs, and output to blob storage in each of the different providers (AWS, Azure, Google Cloud Platform). See the cloud provider specific help at the top of this section for more information. Editor Integration \u00b6 If your preferred editor supports language servers, you can configure it to provide completion and validation while authoring policies. First generate use custodian to generate a json schema file:: custodian schema --json > schema.json Next install a YAML plug-in for your editor, like YAML for Visual Studio Code or coc-yaml for coc.nvim . Both plug-ins use the yaml-language-server under the hood. You'll then need to configure your plug-in to use the generated schema.json as the schema for your policy files. For example in Visual Studio Code, navigate to the settings for the YAML plug-in and under Schemas, edit configuration file and add the following schema configuration:: \"yaml.schemas\": { \"./schema.json\": \"*yml\" }, Note the path to schema.json can either be either relative or the full path. You'll now have completion and validation while authoring policies. Note if you're authoring policies in json you can also configure the json-language-server for the same. Also, if you're seeing errors like 'Request textDocument/hover failed with message: Cannot read property '$ref' of null' try re-creating your schema.json file. Tab Completion \u00b6 To enable command-line tab completion for custodian on bash do the following one-time steps: Run: activate-global-python-argcomplete Now launch a new shell (or refresh your bash environment by sourcing the appropriate file). Troubleshooting \u00b6 If you get an error about \"complete -D\" not being supported, you need to update bash. See the \"Base Version Compatability\" note `in the argcomplete docs . If you have other errors, or for tcsh support, see the argcomplete docs . If you are invoking custodian via the python executable tab completion will not work. You must invoke custodian directly.","title":"Getting Started"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#install-cloud-custodian","text":"These instructions will install Cloud Custodian. Cloud Custodian is a Python application that supports Python 3 on Linux, MacOS and Windows. We recommend using at least the minimum supported version of Python. If python3 --version shows a Python version that is not actively supported and the steps above don't apply to your environment, you can still install a current release of Python manually. This guide may be a useful reference. Note Some Enterprise/Long Term Support Linux distributions may support Python longer than the upstream support period. If you are in this situation it might be prudent to contact your vendor to see if there are other supported ways to use a more recent version. In some cases using the Docker container might be an appropriate solution. Linux and OSX Windows Docker To install Cloud Custodian : python3 -m venv custodian source custodian/bin/activate pip install c7n # This includes AWS support To install Cloud Custodian for Azure, you will also need to run: pip install c7n_azure # Install Azure package To install Cloud Custodian for GCP, you will also need to run: pip install c7n_gcp # Install GCP Package To install Cloud Custodian run: python3 -m venv custodian ./custodian/bin/activate pip install c7n # This includes AWS support To install Cloud Custodian for Azure, you will also need to run: pip install c7n_azure To install Cloud Custodian for GCP, you will also need to run: pip install c7n_gcp To install via docker, run: docker pull cloudcustodian/c7n You'll need to export cloud provider credentials to the container when executing. One example, if you\\'re using environment variables for provider credentials: docker run -it \\ -v $(pwd)/output:/home/custodian/output \\ -v $(pwd)/policy.yml:/home/custodian/policy.yml \\ --env-file <(env | grep \"^AWS\\|^AZURE\\|^GOOGLE\") \\ cloudcustodian/c7n run -v -s /home/custodian/output /home/custodian/policy.yml Note Ensure you install the correct follow-on package depending on the cloud you are deploying to, otherwise you won't have the right modules for that specific cloud.","title":"Install Cloud Custodian"},{"location":"#explore-cloud-custodian","text":"Run custodian -h to see a list of available commands. Run custodian schema to see the complete list of cloud resources against which you can run policies. To invoke command-line help with more information about policy schema details, run custodian schema -h . Run custodian schema <cloud-provider> to see the available resources for a specific cloud provider: custodian schema aws Run custodian schema <cloud-provider>.<resource> to see the available filters and actions for each resource. Drill down to get more information about available policy settings for each resource, where the model for the command is:: custodian schema <cloud>.<resource>.<category>.<item> For example: custodian schema aws.s3.filters.is-log-target provides the following information:: Help ---- Filter and return buckets are log destinations. Not suitable for use in lambda on large accounts, This is a api heavy process to detect scan all possible log sources. Sources: - elb (Access Log) - s3 (Access Log) - cfn (Template writes) - cloudtrail :example: .. code-block: yaml policies: - name: s3-log-bucket resource: s3 filters: - type: is-log-target Schema ------ { 'additionalProperties': False, 'properties': { 'type': { 'enum': ['is-log-target']}, 'value': { 'type': 'boolean'}}, 'required': ['type'], 'type': 'object'} Additionally, you can use the schema command to view information on the different supported modes in Cloud Custodian:: custodian schema mode","title":"Explore Cloud Custodian"},{"location":"#cloud-provider-specific-help","text":"For specific setup isntructions for AWS, Azure, and GCP, visit the relevant getting started page. AWS Azure GCP","title":"Cloud Provider Specific Help"},{"location":"#troubleshooting-tinkering","text":"The policy is validated automatically when you run it, but you can also validate it separately: custodian validate custodian.yml You can also check which resources are identified by the policy, without running any actions on the resources: custodian run --dryrun -s . custodian.yml","title":"Troubleshooting &amp; Tinkering"},{"location":"#monitor-resources","text":"Additional commands let you monitor your services in detail. You can generate metrics, log outputs, and output to blob storage in each of the different providers (AWS, Azure, Google Cloud Platform). See the cloud provider specific help at the top of this section for more information.","title":"Monitor resources"},{"location":"#editor-integration","text":"If your preferred editor supports language servers, you can configure it to provide completion and validation while authoring policies. First generate use custodian to generate a json schema file:: custodian schema --json > schema.json Next install a YAML plug-in for your editor, like YAML for Visual Studio Code or coc-yaml for coc.nvim . Both plug-ins use the yaml-language-server under the hood. You'll then need to configure your plug-in to use the generated schema.json as the schema for your policy files. For example in Visual Studio Code, navigate to the settings for the YAML plug-in and under Schemas, edit configuration file and add the following schema configuration:: \"yaml.schemas\": { \"./schema.json\": \"*yml\" }, Note the path to schema.json can either be either relative or the full path. You'll now have completion and validation while authoring policies. Note if you're authoring policies in json you can also configure the json-language-server for the same. Also, if you're seeing errors like 'Request textDocument/hover failed with message: Cannot read property '$ref' of null' try re-creating your schema.json file.","title":"Editor Integration"},{"location":"#tab-completion","text":"To enable command-line tab completion for custodian on bash do the following one-time steps: Run: activate-global-python-argcomplete Now launch a new shell (or refresh your bash environment by sourcing the appropriate file).","title":"Tab Completion"},{"location":"#troubleshooting","text":"If you get an error about \"complete -D\" not being supported, you need to update bash. See the \"Base Version Compatability\" note `in the argcomplete docs . If you have other errors, or for tcsh support, see the argcomplete docs . If you are invoking custodian via the python executable tab completion will not work. You must invoke custodian directly.","title":"Troubleshooting"},{"location":"actions/","text":"Actions \u00b6 The following actions can be applied to all policies for all resources. See the provider specific resource references. Webhook Action \u00b6 The webhook action allows invoking a webhook with information about your resources. You may initiate a call per resource, or a call referencing a batch of resources. Additionally you may define the body and query string using JMESPath references to the resource or resource array. JMESPath queries for query-params, headers and body will have access to the following data: { 'account_id', 'region', 'execution_id', 'execution_start', 'policy', 'resource', \u2500\u25b6 if Batch == false 'resources', \u2500\u25b6 if Batch == true } Examples: actions : - type : webhook url : http://foo.com?hook-id=123 \u2500\u25b6 Call will default to POST query-params : \u2500\u25b6 Additional query string query-params resource_name : resource.name \u2500\u25b6 Value is a JMESPath query into resource dictionary policy_name : policy.name actions : - type : webhook url : http://foo.com batch : true \u2500\u25b6 Single call for full resource array body : 'resources[].name' \u2500\u25b6 JMESPath will reference array of resources query-params : count : 'resources[] | length(@)' \u2500\u25b6 Include resource count in query string static-value : '`foo`' \u2500\u25b6 JMESPath string literal in ticks actions : - type : webhook url : http://foo.com batch : true batch-size : 10 method : POST headers : static-value : '`foo`' \u2500\u25b6 JMESPath string literal in ticks query-params : count : 'resources[] | length(@)'","title":"Actions"},{"location":"actions/#actions","text":"The following actions can be applied to all policies for all resources. See the provider specific resource references.","title":"Actions"},{"location":"actions/#webhook-action","text":"The webhook action allows invoking a webhook with information about your resources. You may initiate a call per resource, or a call referencing a batch of resources. Additionally you may define the body and query string using JMESPath references to the resource or resource array. JMESPath queries for query-params, headers and body will have access to the following data: { 'account_id', 'region', 'execution_id', 'execution_start', 'policy', 'resource', \u2500\u25b6 if Batch == false 'resources', \u2500\u25b6 if Batch == true } Examples: actions : - type : webhook url : http://foo.com?hook-id=123 \u2500\u25b6 Call will default to POST query-params : \u2500\u25b6 Additional query string query-params resource_name : resource.name \u2500\u25b6 Value is a JMESPath query into resource dictionary policy_name : policy.name actions : - type : webhook url : http://foo.com batch : true \u2500\u25b6 Single call for full resource array body : 'resources[].name' \u2500\u25b6 JMESPath will reference array of resources query-params : count : 'resources[] | length(@)' \u2500\u25b6 Include resource count in query string static-value : '`foo`' \u2500\u25b6 JMESPath string literal in ticks actions : - type : webhook url : http://foo.com batch : true batch-size : 10 method : POST headers : static-value : '`foo`' \u2500\u25b6 JMESPath string literal in ticks query-params : count : 'resources[] | length(@)'","title":"Webhook Action"},{"location":"advanced/","text":"Advanced Usage \u00b6 Running against multiple regions \u00b6 By default Cloud Custodian determines the region to run against in the following order: the --region flag the AWS_DEFAULT_REGION environment variable the region set in the ~/.aws/config file It is possible to run policies against multiple regions by specifying the --region flag multiple times: custodian run -s out --region us-east-1 --region us-west-1 policy.yml If a supplied region does not support the resource for a given policy that region will be skipped. The special all keyword can be used in place of a region to specify the policy should run against all applicable regions for the policy\\'s resource: custodian run -s out --region all policy.yml Note: when running reports against multiple regions the output is placed in a different directory than when running against a single region. See the multi-region reporting section below. Reporting against multiple regions \u00b6 When running against multiple regions the output files are placed in a different location that when running against a single region. When generating a report, specify multiple regions the same way as with the run command: custodian report -s out --region us-east-1 --region-us-west-1 policy.yml A region column will be added to reports generated that include multiple regions to indicate which region each row is from. Conditional Policy Execution \u00b6 Cloud Custodian can skip policies that are included in a policy file when running if the policy specifies conditions that aren\\'t met by the current environment. The available environment keys are: Key Description name Name of the policy region Region the policy is being evaluated in. resource The resource type of the policy. account_id The account id (subscription, project) the policy is being evaluated in. provider The name of the cloud provider (aws, azure, gcp, etc) policy The policy data as structure now The current time event In serverless, the event that triggered the policy account When running in c7n-org, current account info per account config file If a policy is executing in a serverless mode the triggering event is available. As an example, one can set up policy conditions to only execute between a given set of dates. policies : # other compliance related policies that # should always be running... - name : holiday-break-stop description : | This policy will stop all EC2 instances if the current date is between 12-15-2018 to 12-31-2018 when the policy is run. Use this in conjunction with a cron job to ensure that the environment is fully turned off during the break. resource : ec2 conditions : - type : value key : now op : greater-than value_type : date value : \"2018-12-15\" - type : value key : now op : less-than value_type : date value : \"2018-12-31\" filters : - \"tag:holiday-off-hours\" : present actions : - stop - name : holiday-break-start description : | This policy will start up all EC2 instances and only run on 1-1-2019. resource : ec2 conditions : - type : value key : now value_type : date op : greater-than value : \"2009-1-1\" - type : value key : now value_type : date op : less-than value : \"2019-1-1 23:59:59\" filters : - \"tag:holiday-off-hours\" : present actions : - start Limiting how many resources custodian affects \u00b6 Custodian by default will operate on as many resources exist within an environment that match a policy\\'s filters. Custodian also allows policy authors to stop policy execution if a policy affects more resources than expected, either as a number of resources or as a percentage of total extant resources. policies : - name : log-delete description : | This policy will delete all log groups that haven't been written to in 5 days. As a safety belt, it will stop execution if the number of log groups that would be affected is more than 5% of the total log groups in the account's region. resource : aws.log-group max-resources-percent : 5 filters : - type : last-write days : 5 actions : - delete Max resources can also be specified as an absolute number using [max-resources]{.title-ref} specified on a policy. When executing if the limit is exceeded, policy execution is stopped before taking any actions: custodian run -s out policy.yml custodian.commands:ERROR policy: log-delete exceeded resource limit: 2.5% found: 1 total: 1 If metrics are being published (-m/--metrics) then an additional metric named [ResourceCount]{.title-ref} will be published with the number of resources that matched the policy. Max resources can also be specified as an object with an [or]{.title-ref} or [and]{.title-ref} operator if you would like both a resource percent and a resource amount enforced. policies : - name : log-delete description : | This policy will not execute if the resources affected are over 50% of the total resource type amount and that amount is over 20. resource : aws.log-group max-resources : percent : 50 amount : 20 op : and filters : - type : last-write days : 5 actions : - delete Adding custom fields to reports \u00b6 Reports use a default set of fields that are resource-specific. To add other fields use the --field flag, which can be supplied multiple times. The syntax is: --field KEY=VALUE where KEY is the header name (what will print at the top of the column) and the VALUE is a JMESPath expression accessing the desired data: custodian report -s out --field Image=ImageId policy.yml If hyphens or other special characters are present in the JMESPath it may require quoting, e.g.: custodian report -s . --field \"AccessKey1LastRotated\"='\"c7n:credential-report\".access_keys[0].last_rotated' policy.yml To remove the default fields and only add the desired ones, the --no-default-fields flag can be specified and then specific fields can be added in, e.g.: custodian report -s out --no-default-fields --field Image=ImageId policy.yml","title":"Advanced Usage"},{"location":"advanced/#advanced-usage","text":"","title":"Advanced Usage"},{"location":"advanced/#running-against-multiple-regions","text":"By default Cloud Custodian determines the region to run against in the following order: the --region flag the AWS_DEFAULT_REGION environment variable the region set in the ~/.aws/config file It is possible to run policies against multiple regions by specifying the --region flag multiple times: custodian run -s out --region us-east-1 --region us-west-1 policy.yml If a supplied region does not support the resource for a given policy that region will be skipped. The special all keyword can be used in place of a region to specify the policy should run against all applicable regions for the policy\\'s resource: custodian run -s out --region all policy.yml Note: when running reports against multiple regions the output is placed in a different directory than when running against a single region. See the multi-region reporting section below.","title":"Running against multiple regions"},{"location":"advanced/#reporting-against-multiple-regions","text":"When running against multiple regions the output files are placed in a different location that when running against a single region. When generating a report, specify multiple regions the same way as with the run command: custodian report -s out --region us-east-1 --region-us-west-1 policy.yml A region column will be added to reports generated that include multiple regions to indicate which region each row is from.","title":"Reporting against multiple regions"},{"location":"advanced/#conditional-policy-execution","text":"Cloud Custodian can skip policies that are included in a policy file when running if the policy specifies conditions that aren\\'t met by the current environment. The available environment keys are: Key Description name Name of the policy region Region the policy is being evaluated in. resource The resource type of the policy. account_id The account id (subscription, project) the policy is being evaluated in. provider The name of the cloud provider (aws, azure, gcp, etc) policy The policy data as structure now The current time event In serverless, the event that triggered the policy account When running in c7n-org, current account info per account config file If a policy is executing in a serverless mode the triggering event is available. As an example, one can set up policy conditions to only execute between a given set of dates. policies : # other compliance related policies that # should always be running... - name : holiday-break-stop description : | This policy will stop all EC2 instances if the current date is between 12-15-2018 to 12-31-2018 when the policy is run. Use this in conjunction with a cron job to ensure that the environment is fully turned off during the break. resource : ec2 conditions : - type : value key : now op : greater-than value_type : date value : \"2018-12-15\" - type : value key : now op : less-than value_type : date value : \"2018-12-31\" filters : - \"tag:holiday-off-hours\" : present actions : - stop - name : holiday-break-start description : | This policy will start up all EC2 instances and only run on 1-1-2019. resource : ec2 conditions : - type : value key : now value_type : date op : greater-than value : \"2009-1-1\" - type : value key : now value_type : date op : less-than value : \"2019-1-1 23:59:59\" filters : - \"tag:holiday-off-hours\" : present actions : - start","title":"Conditional Policy Execution"},{"location":"advanced/#limiting-how-many-resources-custodian-affects","text":"Custodian by default will operate on as many resources exist within an environment that match a policy\\'s filters. Custodian also allows policy authors to stop policy execution if a policy affects more resources than expected, either as a number of resources or as a percentage of total extant resources. policies : - name : log-delete description : | This policy will delete all log groups that haven't been written to in 5 days. As a safety belt, it will stop execution if the number of log groups that would be affected is more than 5% of the total log groups in the account's region. resource : aws.log-group max-resources-percent : 5 filters : - type : last-write days : 5 actions : - delete Max resources can also be specified as an absolute number using [max-resources]{.title-ref} specified on a policy. When executing if the limit is exceeded, policy execution is stopped before taking any actions: custodian run -s out policy.yml custodian.commands:ERROR policy: log-delete exceeded resource limit: 2.5% found: 1 total: 1 If metrics are being published (-m/--metrics) then an additional metric named [ResourceCount]{.title-ref} will be published with the number of resources that matched the policy. Max resources can also be specified as an object with an [or]{.title-ref} or [and]{.title-ref} operator if you would like both a resource percent and a resource amount enforced. policies : - name : log-delete description : | This policy will not execute if the resources affected are over 50% of the total resource type amount and that amount is over 20. resource : aws.log-group max-resources : percent : 50 amount : 20 op : and filters : - type : last-write days : 5 actions : - delete","title":"Limiting how many resources custodian affects"},{"location":"advanced/#adding-custom-fields-to-reports","text":"Reports use a default set of fields that are resource-specific. To add other fields use the --field flag, which can be supplied multiple times. The syntax is: --field KEY=VALUE where KEY is the header name (what will print at the top of the column) and the VALUE is a JMESPath expression accessing the desired data: custodian report -s out --field Image=ImageId policy.yml If hyphens or other special characters are present in the JMESPath it may require quoting, e.g.: custodian report -s . --field \"AccessKey1LastRotated\"='\"c7n:credential-report\".access_keys[0].last_rotated' policy.yml To remove the default fields and only add the desired ones, the --no-default-fields flag can be specified and then specific fields can be added in, e.g.: custodian report -s out --no-default-fields --field Image=ImageId policy.yml","title":"Adding custom fields to reports"},{"location":"filters/","text":"Generic Filters \u00b6 The following filters can be applied to all policies for all resources. See the provider specific resource reference for additional information. Value Filter \u00b6 Cloud Custodian provides for a flexible query language on any resource by allowing for rich queries on JSON objects via JMESPath, and allows for mixing and combining those with boolean conditional operators that are nest-able. (Tutorial here on JMESPath syntax) The base value filter enables the use of jmespath with data returned from a describe call. filters : - type : value key : \"State[0]\" \u2500\u25b6 The value from the describe call value : \"running\" \u2500\u25b6 Value that is being filtered against There are several ways to get a list of possible keys for each resource. Via Custodian CLI Create a new custodian yaml file with just the name and resource fields. Then run custodian run -s OUTPUT_DIR . The valid key fields can be found in the output directory in resources.json policies : - name : my-first-policy resource : aws.ec2 Via Cloud Providers CLI Use the relevant cloud provider cli to run the describe call to view all available keys. For example using aws cli run aws ec2 describe-instances or with azure az vm list . Note: You do not need to include the outermost json field in most cases since custodian removes this field from the results. Via Cloud Provider Documentation Go to the relevant cloud provider sdk documentation and search for the describe api call for the resource you\\'re interested in. The available fields will be listed under the results of that api call. Comparison operators: : The generic value filter allows for comparison operators to be used - `equal` or `eq` - `not-equal` or `ne` - `greater-than` or `gt` - `gte` or `ge` - `less-than` or `lt` - `lte` or `le` filters : - type : value key : CpuOptions.CoreCount \u2500\u25b6 The value from the describe call value : 36 \u2500\u25b6 Value that is being compared op : greater-than \u2500\u25b6 Comparison Operator Other operators: : - absent - present - not-null - empty - contains filters : - type : value key : CpuOptions.CoreCount \u2500\u25b6 The value from the describe call value : present \u2500\u25b6 Checks if key is present Logical Operators: : - or or Or - and or And - not filters : - or : \u2500\u25b6 Logical Operator - type : value key : CpuOptions.CoreCount \u2500\u25b6 The value from the describe call value : 36 \u2500\u25b6 Value that is being compared - type : value key : CpuOptions.CoreCount \u2500\u25b6 The value from the describe call value : 42 \u2500\u25b6 Value that is being compared List Operators: : There is a collection of operators that can be used with user supplied lists. The operators are evaluated as value from key in (the operator) given value . If you would like it evaluated in the opposite way given value in (the operator) value from key then you can include the swap transformation or use the contains operator. - `in` - `not-in` or `ni` - `intersect` - Provides comparison between 2 lists filters : - type : value key : ImageId \u2500\u25b6 The value from the describe call op : in \u2500\u25b6 List operator value : [ ID-123 , ID-321 ] \u2500\u25b6 List of Values to be compared against filters : - type : value key : ImageId.List \u2500\u25b6 The value from the describe call op : in \u2500\u25b6 List operator value : ID-321 \u2500\u25b6 Values to be compared against value_type : swap \u2500\u25b6 Switches list comparison order Special operators: : - glob - Provides Glob matching support - regex - Provides Regex matching support but ignores case (1) - regex-case - Provides case sensitive Regex matching support (1) filters : - type : value key : FunctionName \u2500\u25b6 The value from the describe call, or resources.json op : regex \u2500\u25b6 Special operator value : '(custodian|c7n)_\\w+' \u2500\u25b6 Regex string : match all values beginning with custodian_ or c7n_ - type : value key : name \u2500\u25b6 The value from the describe call, or resources.json op : regex \u2500\u25b6 Special operator value : '^.*c7n.*$' \u2500\u25b6 Regex string : match all values containing c7n - type : value key : name \u2500\u25b6 The value from the describe call, or resources.json op : regex \u2500\u25b6 Special operator value : '^((?!c7n).)*$' \u2500\u25b6 Regex string : match all values not containing c7n These operators are implemented using re.match . If a filter isn\\'t working as expected take a look at the [re]{.title-ref}__ documentation. __ https://docs.python.org/3/library/re.html#search-vs-match Transformations: Transformations on the value can be done using the value_type keyword. The following value types are supported: age - convert to a datetime (for past date comparisons) cidr - parse an ipaddress cidr_size - the length of the network prefix expiration - convert to a datetime (for future date comparisons) integer - convert the value to an integer normalize - convert the value to lowercase resource_count - compare against the number of matched resources size - the length of an element swap - swap the value and the evaluated key date - parse the filter\\'s value as a date. Note that the [age]{.title-ref} and [expiration]{.title-ref} transformations expect a value given as a number of days. Use a floating point value to match time periods shorter than a day. Examples: # Get the size of a group - type : value key : SecurityGroups[].GroupId value_type : size value : 2 # Membership example using swap - type : value key : SecurityGroups[].GroupId value_type : swap op : in value : sg-49b87f44 # Convert to integer before comparison - type : value key : tag:Count op : greater-than value_type : integer value : 0 # Apply only to rds instances created after the given date - type : value key : InstanceCreateTime op : greater-than value_type : date value : \"2019/05/01\" # Find instances launched within the last 31 days - type : value key : LaunchTime op : less-than value_type : age value : 32 # Find instances launched within the past 12 hours - type : value key : LaunchTime op : less-than value_type : age value : 0.5 # Use `resource_count` to filter resources based on the number that matched # Note that no `key` is used for this value_type since it is matching on # the size of the list of resources and not a specific field. - type : value value_type : resource_count op : lt value : 2 # This policy will use `intersect` op to compare rds instances subnet group list # against a user provided list of public subnets from a s3 txt file. - name : find-rds-on-public-subnets-using-s3-list comment : | The txt file needs to be in utf-8 no BOM format and contain one subnet per line in the file no quotes around the subnets either. resource : aws.rds filters : - type : value key : \"DBSubnetGroup.Subnets[].SubnetIdentifier\" op : intersect value_from : url : s3://cloud-custodian-bucket/PublicSubnets.txt format : txt # This policy will compare rds instances subnet group list against a # inline user provided list of public subnets. - name : find-rds-on-public-subnets-using-inline-list resource : aws.rds filters : - type : value key : \"DBSubnetGroup.Subnets[].SubnetIdentifier\" op : intersect value : - subnet-2a8374658 - subnet-1b8474522 - subnet-2d2736444 Value Regex: When using a Value Filter, a value_regex can be specified. This will mean that the value used for comparison is the output from evaluating a regex on the value found on a resource using [key]{.title-ref}. The filter expects that there will be exactly one capturing group, however non-capturing groups can be specified as well, e.g. (?:newkey|oldkey) . Note that if the value regex does not find a match, it will return a None value. In this example there is an expiration comparison, which needs a datetime, however the tag containing this information also has other data in it. By setting the value_regex to capture just the datetime part of the tag, the filter can be evaluated as normal. # Find expiry from tag contents - type : value key : \"tag:metadata\" value_type : expiration value_regex : \".*delete_after=([0-9]{4}-[0-9]{2}-[0-9]{2}).*\" op : less-than value : 0 Value From: value_from allows the use of external values in the Value Filter class c7n.resolver. ValuesFrom ( data , manager ) Retrieve values from a url. Supports json, csv and line delimited text files and expressions to retrieve a subset of values. Expression syntax - on json, a jmespath expr is evaluated - on csv, an integer column or jmespath expr can be specified - on csv2dict, a jmespath expr (the csv is parsed into a dictionary where the keys are the headers and the values are the remaining columns) Text files are expected to be line delimited values. Examples:: value_from: url: s3://bucket/xyz/foo.json expr: [].AppId value_from: url: http://foobar.com/mydata format: json expr: Region.\"us-east-1\"[].ImageId value_from: url: s3://bucket/abc/foo.csv format: csv2dict expr: key[1] # inferred from extension format: [json, csv, csv2dict, txt] Event Filter \u00b6 Filter against a CloudWatch event JSON associated to a resource type. The list of possible keys are now from the cloudtrail event and not the describe resource call as is the case in the ValueFilter - name : no-ec2-public-ips resource : aws.ec2 mode : type : cloudtrail events : - RunInstances filters : - type : event \u2500\u2510 The key is a JMESPath Query of key : \"detail.requestParameters.networkInterfaceSet.items[].associatePublicIpAddress\" \u251c\u25b6the event JSON from CloudWatch value : true \u2500\u2518 actions : - type : terminate force : true Reduce Filter \u00b6 The reduce filter lets you group, sort, and limit the number of resources to act on. Maybe you want to delete AMIs, but want to do it in small batches where you act on the oldest AMIs first. Or maybe you want to do some chaos engineering and randomly select ec2 instances part of ASGs, but want to make sure no more than one instance per ASG is affected. This filter lets you do that. This works using this process: Group resources Sort each group of resources Selecting a number of resources in each group Combine the resulting resources Grouping resources \u00b6 Resources are grouped based on the value extracted as defined by the group-by attribute. All resources not able to extract a value are placed in a group by themselves. This is also the case when group-by is not specified. Sorting resources \u00b6 Sorting of individual resources within a group is controlled by a combination of the sort-by and order attributes. sort-by determines which value to use to sort and order controls how they are sorted. For any resources with a null value, those are by default sorted last. You can optionally sort those first with the null-order attribute. Note: if neither sort-by or order are specified, no sorting is done. Selecting resources \u00b6 Once groups have been sorted, we can then apply rules to select a specific number of resources in each group. We first discard some resources and then limit the remaining set to a maximum count. When the discard or discard-percent attributes are specified, we take the ordered resources in each group and discard the first discard-percent of them or discard absolute count, whichever is larger. After discarding resources, we then limit the remaining set. limit-percent is applied first to reduce the number of resources to this percentage of the original. limit is then applied to allow for an absolute count. Resources are kept from the beginning of the list. To explain this with an example, suppose you have 50 resources in a group with all of these set: discard : 5 discard-percent : 20 limit : 10 limit-percent : 30 This would first discard the first 10 resources because 20 percent of 50 is 10, which is greater than 5. You now have 40 resources left in the group and the limit settings are applied. 30% of 40 is 12, but limit is set to 10, which is lower, so the first 10 of the remaining are kept. If they were numbered #1-50, you\\'d have discarded 1-10, kept 11-20, and dropped the remaining 21-50. If you had the following settings: discard-percent : 25 limit-percent : 50 We\\'d discard the first 25% of 50 (12), then of the remaining 38 resources, we\\'d keep 50% of those (19). You\\'d end up with resources 13-31. Now, some of these could eliminate all resources from a group. If you have 20 resources in one group and 5 in another and specify limit-percent = 10 , you\\'ll get 2 resources from the first group and 0 resources from the second. Combining resource groups \u00b6 Once the groups have been modified, we now need to combine them back to one set of resources. Since the groups are determined by a JMESPath expression, we sort the groups first based on the order attribute the same way we sort within a group. After the groups are sorted, it\\'s a simple concatenation of resources. Attributes \u00b6 group-by , sort-by These are both defined the same way... Note: For simplicity, you can specify these as just a single string which is treated as the key . key - The JMESPath expression to extract a value value_regex - A regular expression with a single capture group that extracts a portion of the result of the key expression. value_type - parse the value as one of the following: string (default) number date order controls how to sorting is done asc (default) - sort in ascending order based on key desc - sort in descending order based on key reverse - reverse the order of resources (ignores key ) randomize - randomize the order of resources (ignores key ) null-order - when sorting, where to put resources that have a null value last (default) - at the end of the list first - at the start of the list discard - discard the first N resources within each group discard-percent - discard the first N percentage of resources within each group limit - select the first N resources within each group (after discards) limit-percent - select the first N percentage of resources within each group (after discards) Examples \u00b6 This example will select the longest running instance from each ASG, then randomly choose 10% of those, making sure to not affect more than 15 instances total, then terminate them. - name : chaos-engineering resource : aws.ec2 filters : - \"State.Name\" : \"running\" - \"tag:aws:autoscaling:groupName\" : present - type : reduce group-by : \"tag:aws:autoscaling:groupName\" sort-by : \"LaunchTime\" order : asc limit : 1 - type : reduce order : randomize limit : 15 limit-percent : 10 actions : - terminate This example will delete old AMIs, but make sure to only do the top 10 based on age. - name : limited-ami-expiration resource : aws.ami filters : - type : image-age days : 180 op : ge - type : reduce sort-by : \"CreationDate\" order : asc limit : 10 actions : - deregister This example simply sorts the resources by when they are marked for expiration. We use a date type because the tags might be in different date formats or are not text-sortable. - name : ami-expiration-by-expire-date resource : aws.ami filters : - type : value key : \"tag:expire-after\" value_type : age op : gt value : 0 - type : reduce sort-by : key : \"tag:expire-after\" value_type : date order : asc limit : 10 actions : - deregister","title":"Filters"},{"location":"filters/#filters","text":"The following filters can be applied to all policies for all resources. See the provider specific resource reference for additional information.","title":"Generic Filters"},{"location":"filters/#value-filter","text":"Cloud Custodian provides for a flexible query language on any resource by allowing for rich queries on JSON objects via JMESPath, and allows for mixing and combining those with boolean conditional operators that are nest-able. (Tutorial here on JMESPath syntax) The base value filter enables the use of jmespath with data returned from a describe call. filters : - type : value key : \"State[0]\" \u2500\u25b6 The value from the describe call value : \"running\" \u2500\u25b6 Value that is being filtered against There are several ways to get a list of possible keys for each resource. Via Custodian CLI Create a new custodian yaml file with just the name and resource fields. Then run custodian run -s OUTPUT_DIR . The valid key fields can be found in the output directory in resources.json policies : - name : my-first-policy resource : aws.ec2 Via Cloud Providers CLI Use the relevant cloud provider cli to run the describe call to view all available keys. For example using aws cli run aws ec2 describe-instances or with azure az vm list . Note: You do not need to include the outermost json field in most cases since custodian removes this field from the results. Via Cloud Provider Documentation Go to the relevant cloud provider sdk documentation and search for the describe api call for the resource you\\'re interested in. The available fields will be listed under the results of that api call. Comparison operators: : The generic value filter allows for comparison operators to be used - `equal` or `eq` - `not-equal` or `ne` - `greater-than` or `gt` - `gte` or `ge` - `less-than` or `lt` - `lte` or `le` filters : - type : value key : CpuOptions.CoreCount \u2500\u25b6 The value from the describe call value : 36 \u2500\u25b6 Value that is being compared op : greater-than \u2500\u25b6 Comparison Operator Other operators: : - absent - present - not-null - empty - contains filters : - type : value key : CpuOptions.CoreCount \u2500\u25b6 The value from the describe call value : present \u2500\u25b6 Checks if key is present Logical Operators: : - or or Or - and or And - not filters : - or : \u2500\u25b6 Logical Operator - type : value key : CpuOptions.CoreCount \u2500\u25b6 The value from the describe call value : 36 \u2500\u25b6 Value that is being compared - type : value key : CpuOptions.CoreCount \u2500\u25b6 The value from the describe call value : 42 \u2500\u25b6 Value that is being compared List Operators: : There is a collection of operators that can be used with user supplied lists. The operators are evaluated as value from key in (the operator) given value . If you would like it evaluated in the opposite way given value in (the operator) value from key then you can include the swap transformation or use the contains operator. - `in` - `not-in` or `ni` - `intersect` - Provides comparison between 2 lists filters : - type : value key : ImageId \u2500\u25b6 The value from the describe call op : in \u2500\u25b6 List operator value : [ ID-123 , ID-321 ] \u2500\u25b6 List of Values to be compared against filters : - type : value key : ImageId.List \u2500\u25b6 The value from the describe call op : in \u2500\u25b6 List operator value : ID-321 \u2500\u25b6 Values to be compared against value_type : swap \u2500\u25b6 Switches list comparison order Special operators: : - glob - Provides Glob matching support - regex - Provides Regex matching support but ignores case (1) - regex-case - Provides case sensitive Regex matching support (1) filters : - type : value key : FunctionName \u2500\u25b6 The value from the describe call, or resources.json op : regex \u2500\u25b6 Special operator value : '(custodian|c7n)_\\w+' \u2500\u25b6 Regex string : match all values beginning with custodian_ or c7n_ - type : value key : name \u2500\u25b6 The value from the describe call, or resources.json op : regex \u2500\u25b6 Special operator value : '^.*c7n.*$' \u2500\u25b6 Regex string : match all values containing c7n - type : value key : name \u2500\u25b6 The value from the describe call, or resources.json op : regex \u2500\u25b6 Special operator value : '^((?!c7n).)*$' \u2500\u25b6 Regex string : match all values not containing c7n These operators are implemented using re.match . If a filter isn\\'t working as expected take a look at the [re]{.title-ref}__ documentation. __ https://docs.python.org/3/library/re.html#search-vs-match Transformations: Transformations on the value can be done using the value_type keyword. The following value types are supported: age - convert to a datetime (for past date comparisons) cidr - parse an ipaddress cidr_size - the length of the network prefix expiration - convert to a datetime (for future date comparisons) integer - convert the value to an integer normalize - convert the value to lowercase resource_count - compare against the number of matched resources size - the length of an element swap - swap the value and the evaluated key date - parse the filter\\'s value as a date. Note that the [age]{.title-ref} and [expiration]{.title-ref} transformations expect a value given as a number of days. Use a floating point value to match time periods shorter than a day. Examples: # Get the size of a group - type : value key : SecurityGroups[].GroupId value_type : size value : 2 # Membership example using swap - type : value key : SecurityGroups[].GroupId value_type : swap op : in value : sg-49b87f44 # Convert to integer before comparison - type : value key : tag:Count op : greater-than value_type : integer value : 0 # Apply only to rds instances created after the given date - type : value key : InstanceCreateTime op : greater-than value_type : date value : \"2019/05/01\" # Find instances launched within the last 31 days - type : value key : LaunchTime op : less-than value_type : age value : 32 # Find instances launched within the past 12 hours - type : value key : LaunchTime op : less-than value_type : age value : 0.5 # Use `resource_count` to filter resources based on the number that matched # Note that no `key` is used for this value_type since it is matching on # the size of the list of resources and not a specific field. - type : value value_type : resource_count op : lt value : 2 # This policy will use `intersect` op to compare rds instances subnet group list # against a user provided list of public subnets from a s3 txt file. - name : find-rds-on-public-subnets-using-s3-list comment : | The txt file needs to be in utf-8 no BOM format and contain one subnet per line in the file no quotes around the subnets either. resource : aws.rds filters : - type : value key : \"DBSubnetGroup.Subnets[].SubnetIdentifier\" op : intersect value_from : url : s3://cloud-custodian-bucket/PublicSubnets.txt format : txt # This policy will compare rds instances subnet group list against a # inline user provided list of public subnets. - name : find-rds-on-public-subnets-using-inline-list resource : aws.rds filters : - type : value key : \"DBSubnetGroup.Subnets[].SubnetIdentifier\" op : intersect value : - subnet-2a8374658 - subnet-1b8474522 - subnet-2d2736444 Value Regex: When using a Value Filter, a value_regex can be specified. This will mean that the value used for comparison is the output from evaluating a regex on the value found on a resource using [key]{.title-ref}. The filter expects that there will be exactly one capturing group, however non-capturing groups can be specified as well, e.g. (?:newkey|oldkey) . Note that if the value regex does not find a match, it will return a None value. In this example there is an expiration comparison, which needs a datetime, however the tag containing this information also has other data in it. By setting the value_regex to capture just the datetime part of the tag, the filter can be evaluated as normal. # Find expiry from tag contents - type : value key : \"tag:metadata\" value_type : expiration value_regex : \".*delete_after=([0-9]{4}-[0-9]{2}-[0-9]{2}).*\" op : less-than value : 0 Value From: value_from allows the use of external values in the Value Filter class c7n.resolver. ValuesFrom ( data , manager ) Retrieve values from a url. Supports json, csv and line delimited text files and expressions to retrieve a subset of values. Expression syntax - on json, a jmespath expr is evaluated - on csv, an integer column or jmespath expr can be specified - on csv2dict, a jmespath expr (the csv is parsed into a dictionary where the keys are the headers and the values are the remaining columns) Text files are expected to be line delimited values. Examples:: value_from: url: s3://bucket/xyz/foo.json expr: [].AppId value_from: url: http://foobar.com/mydata format: json expr: Region.\"us-east-1\"[].ImageId value_from: url: s3://bucket/abc/foo.csv format: csv2dict expr: key[1] # inferred from extension format: [json, csv, csv2dict, txt]","title":"Value Filter"},{"location":"filters/#event-filter","text":"Filter against a CloudWatch event JSON associated to a resource type. The list of possible keys are now from the cloudtrail event and not the describe resource call as is the case in the ValueFilter - name : no-ec2-public-ips resource : aws.ec2 mode : type : cloudtrail events : - RunInstances filters : - type : event \u2500\u2510 The key is a JMESPath Query of key : \"detail.requestParameters.networkInterfaceSet.items[].associatePublicIpAddress\" \u251c\u25b6the event JSON from CloudWatch value : true \u2500\u2518 actions : - type : terminate force : true","title":"Event Filter"},{"location":"filters/#reduce-filter","text":"The reduce filter lets you group, sort, and limit the number of resources to act on. Maybe you want to delete AMIs, but want to do it in small batches where you act on the oldest AMIs first. Or maybe you want to do some chaos engineering and randomly select ec2 instances part of ASGs, but want to make sure no more than one instance per ASG is affected. This filter lets you do that. This works using this process: Group resources Sort each group of resources Selecting a number of resources in each group Combine the resulting resources","title":"Reduce Filter"},{"location":"filters/#grouping-resources","text":"Resources are grouped based on the value extracted as defined by the group-by attribute. All resources not able to extract a value are placed in a group by themselves. This is also the case when group-by is not specified.","title":"Grouping resources"},{"location":"filters/#sorting-resources","text":"Sorting of individual resources within a group is controlled by a combination of the sort-by and order attributes. sort-by determines which value to use to sort and order controls how they are sorted. For any resources with a null value, those are by default sorted last. You can optionally sort those first with the null-order attribute. Note: if neither sort-by or order are specified, no sorting is done.","title":"Sorting resources"},{"location":"filters/#selecting-resources","text":"Once groups have been sorted, we can then apply rules to select a specific number of resources in each group. We first discard some resources and then limit the remaining set to a maximum count. When the discard or discard-percent attributes are specified, we take the ordered resources in each group and discard the first discard-percent of them or discard absolute count, whichever is larger. After discarding resources, we then limit the remaining set. limit-percent is applied first to reduce the number of resources to this percentage of the original. limit is then applied to allow for an absolute count. Resources are kept from the beginning of the list. To explain this with an example, suppose you have 50 resources in a group with all of these set: discard : 5 discard-percent : 20 limit : 10 limit-percent : 30 This would first discard the first 10 resources because 20 percent of 50 is 10, which is greater than 5. You now have 40 resources left in the group and the limit settings are applied. 30% of 40 is 12, but limit is set to 10, which is lower, so the first 10 of the remaining are kept. If they were numbered #1-50, you\\'d have discarded 1-10, kept 11-20, and dropped the remaining 21-50. If you had the following settings: discard-percent : 25 limit-percent : 50 We\\'d discard the first 25% of 50 (12), then of the remaining 38 resources, we\\'d keep 50% of those (19). You\\'d end up with resources 13-31. Now, some of these could eliminate all resources from a group. If you have 20 resources in one group and 5 in another and specify limit-percent = 10 , you\\'ll get 2 resources from the first group and 0 resources from the second.","title":"Selecting resources"},{"location":"filters/#combining-resource-groups","text":"Once the groups have been modified, we now need to combine them back to one set of resources. Since the groups are determined by a JMESPath expression, we sort the groups first based on the order attribute the same way we sort within a group. After the groups are sorted, it\\'s a simple concatenation of resources.","title":"Combining resource groups"},{"location":"filters/#attributes","text":"group-by , sort-by These are both defined the same way... Note: For simplicity, you can specify these as just a single string which is treated as the key . key - The JMESPath expression to extract a value value_regex - A regular expression with a single capture group that extracts a portion of the result of the key expression. value_type - parse the value as one of the following: string (default) number date order controls how to sorting is done asc (default) - sort in ascending order based on key desc - sort in descending order based on key reverse - reverse the order of resources (ignores key ) randomize - randomize the order of resources (ignores key ) null-order - when sorting, where to put resources that have a null value last (default) - at the end of the list first - at the start of the list discard - discard the first N resources within each group discard-percent - discard the first N percentage of resources within each group limit - select the first N resources within each group (after discards) limit-percent - select the first N percentage of resources within each group (after discards)","title":"Attributes"},{"location":"filters/#examples","text":"This example will select the longest running instance from each ASG, then randomly choose 10% of those, making sure to not affect more than 15 instances total, then terminate them. - name : chaos-engineering resource : aws.ec2 filters : - \"State.Name\" : \"running\" - \"tag:aws:autoscaling:groupName\" : present - type : reduce group-by : \"tag:aws:autoscaling:groupName\" sort-by : \"LaunchTime\" order : asc limit : 1 - type : reduce order : randomize limit : 15 limit-percent : 10 actions : - terminate This example will delete old AMIs, but make sure to only do the top 10 based on age. - name : limited-ami-expiration resource : aws.ami filters : - type : image-age days : 180 op : ge - type : reduce sort-by : \"CreationDate\" order : asc limit : 10 actions : - deregister This example simply sorts the resources by when they are marked for expiration. We use a date type because the tags might be in different date formats or are not text-sortable. - name : ami-expiration-by-expire-date resource : aws.ami filters : - type : value key : \"tag:expire-after\" value_type : age op : gt value : 0 - type : reduce sort-by : key : \"tag:expire-after\" value_type : date order : asc limit : 10 actions : - deregister","title":"Examples"},{"location":"policyStructure/","text":"Example Tag Compliance Policy \u00b6 In this sample policy we are filtering for EC2 instances that are: Running Not part of an Auto Scaling Group (ASG) Not already marked for an operation Have less than 10 tags Missing one or more of the required tags. Once Custodian has filtered the list, it will mark all EC2 instances that match the above criteria with a tag. That tag specifies an action that will take place at a certain time. This policy is one of three that are needed to manage tag compliance. The other two policies in this set are: Checking to see if the tags have been corrected before the four day period is up Performing the operation of stopping all instances with the status to be stopped on that particular day. - name : ec2-tag-compliance-mark resource : ec2 comment : | Mark non-compliant, Non-ASG EC2 instances with stoppage in 4 days filters : \u25a3\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 - \"State.Name\" : running \u2502 \u25a3\u2500\u2500\u2500\u2500\u2500\u2500\u2500 - \"tag:aws:autoscaling:groupName\" : absent \u2502 \u2502 \u25a3\u2500\u2500\u2500\u2500\u2500 - \"tag:c7n_status\" : absent \u2502 \u2502 \u2502 \u25a3\u2500\u2500\u2500 - type : tag-count \u2502 \u2502 \u2502 \u2502 - or : \u2500\u2510 \u2502 \u2502 \u2502 \u2502 - \"tag:Owner\" : absent \u251c\u2500If any of these tags are \u2502 \u2502 \u2502 \u2502 - \"tag:CostCenter\" : absent \u2502 missing, then select instance \u2502 \u2502 \u2502 \u2502 - \"tag:Project\" : absent \u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 actions : \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6 For selected instances, run this action \u2502 \u2502 \u2502 \u2502 - type : mark-for-op \u2500\u2500\u2500\u2500\u25b6 Mark instance for operation \u2502 \u2502 \u2502 \u2502 op : stop \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6 Stop instance \u2502 \u2502 \u2502 \u2502 days : 4 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6 After 4 days \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u25a3\u2500\u2500\u2500\u2500\u25b6 If instance has 10 tags, skip \u2502 \u2502 \u25a3\u2500\u2500\u2500\u2500\u2500\u2500\u25b6 If instance already has a c7n_status, skip \u2502 \u25a3\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6 If instance is part of an ASG, skip \u25a3\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6 If instance is not running, skip","title":"Example Tag Compliance Policy"},{"location":"policyStructure/#example-tag-compliance-policy","text":"In this sample policy we are filtering for EC2 instances that are: Running Not part of an Auto Scaling Group (ASG) Not already marked for an operation Have less than 10 tags Missing one or more of the required tags. Once Custodian has filtered the list, it will mark all EC2 instances that match the above criteria with a tag. That tag specifies an action that will take place at a certain time. This policy is one of three that are needed to manage tag compliance. The other two policies in this set are: Checking to see if the tags have been corrected before the four day period is up Performing the operation of stopping all instances with the status to be stopped on that particular day. - name : ec2-tag-compliance-mark resource : ec2 comment : | Mark non-compliant, Non-ASG EC2 instances with stoppage in 4 days filters : \u25a3\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 - \"State.Name\" : running \u2502 \u25a3\u2500\u2500\u2500\u2500\u2500\u2500\u2500 - \"tag:aws:autoscaling:groupName\" : absent \u2502 \u2502 \u25a3\u2500\u2500\u2500\u2500\u2500 - \"tag:c7n_status\" : absent \u2502 \u2502 \u2502 \u25a3\u2500\u2500\u2500 - type : tag-count \u2502 \u2502 \u2502 \u2502 - or : \u2500\u2510 \u2502 \u2502 \u2502 \u2502 - \"tag:Owner\" : absent \u251c\u2500If any of these tags are \u2502 \u2502 \u2502 \u2502 - \"tag:CostCenter\" : absent \u2502 missing, then select instance \u2502 \u2502 \u2502 \u2502 - \"tag:Project\" : absent \u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 actions : \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6 For selected instances, run this action \u2502 \u2502 \u2502 \u2502 - type : mark-for-op \u2500\u2500\u2500\u2500\u25b6 Mark instance for operation \u2502 \u2502 \u2502 \u2502 op : stop \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6 Stop instance \u2502 \u2502 \u2502 \u2502 days : 4 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6 After 4 days \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u25a3\u2500\u2500\u2500\u2500\u25b6 If instance has 10 tags, skip \u2502 \u2502 \u25a3\u2500\u2500\u2500\u2500\u2500\u2500\u25b6 If instance already has a c7n_status, skip \u2502 \u25a3\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6 If instance is part of an ASG, skip \u25a3\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6 If instance is not running, skip","title":"Example Tag Compliance Policy"},{"location":"aws/","text":"Getting Started \u00b6 Write your first policy \u00b6 A policy specifies the following items: The type of resource to run the policy against Filters to narrow down the set of resources Actions to take on the filtered set of resources For this tutorial, let\\'s stop all EC2 instances that are tagged with Custodian . To get started, go make an EC2 instance in your AWS console , and tag it with the key Custodian (any value). Also, make sure you have an access key handy. Then, create a file named custodian.yml with this content: policies : - name : my-first-policy resource : aws.ec2 filters : - \"tag:Custodian\" : present At this point, we have specified the following things: The name of the policy The resource type to query against, in this case (aws.ec2) The filters list The Custodian tag filter Running this policy will not execute any actions as the actions list does not exist. We can extend this example to stop the instances that are actually filtered in by the Custodian tag filter by simply specifying the stop action: policies : - name : my-first-policy resource : aws.ec2 filters : - \"tag:Custodian\" : present actions : - stop Run your policy \u00b6 Now, run Custodian: AWS_ACCESS_KEY_ID = \"foo\" AWS_SECRET_ACCESS_KEY = \"bar\" custodian run --output-dir = . custodian.yml Note: If you already have AWS credentials configured for AWS CLI or SDK access, then you may omit providing them on the command line. If successful, you should see output similar to the following on the command line: 2016-12-20 08:35:06,133: custodian.policy:INFO Running policy my-first-policy resource: ec2 region:us-east-1 c7n:0.8.21.2 2016-12-20 08:35:07,514: custodian.resources.ec2:INFO Filtered from 3 to 1 ec2 2016-12-20 08:35:07,514: custodian.policy:INFO policy: my-first-policy resource:ec2 has count:1 time:1.38 2016-12-20 08:35:07,515: custodian.actions:INFO Stop 1 of 1 instances 2016-12-20 08:35:08,188: custodian.policy:INFO policy: my-first-policy action: stop resources: 1 execution_time: 0.67 You should also find a new my-first-policy directory with a log and other files (subsequent runs will append to the log by default rather than overwriting it). Lastly, you should find the instance stopping or stopped in your AWS console. Congratulations, and welcome to Custodian! See our extended example of a policy\\'s structure tag compliance policy <policyStructure> , or browse all of our use case recipes <usecases> {.interpreted-text role=\"ref\"}. A 2nd Example Policy \u00b6 First a role must be created with the appropriate permissions for custodian to act on the resources described in the policies yaml given as an example below. For convenience, an example policy is provided for this quick start guide. Customized AWS IAM policies will be necessary for your own custodian policies To implement the policy: Open the AWS console Navigate to IAM -> Policies Use the json option to copy the example policy as a new AWS IAM Policy Name the IAM policy as something recognizable and save it. Navigate to IAM -> Roles and create a role called CloudCustodian-QuickStart Assign the role the IAM policy created above. Now with the pre-requisite completed; you are ready continue and run custodian. A custodian policy file needs to be created in YAML format, as an example policies : - name : s3-cross-account description : | Checks S3 for buckets with cross-account access and removes the cross-account access. resource : s3 conditions : - region : us-east-1 filters : - type : cross-account actions : - type : remove-statements statement_ids : matched - name : ec2-require-non-public-and-encrypted-volumes resource : aws.ec2 description : | Provision a lambda and cloud watch event target that looks at all new instances and terminates those with unencrypted volumes. mode : type : cloudtrail role : CloudCustodian-QuickStart events : - RunInstances filters : - type : ebs key : Encrypted value : false actions : - terminate - name : tag-compliance resource : aws.ec2 description : | Schedule a resource that does not meet tag compliance policies to be stopped in four days. filters : - State.Name : running - \"tag:Environment\" : absent - \"tag:AppId\" : absent - or : - \"tag:OwnerContact\" : absent - \"tag:DeptID\" : absent actions : - type : mark-for-op op : stop days : 4 Given that, you can run Cloud Custodian with # Validate the configuration (note this happens by default on run) custodian validate policy.yml # Dryrun on the policies (no actions executed) to see what resources # match each policy. custodian run --dryrun -s out policy.yml # Run the policy custodian run -s out policy.yml Monitor AWS \u00b6 You can generate CloudWatch metrics by specifying the --metrics flag and specifying aws : custodian run -s <output_directory> --metrics aws <policyfile>.yml You can also upload Cloud Custodian logs to CloudWatch logs: custodian run --log-group=/cloud-custodian/<dev-account>/<region> -s <output_directory> <policyfile>.yml And you can output logs and resource records to S3: custodian run -s s3://<my-bucket><my-prefix> <policyfile>.yml If Custodian is being run without Assume Roles, all output will be put into the same account. Custodian is built with the ability to be run from different accounts and leverage STS Role Assumption for cross-account access. Users can leverage the metrics that are being generated after each run by creating Custodian Dashboards in CloudWatch. Troubleshooting & Tinkering \u00b6 If you are not using the us-east-1 region, then you\\'ll need to specify that as well, either on the command line or in an environment variable: --region = us-west-1 AWS_DEFAULT_REGION = us-west-1","title":"Getting Started"},{"location":"aws/#getting-started","text":"","title":"Getting Started"},{"location":"aws/#aws-write-policy","text":"A policy specifies the following items: The type of resource to run the policy against Filters to narrow down the set of resources Actions to take on the filtered set of resources For this tutorial, let\\'s stop all EC2 instances that are tagged with Custodian . To get started, go make an EC2 instance in your AWS console , and tag it with the key Custodian (any value). Also, make sure you have an access key handy. Then, create a file named custodian.yml with this content: policies : - name : my-first-policy resource : aws.ec2 filters : - \"tag:Custodian\" : present At this point, we have specified the following things: The name of the policy The resource type to query against, in this case (aws.ec2) The filters list The Custodian tag filter Running this policy will not execute any actions as the actions list does not exist. We can extend this example to stop the instances that are actually filtered in by the Custodian tag filter by simply specifying the stop action: policies : - name : my-first-policy resource : aws.ec2 filters : - \"tag:Custodian\" : present actions : - stop","title":"Write your first policy"},{"location":"aws/#run-your-policy","text":"Now, run Custodian: AWS_ACCESS_KEY_ID = \"foo\" AWS_SECRET_ACCESS_KEY = \"bar\" custodian run --output-dir = . custodian.yml Note: If you already have AWS credentials configured for AWS CLI or SDK access, then you may omit providing them on the command line. If successful, you should see output similar to the following on the command line: 2016-12-20 08:35:06,133: custodian.policy:INFO Running policy my-first-policy resource: ec2 region:us-east-1 c7n:0.8.21.2 2016-12-20 08:35:07,514: custodian.resources.ec2:INFO Filtered from 3 to 1 ec2 2016-12-20 08:35:07,514: custodian.policy:INFO policy: my-first-policy resource:ec2 has count:1 time:1.38 2016-12-20 08:35:07,515: custodian.actions:INFO Stop 1 of 1 instances 2016-12-20 08:35:08,188: custodian.policy:INFO policy: my-first-policy action: stop resources: 1 execution_time: 0.67 You should also find a new my-first-policy directory with a log and other files (subsequent runs will append to the log by default rather than overwriting it). Lastly, you should find the instance stopping or stopped in your AWS console. Congratulations, and welcome to Custodian! See our extended example of a policy\\'s structure tag compliance policy <policyStructure> , or browse all of our use case recipes <usecases> {.interpreted-text role=\"ref\"}.","title":"Run your policy"},{"location":"aws/#a-2nd-example-policy","text":"First a role must be created with the appropriate permissions for custodian to act on the resources described in the policies yaml given as an example below. For convenience, an example policy is provided for this quick start guide. Customized AWS IAM policies will be necessary for your own custodian policies To implement the policy: Open the AWS console Navigate to IAM -> Policies Use the json option to copy the example policy as a new AWS IAM Policy Name the IAM policy as something recognizable and save it. Navigate to IAM -> Roles and create a role called CloudCustodian-QuickStart Assign the role the IAM policy created above. Now with the pre-requisite completed; you are ready continue and run custodian. A custodian policy file needs to be created in YAML format, as an example policies : - name : s3-cross-account description : | Checks S3 for buckets with cross-account access and removes the cross-account access. resource : s3 conditions : - region : us-east-1 filters : - type : cross-account actions : - type : remove-statements statement_ids : matched - name : ec2-require-non-public-and-encrypted-volumes resource : aws.ec2 description : | Provision a lambda and cloud watch event target that looks at all new instances and terminates those with unencrypted volumes. mode : type : cloudtrail role : CloudCustodian-QuickStart events : - RunInstances filters : - type : ebs key : Encrypted value : false actions : - terminate - name : tag-compliance resource : aws.ec2 description : | Schedule a resource that does not meet tag compliance policies to be stopped in four days. filters : - State.Name : running - \"tag:Environment\" : absent - \"tag:AppId\" : absent - or : - \"tag:OwnerContact\" : absent - \"tag:DeptID\" : absent actions : - type : mark-for-op op : stop days : 4 Given that, you can run Cloud Custodian with # Validate the configuration (note this happens by default on run) custodian validate policy.yml # Dryrun on the policies (no actions executed) to see what resources # match each policy. custodian run --dryrun -s out policy.yml # Run the policy custodian run -s out policy.yml","title":"A 2nd Example Policy"},{"location":"aws/#monitor-aws-cc","text":"You can generate CloudWatch metrics by specifying the --metrics flag and specifying aws : custodian run -s <output_directory> --metrics aws <policyfile>.yml You can also upload Cloud Custodian logs to CloudWatch logs: custodian run --log-group=/cloud-custodian/<dev-account>/<region> -s <output_directory> <policyfile>.yml And you can output logs and resource records to S3: custodian run -s s3://<my-bucket><my-prefix> <policyfile>.yml If Custodian is being run without Assume Roles, all output will be put into the same account. Custodian is built with the ability to be run from different accounts and leverage STS Role Assumption for cross-account access. Users can leverage the metrics that are being generated after each run by creating Custodian Dashboards in CloudWatch.","title":"Monitor AWS"},{"location":"aws/#troubleshooting-tinkering","text":"If you are not using the us-east-1 region, then you\\'ll need to specify that as well, either on the command line or in an environment variable: --region = us-west-1 AWS_DEFAULT_REGION = us-west-1","title":"Troubleshooting &amp; Tinkering"},{"location":"aws/lambda/","text":"Lambda Support \u00b6 Lambda provides for powerful realtime event based code execution in response to infrastructure and application behavior. A number of different Amazon services can be used as event sources. CloudWatch Events \u00b6 CloudWatch Events (CWE) is a general event bus for AWS infrastructure. Currently, it covers several major sources of information: CloudTrail API calls over a poll period on CloudTrail delivery, real-time instance status events, autoscale group notifications, and scheduled/periodic events. CloudTrail provides a very rich data source over the entire range of AWS services exposed via the audit trail that allows Custodian to define effective realtime policies against any AWS product. Additionally, for EC2 instances we can provide mandatory policy compliance - this means the non-compliant resources never became available. Cloud Custodian Integration \u00b6 Custodian provides for policy level execution against any Amazon CloudWatch Event stream. Henceforth \\\"CloudWatch Events\\\" will be abbreviated as CWE. Each Custodian policy can be deployed as an independent Lambda function. The only difference between a Custodian policy that runs in Lambda and one that runs directly from the CLI in poll mode is the specification of the subscription of the events in the mode config block of the policy. Internally Custodian will reconstitute current state for all the resources in the event, execute the policy against them, match against the policy filters, and apply the policy actions to matching resources. CloudTrail API Calls \u00b6 Lambdas can receive CWE over CloudTrail API calls within seconds of delay at P99. policies : - name : ec2-tag-running resource : ec2 mode : type : cloudtrail events : - RunInstances actions : - type : mark tag : foo msg : bar Because the total AWS API surface area is so large most CloudTrail API event subscriptions need two additional fields: For CloudTrail events we need to reference the source API call. In the code block example below this is the source: key. To work transparently with existing resource policies, we also need to specify how to extract the resource IDs from the event via JMESPath so that the resources can be queried. In the code block example below this is the ids: key. For very common API calls for policies, some shortcuts have been defined to allow for easier policy writing as for the RunInstances API call above, which expands to: events : - source : ec2.amazonaws.com event : RunInstances ids : \"responseElements.instancesSet.items[].instanceId\" Refer to the AWS execution modes documention for a list of other configurable options. EC2 Instance State Events \u00b6 Policies can react to EC2 instance state events in real time. policies : - name : ec2-require-encrypted-volumes resource : ec2 mode : type : ec2-instance-state events : - pending filters : - type : ebs key : Encrypted value : False actions : - mark - terminate Refer to AWS execution modes documentation for a list of configurable options. Periodic Function \u00b6 We support both rate per unit time and cron expressions, per scheduler syntax . When using --assume on the custodian run cli command, the specified role is also considered as the execution role to be attached to lambda function that gets deployed. In such scenario it is not required to specify the role attribute in the config block for mode. However, if you are not using the --assume option, then it is required to add role in the config-block of mode. When specifying role {account_id} is runtime substituted so a policy can be used across accounts. policies : - name : s3-bucket-check resource : s3 mode : type : periodic schedule : \"rate(1 day)\" role : arn:aws:iam::{account_id}:role/some-role Event Pattern Filtering \u00b6 Cloud Watch Events also support content/pattern filtering, see https://docs.aws.amazon.com/eventbridge/latest/userguide/content-filtering-with-event-patterns.html https://aws.amazon.com/blogs/compute/reducing-custom-code-by-using-advanced-rules-in-amazon-eventbridge/ In the context of a custodian policy you can define a \\'pattern\\' key under mode, the pattern will be merged with the custodian generated default event pattern. If the pattern filtering does not match the event, the custodian policy lambda will not be invoked/executed. In the following example policy, an additional event pattern is supplied that ignores any create subnet call by the iam user named [deputy]{.title-ref}. policies : - name : subnet-detect resource : aws.subnet mode : type : cloudtrail role : CustodianDemoRole events : - source : ec2.amazonaws.com event : CreateSubnet ids : responseElements.subnet.subnetId pattern : detail : userIdentity : userName : [{ 'anything-but' : 'deputy' }] Config Rules \u00b6 AWS Config rules allow you to invoke logic in response to configuration changes in your AWS environment, and Cloud Custodian is the easiest way to write and provision Config rules. Delay here is typically 1-15m (though the SLA on tag-only changes is a bit higher). In this section we\\'ll look at how we would deploy the quickstart <quickstart> example using Config. Before you proceed, make sure you\\'ve removed the Custodian tag from any EC2 instance left over from the quickstart. First, modify custodian.yml to specify a mode type of config-rule . You\\'ll also need the ARN of an IAM role to assume when running the Lambda that Custodian is going to install for you. Sensible policies to add to that role would be AWSLambdaBasicExecutionRole and AWSConfigRulesExecutionRole , on top of any permissions your lambda is going to need to perform the actions you want it to perform. policies : - name : my-first-policy mode : type : config-rule role : arn:aws:iam::123456789012:role/some-role resource : ec2 filters : - \"tag:Custodian\" : present actions : - stop Then make sure that you\\'ve set up AWS Config. If you go to the AWS Config console and see the welcome screen instead of the dashboard, go through the setup procedure first . Now deploy the policy: custodian run -s . custodian.yml That should give you log output like this: 2017-01-25 05:43:01,539: custodian.policy:INFO Provisioning policy lambda my-first-policy 2017-01-25 05:43:04,683: custodian.lambda:INFO Publishing custodian policy lambda function custodian-my-first-policy Go check the AWS console to see the Lambda as well as the Config rule that Custodian created. The Config rule should be listed as \\\"Compliant\\\" or \\\"No results reported\\\" (if not, be sure you removed the Custodian tag from any instance left over from the quickstart). Now for the fun part! With your new policy installed, go ahead and create an EC2 instance with a Custodian tag (any non-empty value), and wait (events from Config are effectively delayed 15m up to 6hrs on tag changes). If all goes well, you should eventually see that your new custom Config rule notices the EC2 instance with the Custodian tag, and stops it according to your policy. Congratulations! You have now installed your policy to run under Config rather than from your command line. Lambda Configuration \u00b6 Custodian lambdas support configuring all lambda options via keys on the lambda mode in the YAML. See AWS\\' AWS Lambda Function Configuration page for the full list of configuration options available on a Lambda. Refer to aws_modes for detailed explanation of the different type values and the corresponding additional configuration options each requires. Here is an example YAML fragment that shows the options you are most likely to want or need to configure on a lambda: mode : type : cloudtrail events : - CreateBucket ##### ROLE ##### # Specify the ARN role as either name or full ARN. This shows # us running the lambda with the IAM role named Custodian. # Specifying role by name: role : Custodian # Or specifying using a full ARN # role: arn:aws:iam::123456789012:role/Custodian ##### TAGS ##### # Specify the tags to assign to this Lambda. We are setting a # tag named \"Application\" with a value of \"Custodian\", and a # \"CreatedBy\" tag with a value of \"CloudCustodian\". tags : Application : Custodian CreatedBy : CloudCustodian Execution Options \u00b6 When running in Lambda you may want policy execution to run using particular options corresponding to those passed to the custodian CLI. Execution in lambda comes with a default set of configuration which is different from the defaults you might set when running through the command line: Metrics are enabled Output dir is set to a random /tmp/ directory Caching of AWS resource state is disabled Account ID is automatically set with info from sts Region is automatically set to the region of the lambda (using the AWS_DEFAULT_REGION environment variable in lambda) When you want to override these settings, you must set \\'execution-options\\' with one of the following keys: region cache profile account_id assume_role log_group metrics output_dir cache_period dryrun One useful thing we can do with these options is to make a policy execute in a different account using assume_role. A policy definition for this looks like: policies : - name : my-first-policy-cross-account mode : type : periodic schedule : \"rate(1 day)\" role : arn:aws:iam::123456789012:role/lambda-role execution-options : assume_role : arn:aws:iam::210987654321:role/target-role metrics : aws resource : ec2 filters : - \"tag:Custodian\" : present actions : - stop A couple of things to note here: Metrics are pushed using the assumed role which may or may not be desired The mode must be periodic as there are restrictions on where policy executions can run according to the mode: Config : May run in a different region but not cross-account Event : Only run in the same region and account Periodic : May run in a different region and different account","title":"Lambda Support"},{"location":"aws/lambda/#lambda-support","text":"Lambda provides for powerful realtime event based code execution in response to infrastructure and application behavior. A number of different Amazon services can be used as event sources.","title":"Lambda Support"},{"location":"aws/lambda/#cloudwatch-events","text":"CloudWatch Events (CWE) is a general event bus for AWS infrastructure. Currently, it covers several major sources of information: CloudTrail API calls over a poll period on CloudTrail delivery, real-time instance status events, autoscale group notifications, and scheduled/periodic events. CloudTrail provides a very rich data source over the entire range of AWS services exposed via the audit trail that allows Custodian to define effective realtime policies against any AWS product. Additionally, for EC2 instances we can provide mandatory policy compliance - this means the non-compliant resources never became available.","title":"CloudWatch Events"},{"location":"aws/lambda/#cloud-custodian-integration","text":"Custodian provides for policy level execution against any Amazon CloudWatch Event stream. Henceforth \\\"CloudWatch Events\\\" will be abbreviated as CWE. Each Custodian policy can be deployed as an independent Lambda function. The only difference between a Custodian policy that runs in Lambda and one that runs directly from the CLI in poll mode is the specification of the subscription of the events in the mode config block of the policy. Internally Custodian will reconstitute current state for all the resources in the event, execute the policy against them, match against the policy filters, and apply the policy actions to matching resources.","title":"Cloud Custodian Integration"},{"location":"aws/lambda/#config-rules","text":"AWS Config rules allow you to invoke logic in response to configuration changes in your AWS environment, and Cloud Custodian is the easiest way to write and provision Config rules. Delay here is typically 1-15m (though the SLA on tag-only changes is a bit higher). In this section we\\'ll look at how we would deploy the quickstart <quickstart> example using Config. Before you proceed, make sure you\\'ve removed the Custodian tag from any EC2 instance left over from the quickstart. First, modify custodian.yml to specify a mode type of config-rule . You\\'ll also need the ARN of an IAM role to assume when running the Lambda that Custodian is going to install for you. Sensible policies to add to that role would be AWSLambdaBasicExecutionRole and AWSConfigRulesExecutionRole , on top of any permissions your lambda is going to need to perform the actions you want it to perform. policies : - name : my-first-policy mode : type : config-rule role : arn:aws:iam::123456789012:role/some-role resource : ec2 filters : - \"tag:Custodian\" : present actions : - stop Then make sure that you\\'ve set up AWS Config. If you go to the AWS Config console and see the welcome screen instead of the dashboard, go through the setup procedure first . Now deploy the policy: custodian run -s . custodian.yml That should give you log output like this: 2017-01-25 05:43:01,539: custodian.policy:INFO Provisioning policy lambda my-first-policy 2017-01-25 05:43:04,683: custodian.lambda:INFO Publishing custodian policy lambda function custodian-my-first-policy Go check the AWS console to see the Lambda as well as the Config rule that Custodian created. The Config rule should be listed as \\\"Compliant\\\" or \\\"No results reported\\\" (if not, be sure you removed the Custodian tag from any instance left over from the quickstart). Now for the fun part! With your new policy installed, go ahead and create an EC2 instance with a Custodian tag (any non-empty value), and wait (events from Config are effectively delayed 15m up to 6hrs on tag changes). If all goes well, you should eventually see that your new custom Config rule notices the EC2 instance with the Custodian tag, and stops it according to your policy. Congratulations! You have now installed your policy to run under Config rather than from your command line.","title":"Config Rules"},{"location":"aws/lambda/#lambda-configuration","text":"Custodian lambdas support configuring all lambda options via keys on the lambda mode in the YAML. See AWS\\' AWS Lambda Function Configuration page for the full list of configuration options available on a Lambda. Refer to aws_modes for detailed explanation of the different type values and the corresponding additional configuration options each requires. Here is an example YAML fragment that shows the options you are most likely to want or need to configure on a lambda: mode : type : cloudtrail events : - CreateBucket ##### ROLE ##### # Specify the ARN role as either name or full ARN. This shows # us running the lambda with the IAM role named Custodian. # Specifying role by name: role : Custodian # Or specifying using a full ARN # role: arn:aws:iam::123456789012:role/Custodian ##### TAGS ##### # Specify the tags to assign to this Lambda. We are setting a # tag named \"Application\" with a value of \"Custodian\", and a # \"CreatedBy\" tag with a value of \"CloudCustodian\". tags : Application : Custodian CreatedBy : CloudCustodian","title":"Lambda Configuration"},{"location":"aws/lambda/#execution-options","text":"When running in Lambda you may want policy execution to run using particular options corresponding to those passed to the custodian CLI. Execution in lambda comes with a default set of configuration which is different from the defaults you might set when running through the command line: Metrics are enabled Output dir is set to a random /tmp/ directory Caching of AWS resource state is disabled Account ID is automatically set with info from sts Region is automatically set to the region of the lambda (using the AWS_DEFAULT_REGION environment variable in lambda) When you want to override these settings, you must set \\'execution-options\\' with one of the following keys: region cache profile account_id assume_role log_group metrics output_dir cache_period dryrun One useful thing we can do with these options is to make a policy execute in a different account using assume_role. A policy definition for this looks like: policies : - name : my-first-policy-cross-account mode : type : periodic schedule : \"rate(1 day)\" role : arn:aws:iam::123456789012:role/lambda-role execution-options : assume_role : arn:aws:iam::210987654321:role/target-role metrics : aws resource : ec2 filters : - \"tag:Custodian\" : present actions : - stop A couple of things to note here: Metrics are pushed using the assumed role which may or may not be desired The mode must be periodic as there are restrictions on where policy executions can run according to the mode: Config : May run in a different region but not cross-account Event : Only run in the same region and account Periodic : May run in a different region and different account","title":"Execution Options"},{"location":"aws/usage/","text":"Monitoring your environment \u00b6 Cloud Custodian generates a consistent set of outputs for any given policy. Custodian automatically generates per policy outputs with resources metrics and archives serialization for all resources that match against a policy\\'s filters. TODO: figure out where \\\"Custodian Dashboards in CloudWatch\\\" page goes -- here? its own page? part of Getting Started? Metrics \u00b6 By default Cloud Custodian generates CloudWatch metrics on each policy for the number of resources that matched the set of filters, the time to retrieve and filter the resources, and the time to execute actions. In practice this number of matching resources allows for generating enough metrics to put together useful dashboards over policies in CloudWatch custom dashboards. Additionally some filters and actions may generate their own metrics. In order to enable metrics output, the boolean metrics flag needs to be specified when running Cloud Custodian: custodian run -s <output_directory> --metrics aws <policyfile>.yml You can also consolidate metrics into a single account by specifying the master location in the cli. Note that this is only applicable when using the --assume option in the cli or when using c7n-org. By default, metrics will be sent to the same account that is being executed against: custodian run -s <output_directory> --metrics aws://master Additionally, to use a different namespace other than the default CloudMaid , you can add the following query parameter to the metrics flag: custodian run -s <output_directory> --metrics aws://?namespace=foo This will create a new namespace, foo in CloudWatch Metrics. You can also combine these two options to emit metrics into a custom namespace in a central account: custodian run -s <output_directory> --metrics aws://master?namespace=foo Finally, to send metrics to a specific region, use the region query parameter to specify a region: custodian run -s <output_directory> --metrics aws://?region=us-west-2 When running the metrics in a centralized account or when centralizing to a specific region, additional account and region dimensions will be included. CloudWatch Logs \u00b6 Custodian can optionally upload its logs in realtime to CloudWatch logs, if a log group is specified. Each policy\\'s log output is generated as a separate stream. Usage example: custodian run --log-group=/cloud-custodian/<dev-account>/<region> <policyfile>.yml If enabled, it is recommended to set a log subscription on the group to be informed of an operations issue. If S3 output is also enabled, then it is also recommended to set a log group archival policy and to use the S3 logs as permanent/audit archive. You can also aggregate your logs within a single region or account using the same url formatting as is used for metrics. To send your logs to a region in the master account use: custodian run --log-group=aws://master/<log-group-name>?region=<region> <policyfile>.yml This will set up a stream for every region/account you run custodian against within the specified log group. The default log stream format looks like this: account_id/region/policy_name If you want to override this then you can pass the the log stream parameter like this: custodian run --log-group=\\\"aws://master/\\<log-group-name>?region=\\<region>&stream=custodian_{region}_{account}_{policy} \\<policyfile>.yml\\\" it currently accepts these variables: : {account}: the account where the check was executed. {region}: the region where the check was executed. {policy}: the name of the policy that was executed. S3 Logs & Records \u00b6 Custodian will output its logs and structured resource records in JSON format to S3, along with its log files for archival purposes. The S3 bucket and prefix can be specified via parameters: custodian run --output-dir s3://<my-bucket>/<my-prefix> <policyfile>.yml Reports \u00b6 CSV or text-based reports can be generated with the report subcommand. Reporting is used to list information gathered during previous calls to the run subcommand. If your goal is to find out what resources match on a policy use run along with the --dryrun option.","title":"Monitoring your environment"},{"location":"aws/usage/#monitoring-your-environment","text":"Cloud Custodian generates a consistent set of outputs for any given policy. Custodian automatically generates per policy outputs with resources metrics and archives serialization for all resources that match against a policy\\'s filters. TODO: figure out where \\\"Custodian Dashboards in CloudWatch\\\" page goes -- here? its own page? part of Getting Started?","title":"Monitoring your environment"},{"location":"aws/usage/#metrics","text":"By default Cloud Custodian generates CloudWatch metrics on each policy for the number of resources that matched the set of filters, the time to retrieve and filter the resources, and the time to execute actions. In practice this number of matching resources allows for generating enough metrics to put together useful dashboards over policies in CloudWatch custom dashboards. Additionally some filters and actions may generate their own metrics. In order to enable metrics output, the boolean metrics flag needs to be specified when running Cloud Custodian: custodian run -s <output_directory> --metrics aws <policyfile>.yml You can also consolidate metrics into a single account by specifying the master location in the cli. Note that this is only applicable when using the --assume option in the cli or when using c7n-org. By default, metrics will be sent to the same account that is being executed against: custodian run -s <output_directory> --metrics aws://master Additionally, to use a different namespace other than the default CloudMaid , you can add the following query parameter to the metrics flag: custodian run -s <output_directory> --metrics aws://?namespace=foo This will create a new namespace, foo in CloudWatch Metrics. You can also combine these two options to emit metrics into a custom namespace in a central account: custodian run -s <output_directory> --metrics aws://master?namespace=foo Finally, to send metrics to a specific region, use the region query parameter to specify a region: custodian run -s <output_directory> --metrics aws://?region=us-west-2 When running the metrics in a centralized account or when centralizing to a specific region, additional account and region dimensions will be included.","title":"Metrics"},{"location":"aws/usage/#cloudwatch-logs","text":"Custodian can optionally upload its logs in realtime to CloudWatch logs, if a log group is specified. Each policy\\'s log output is generated as a separate stream. Usage example: custodian run --log-group=/cloud-custodian/<dev-account>/<region> <policyfile>.yml If enabled, it is recommended to set a log subscription on the group to be informed of an operations issue. If S3 output is also enabled, then it is also recommended to set a log group archival policy and to use the S3 logs as permanent/audit archive. You can also aggregate your logs within a single region or account using the same url formatting as is used for metrics. To send your logs to a region in the master account use: custodian run --log-group=aws://master/<log-group-name>?region=<region> <policyfile>.yml This will set up a stream for every region/account you run custodian against within the specified log group. The default log stream format looks like this: account_id/region/policy_name If you want to override this then you can pass the the log stream parameter like this: custodian run --log-group=\\\"aws://master/\\<log-group-name>?region=\\<region>&stream=custodian_{region}_{account}_{policy} \\<policyfile>.yml\\\" it currently accepts these variables: : {account}: the account where the check was executed. {region}: the region where the check was executed. {policy}: the name of the policy that was executed.","title":"CloudWatch Logs"},{"location":"aws/usage/#s3-logs-records","text":"Custodian will output its logs and structured resource records in JSON format to S3, along with its log files for archival purposes. The S3 bucket and prefix can be specified via parameters: custodian run --output-dir s3://<my-bucket>/<my-prefix> <policyfile>.yml","title":"S3 Logs &amp; Records"},{"location":"aws/usage/#reports","text":"CSV or text-based reports can be generated with the report subcommand. Reporting is used to list information gathered during previous calls to the run subcommand. If your goal is to find out what resources match on a policy use run along with the --dryrun option.","title":"Reports"},{"location":"aws/examples/","text":"Example Policies \u00b6 These use cases provide examples of specific policies for individual AWS modules. {nav}","title":"Example Policies"},{"location":"aws/examples/#example-policies","text":"These use cases provide examples of specific policies for individual AWS modules. {nav}","title":"Example Policies"},{"location":"aws/examples/accountinvalidiplogin/","text":"Account - Login From Invalid IP Address \u00b6 The following example policy will automatically create a CloudWatch Event Rule triggered Lambda function in your account and region which will be triggered anytime a user logs in from an invalid IP address. If the source IP address of the event is outside of the provided ranges in the policy then notify the admins security team for further investigation. Using the cloudtrail mode provides near real-time auto-remediation (typically within 1-2 mins) of the event occurring. Having such a quick auto-remediation action greatly reduces an attack window! By notifying the cloud admins or security team they can validate the login and revoke the login session if it\\'s not valid followed by changing the password for or disabling the compromised user etc. In the below example the filter being applied is regex and reads as follows: -Notify if the source IP address of the event is not from one of the valid IP CIDRs - 158.103.0.0/16 - 142.179.0.0/16 - 187.39.0.0/16 - 12.0.0.0/8 You can generate the Regex for IP ranges on a site like: http://www.analyticsmarket.com/freetools/ipregex policies : - name : invalid-ip-address-login-detected resource : account description : | Notifies on invalid external IP console logins mode : type : cloudtrail events : - ConsoleLogin filters : - not : - type : event key : 'detail.sourceIPAddress' value : | '^((158\\.103\\.|142\\.179\\.|187\\.39\\.)([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5]) \\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5]))|(12\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5]) \\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5]))$' op : regex actions : - type : notify template : default.html priority_header : 1 subject : \"Login From Invalid IP Detected - [custodian {{ account }} - {{ region }}]\" violation_desc : \"A User Has Logged In Externally From A Invalid IP Address Outside The Company's Range:\" action_desc : | \"Please investigate and revoke the invalid session along with any other restrictive actions if appropriate\" to : - CloudAdmins@Company.com - SecurityTeam@Company.com transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1 Note that the notify action requires the cloud custodian mailer tool to be installed.","title":"Account - Login From Invalid IP Address"},{"location":"aws/examples/accountinvalidiplogin/#account-login-from-invalid-ip-address","text":"The following example policy will automatically create a CloudWatch Event Rule triggered Lambda function in your account and region which will be triggered anytime a user logs in from an invalid IP address. If the source IP address of the event is outside of the provided ranges in the policy then notify the admins security team for further investigation. Using the cloudtrail mode provides near real-time auto-remediation (typically within 1-2 mins) of the event occurring. Having such a quick auto-remediation action greatly reduces an attack window! By notifying the cloud admins or security team they can validate the login and revoke the login session if it\\'s not valid followed by changing the password for or disabling the compromised user etc. In the below example the filter being applied is regex and reads as follows: -Notify if the source IP address of the event is not from one of the valid IP CIDRs - 158.103.0.0/16 - 142.179.0.0/16 - 187.39.0.0/16 - 12.0.0.0/8 You can generate the Regex for IP ranges on a site like: http://www.analyticsmarket.com/freetools/ipregex policies : - name : invalid-ip-address-login-detected resource : account description : | Notifies on invalid external IP console logins mode : type : cloudtrail events : - ConsoleLogin filters : - not : - type : event key : 'detail.sourceIPAddress' value : | '^((158\\.103\\.|142\\.179\\.|187\\.39\\.)([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5]) \\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5]))|(12\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5]) \\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5]))$' op : regex actions : - type : notify template : default.html priority_header : 1 subject : \"Login From Invalid IP Detected - [custodian {{ account }} - {{ region }}]\" violation_desc : \"A User Has Logged In Externally From A Invalid IP Address Outside The Company's Range:\" action_desc : | \"Please investigate and revoke the invalid session along with any other restrictive actions if appropriate\" to : - CloudAdmins@Company.com - SecurityTeam@Company.com transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1 Note that the notify action requires the cloud custodian mailer tool to be installed.","title":"Account - Login From Invalid IP Address"},{"location":"aws/examples/accountrootlogin/","text":"Account - Detect Root Logins \u00b6 The following example policy will automatically create a CloudWatch Event Rule triggered Lambda function in your account and region which will be triggered anytime the root user of the account logs in. Typically the root user of an AWS account should never need to login after the initial account setup and root user access should be very tightly controlled with hardware MFA and other controls as root has full control of everything in the account. Having this visibility to see if and when someone logs in as root is very important. policies : - name : root-user-login-detected resource : account description : | Notifies Security and Cloud Admins teams on any AWS root user console logins mode : type : cloudtrail events : - ConsoleLogin filters : - type : event key : \"detail.userIdentity.type\" value_type : swap op : in value : Root actions : - type : notify template : default.html priority_header : 1 subject : \"Root User Login Detected! - [custodian {{ account }} - {{ region }}]\" violation_desc : \"A User Has Logged Into the AWS Console With The Root User:\" action_desc : | \"Please investigate and if needed revoke the root users session along with any other restrictive actions if it's an unapproved root login\" to : - CloudAdmins@Company.com - SecurityTeam@Company.com transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1 Note that the notify action requires the cloud custodian mailer tool to be installed.","title":"Account - Detect Root Logins"},{"location":"aws/examples/accountrootlogin/#account-detect-root-logins","text":"The following example policy will automatically create a CloudWatch Event Rule triggered Lambda function in your account and region which will be triggered anytime the root user of the account logs in. Typically the root user of an AWS account should never need to login after the initial account setup and root user access should be very tightly controlled with hardware MFA and other controls as root has full control of everything in the account. Having this visibility to see if and when someone logs in as root is very important. policies : - name : root-user-login-detected resource : account description : | Notifies Security and Cloud Admins teams on any AWS root user console logins mode : type : cloudtrail events : - ConsoleLogin filters : - type : event key : \"detail.userIdentity.type\" value_type : swap op : in value : Root actions : - type : notify template : default.html priority_header : 1 subject : \"Root User Login Detected! - [custodian {{ account }} - {{ region }}]\" violation_desc : \"A User Has Logged Into the AWS Console With The Root User:\" action_desc : | \"Please investigate and if needed revoke the root users session along with any other restrictive actions if it's an unapproved root login\" to : - CloudAdmins@Company.com - SecurityTeam@Company.com transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1 Note that the notify action requires the cloud custodian mailer tool to be installed.","title":"Account - Detect Root Logins"},{"location":"aws/examples/accountservicelimit/","text":"Account - Service Limit \u00b6 The following example policy will find any service in your region that is using more than 50% of the limit and raise the limit for 25%. policies : - name : account-service-limits resource : account filters : - type : service-limit threshold : 50 actions : - type : request-limit-increase percent-increase : 25 Noted that the threshold in service-limit filter is an optional field. If not mentioned on the policy, the default value is 80. Global Services : Services like IAM are not region-based. Custodian will put the limit information only in us-east-1 . When running the policy above in multiple regions, the limit of global services will ONLY be raised in us-east-1. Additionally, if you want to target any the global services on the policy, you will need to target the region as us-east-1 on the policy. Here is an example. ``` yaml policies: - name: account-service-limits resource: account conditions: - region: us-east-1 filters: - type: service-limit services: - IAM threshold: 50 ```","title":"Account - Service Limit"},{"location":"aws/examples/accountservicelimit/#account-service-limit","text":"The following example policy will find any service in your region that is using more than 50% of the limit and raise the limit for 25%. policies : - name : account-service-limits resource : account filters : - type : service-limit threshold : 50 actions : - type : request-limit-increase percent-increase : 25 Noted that the threshold in service-limit filter is an optional field. If not mentioned on the policy, the default value is 80. Global Services : Services like IAM are not region-based. Custodian will put the limit information only in us-east-1 . When running the policy above in multiple regions, the limit of global services will ONLY be raised in us-east-1. Additionally, if you want to target any the global services on the policy, you will need to target the region as us-east-1 on the policy. Here is an example. ``` yaml policies: - name: account-service-limits resource: account conditions: - region: us-east-1 filters: - type: service-limit services: - IAM threshold: 50 ```","title":"Account - Service Limit"},{"location":"aws/examples/amicomp/","text":"AMI - Stop EC2 using Unapproved AMIs \u00b6 - name : ec2-invalid-ami resource : ec2 comment : | Find all running EC2 instances that are using invalid AMIs and stop them filters : - \"State.Name\" : running - type : value key : ImageId op : in value : - ami-12324567 # Invalid - ami-12324567 # Invalid - ami-12324567 # Invalid - ami-12324567 # Invalid - ami-12324567 # Invalid actions : - stop","title":"AMI - Stop EC2 using Unapproved AMIs"},{"location":"aws/examples/amicomp/#ami-stop-ec2-using-unapproved-amis","text":"- name : ec2-invalid-ami resource : ec2 comment : | Find all running EC2 instances that are using invalid AMIs and stop them filters : - \"State.Name\" : running - type : value key : ImageId op : in value : - ami-12324567 # Invalid - ami-12324567 # Invalid - ami-12324567 # Invalid - ami-12324567 # Invalid - ami-12324567 # Invalid actions : - stop","title":"AMI - Stop EC2 using Unapproved AMIs"},{"location":"aws/examples/asginvalidconfig/","text":"AutoScaling Group - Verify ASGs have valid configurations \u00b6 The following example policy will check all AutoScaling Groups in the current account and region for configuration issues which could prevent the ASG from functioning properly or launching an instance. Then the ASG resource owner and a cloud admins group get an email showing the affected ASG(s). The following ASG items are checked when using the - invalid filter: : - invalid subnets - invalid security groups - invalid key pair name - invalid launch config volume snapshots - invalid AMIs - invalid ELB health check policies : - name : asg-invalid-configuration resource : asg filters : - invalid actions : - type : notify template : default.html priority_header : 1 subject : \"ASG-Invalid Config-[custodian {{ account }} - {{ region }}]\" violation_desc : | \"New ASG instances may fail to launch or scale! The following Autoscaling Groups have invalid AMIs, SGs, KeyPairs, Launch Configs, or Health Checks\" action_desc : | \"Actions Taken: Notification Only. Please investigate and fix your ASGs configuration to prevent you from having any outages or issues\" to : - CloudAdmins@Company.com - resource-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1 Note that the notify action requires the cloud custodian mailer tool to be installed.","title":"AutoScaling Group - Verify ASGs have valid configurations"},{"location":"aws/examples/asginvalidconfig/#autoscaling-group-verify-asgs-have-valid-configurations","text":"The following example policy will check all AutoScaling Groups in the current account and region for configuration issues which could prevent the ASG from functioning properly or launching an instance. Then the ASG resource owner and a cloud admins group get an email showing the affected ASG(s). The following ASG items are checked when using the - invalid filter: : - invalid subnets - invalid security groups - invalid key pair name - invalid launch config volume snapshots - invalid AMIs - invalid ELB health check policies : - name : asg-invalid-configuration resource : asg filters : - invalid actions : - type : notify template : default.html priority_header : 1 subject : \"ASG-Invalid Config-[custodian {{ account }} - {{ region }}]\" violation_desc : | \"New ASG instances may fail to launch or scale! The following Autoscaling Groups have invalid AMIs, SGs, KeyPairs, Launch Configs, or Health Checks\" action_desc : | \"Actions Taken: Notification Only. Please investigate and fix your ASGs configuration to prevent you from having any outages or issues\" to : - CloudAdmins@Company.com - resource-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1 Note that the notify action requires the cloud custodian mailer tool to be installed.","title":"AutoScaling Group - Verify ASGs have valid configurations"},{"location":"aws/examples/asgnotused/","text":"AMI - ASG Garbage Collector \u00b6 ASG garbage collector which mean that: Check if an ASG has minSize = 0 and DesiredCapacity = 0 Mark the ASG as ops to alert. If value won\\'t change cloudCustodian will send an alert with ASGs. - name : asg-mark-as-unused resource : asg comments : | Mark any unused ASG checking it every day. filters : - type : value key : MinSize value : 0 op : eq - type : value key : DesiredCapacity value : 0 op : eq actions : - type : mark-for-op op : notify days : 30 - name : asg-unmark-as-unused resource : asg comments : | Unmark any ASG that has a value greater than 0. filters : - type : value key : DesiredCapacity op : greater-than value : 0 - \"tag:maid_status\" : not-null actions : - unmark - name : asg-slack-alert resource : asg comments : | Alert for ASG which have MinSize < 0 and DesiredCapacity < 0 filters : - \"tag:maid_status\" : not-null - type : marked-for-op op : notify actions : - type : notify slack_template : slack violation_desc : Having ASG with both (DesiredCapacity and MinSize) = 0. action_desc : Please investigate if you can delete this ASG. to : - https://hooks.slack.com/services/TXXXXX/XXXXXX/XXXxxXXX transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1","title":"AMI - ASG Garbage Collector"},{"location":"aws/examples/asgnotused/#ami-asg-garbage-collector","text":"ASG garbage collector which mean that: Check if an ASG has minSize = 0 and DesiredCapacity = 0 Mark the ASG as ops to alert. If value won\\'t change cloudCustodian will send an alert with ASGs. - name : asg-mark-as-unused resource : asg comments : | Mark any unused ASG checking it every day. filters : - type : value key : MinSize value : 0 op : eq - type : value key : DesiredCapacity value : 0 op : eq actions : - type : mark-for-op op : notify days : 30 - name : asg-unmark-as-unused resource : asg comments : | Unmark any ASG that has a value greater than 0. filters : - type : value key : DesiredCapacity op : greater-than value : 0 - \"tag:maid_status\" : not-null actions : - unmark - name : asg-slack-alert resource : asg comments : | Alert for ASG which have MinSize < 0 and DesiredCapacity < 0 filters : - \"tag:maid_status\" : not-null - type : marked-for-op op : notify actions : - type : notify slack_template : slack violation_desc : Having ASG with both (DesiredCapacity and MinSize) = 0. action_desc : Please investigate if you can delete this ASG. to : - https://hooks.slack.com/services/TXXXXX/XXXXXX/XXXxxXXX transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1","title":"AMI - ASG Garbage Collector"},{"location":"aws/examples/asgoffhours/","text":"ASG - Offhours Support \u00b6 The following example policy will stop all ASGs with the custodian_downtime tag at 10pm daily and start them back up at 10am daily, leaving them off during weekends. policies : - name : offhour-stop-22 resource : asg comments : | Daily stoppage at 10pm filters : - type : offhour tag : custodian_downtime offhour : 22 actions : - suspend - name : onhour-start-10 resource : asg comments : | Daily start at 10am filters : - type : onhour tag : custodian_downtime onhour : 10 actions : - resume For detailed information on offhours/onhours support and configuration, see offhours .","title":"ASG - Offhours Support"},{"location":"aws/examples/asgoffhours/#asg-offhours-support","text":"The following example policy will stop all ASGs with the custodian_downtime tag at 10pm daily and start them back up at 10am daily, leaving them off during weekends. policies : - name : offhour-stop-22 resource : asg comments : | Daily stoppage at 10pm filters : - type : offhour tag : custodian_downtime offhour : 22 actions : - suspend - name : onhour-start-10 resource : asg comments : | Daily start at 10am filters : - type : onhour tag : custodian_downtime onhour : 10 actions : - resume For detailed information on offhours/onhours support and configuration, see offhours .","title":"ASG - Offhours Support"},{"location":"aws/examples/blocknonstandardregionresources/","text":"Block New Resources In Non-Standard Regions \u00b6 The following are examples of Cloud Custodian policies which detect the region a resource is being launched in and deletes the resource if it\\'s outside your standard approved regions. These examples block the full creation of the resources launched outside of the us-east-1 and eu-west-1 regions and then emails the event-owner (the person launching the resource) and the Cloud Team. This set of policies covers several of the common AWS services but you may add your desired services if supported by Cloud Custodian. While a proactive approach through IAM or AWS Organizations policies is the ideal way to go, that isn\\'t always possible or manageable for all users. These policies take a reactive approach and may be a fitting use case for some users. For the notify action to work you will need to have installed and configured the Cloud Custodian c7n-mailer tool. policies : - name : ec2-terminate-non-standard-region resource : ec2 description : | Any EC2 instance launched in a non standard region outside of us-east-1 and eu-west-1 will be terminated mode : type : cloudtrail events : - RunInstances filters : - type : event key : \"detail.awsRegion\" op : not-in value : - us-east-1 - eu-west-1 actions : - type : terminate force : true - type : notify template : default.html priority_header : 1 subject : \"EC2 SERVER TERMINATED - Non-Standard Region [custodian {{ account }} - {{ region }}]\" violation_desc : \"Launching resources outside of the standard regions is prohibited\" action_desc : \"Actions Taken: Your new EC2 server has been terminated. Please relaunch the server in your accounts standard region which is either eu-west-1 or us-east-1.\" to : - CloudTeam@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 - name : asg-terminate-non-standard-region resource : asg mode : type : cloudtrail events : - source : autoscaling.amazonaws.com event : CreateAutoScalingGroup ids : requestParameters.autoScalingGroupName description : | Detect when a new AutoScaling Group is created in a non-standard region and delete it and notify the customer filters : - type : event key : \"detail.awsRegion\" op : not-in value : - us-east-1 - eu-west-1 actions : - type : delete force : true - type : notify template : default.html priority_header : 1 subject : \"ASG TERMINATED - Non-Standard Region [custodian {{ account }} - {{ region }}]\" violation_desc : \"Launching resources outside of the standard regions is prohibited\" action_desc : \"Actions Taken: Your new ASG has been terminated. Please relaunch the ASG in your accounts standard region which is either eu-west-1 or us-east-1.\" to : - CloudTeam@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 - name : app-elb-terminate-non-standard-region resource : app-elb mode : type : cloudtrail events : - source : \"elasticloadbalancing.amazonaws.com\" event : CreateLoadBalancer ids : \"requestParameters.name\" description : | Detect when a new Application Load Balancer Group is created in a non-standard region and delete it and notify the customer filters : - type : event key : \"detail.awsRegion\" op : not-in value : - us-east-1 - eu-west-1 actions : - type : delete - type : notify template : default.html priority_header : 1 subject : \"App ELB TERMINATED - Non-Standard Region [custodian {{ account }} - {{ region }}]\" violation_desc : \"Launching resources outside of the standard regions is prohibited\" action_desc : \"Actions Taken: Your new App ELB has been deleted. Please relaunch the App ELB in your accounts standard region which is either eu-west-1 or us-east-1.\" to : - CloudTeam@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 - name : elb-terminate-non-standard-region resource : elb mode : type : cloudtrail events : - CreateLoadBalancer description : | Detect when a new Load Balancer is created in a non-standard region and delete it and notify the customer filters : - type : event key : \"detail.awsRegion\" op : not-in value : - us-east-1 - eu-west-1 actions : - type : delete - type : notify template : default.html priority_header : 1 subject : \"ELB TERMINATED - Non-Standard Region [custodian {{ account }} - {{ region }}]\" violation_desc : \"Launching resources outside of the standard regions is prohibited\" action_desc : \"Actions Taken: Your new ELB has been deleted. Please relaunch the ELB in your accounts standard region which is either eu-west-1 or us-east-1.\" to : - CloudTeam@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 - name : es-terminate-non-standard-region resource : elasticsearch mode : type : cloudtrail events : - CreateElasticsearchDomain description : | Detect when a new Elasticsearch Domain is created in a non-standard region and delete it and notify the customer filters : - type : event key : \"detail.awsRegion\" op : not-in value : - us-east-1 - eu-west-1 actions : - delete - type : notify template : default.html priority_header : 1 subject : \"ES DOMAIN TERMINATED - Non-Standard Region [custodian {{ account }} - {{ region }}]\" violation_desc : \"Launching resources outside of the standard regions is prohibited\" action_desc : \"Actions Taken: Your new Elasticsearch Domain has been deleted. Please relaunch the Domain in your accounts standard region which is either eu-west-1 or us-east-1.\" to : - CloudTeam@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 - name : lambda-terminate-non-standard-region resource : lambda mode : type : cloudtrail events : - source : lambda.amazonaws.com event : CreateFunction20150331 ids : \"requestParameters.functionName\" description : | Detect when a new Lambda Function is created in a non-standard region and delete it and notify the customer filters : - type : event key : \"detail.awsRegion\" op : not-in value : - us-east-1 - eu-west-1 - not : - or : - type : value key : FunctionName op : regex value : ^(custodian?)\\w+ actions : - delete - type : notify template : default.html priority_header : 1 subject : \"LAMBDA DELETED - Non-Standard Region [custodian {{ account }} - {{ region }}]\" violation_desc : \"Launching resources outside of the standard regions is prohibited\" action_desc : \"Actions Taken: Your new Lambda Function has been deleted. Please relaunch in your accounts standard region which is either eu-west-1 or us-east-1.\" to : - CloudTeam@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 - name : rds-terminate-non-standard-region resource : rds mode : type : cloudtrail events : - source : rds.amazonaws.com event : CreateDBInstance ids : \"requestParameters.dBInstanceIdentifier\" description : | Detect when a new RDS is created in a non-standard region and delete it and notify the customer filters : - type : event key : \"detail.awsRegion\" op : not-in value : - us-east-1 - eu-west-1 actions : - type : delete skip-snapshot : true - type : notify template : default.html priority_header : 1 subject : \"RDS DELETED - Non-Standard Region [custodian {{ account }} - {{ region }}]\" violation_desc : \"Launching resources outside of the standard regions is prohibited\" action_desc : \"Actions Taken: Your new RDS Database has been deleted. Please relaunch in your accounts standard region which is either eu-west-1 or us-east-1.\" to : - CloudTeam@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 - name : rdscluster-terminate-non-standard-region resource : rds-cluster mode : type : cloudtrail events : - CreateCluster description : | Detect when a new RDS Cluster is created in a non-standard region and delete it and notify the customer filters : - type : event key : \"detail.awsRegion\" op : not-in value : - us-east-1 - eu-west-1 actions : - type : delete skip-snapshot : true delete-instances : true - type : notify template : default.html priority_header : 1 subject : \"RDS CLUSTER DELETED - Non-Standard Region [custodian {{ account }} - {{ region }}]\" violation_desc : \"Launching resources outside of the standard regions is prohibited\" action_desc : \"Actions Taken: Your new RDS Database Cluster has been deleted. Please relaunch in your accounts standard region which is either eu-west-1 or us-east-1.\" to : - CloudTeam@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 - name : sg-terminate-non-standard-region resource : security-group mode : type : cloudtrail events : - source : ec2.amazonaws.com event : CreateSecurityGroup ids : \"responseElements.groupId\" description : | Detect when a new Security Group is created in a non-standard region and delete it and notify the customer filters : - type : event key : \"detail.awsRegion\" op : not-in value : - us-east-1 - eu-west-1 actions : - delete - type : notify template : default.html priority_header : 1 subject : \"SG DELETED - Non-Standard Region [custodian {{ account }} - {{ region }}]\" violation_desc : \"Launching resources outside of the standard regions is prohibited\" action_desc : \"Actions Taken: Your new Security Group has been deleted. Please recreate in your accounts standard region which is either eu-west-1 or us-east-1.\" to : - CloudTeam@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 - name : ami-terminate-non-standard-region resource : ami mode : type : cloudtrail events : - source : \"ec2.amazonaws.com\" event : \"CreateImage\" ids : \"responseElements.imageId\" description : | Detect when a new Amazon Machine Image is created in a non-standard region and delete it and notify the customer filters : - type : event key : \"detail.awsRegion\" op : not-in value : - us-east-1 - eu-west-1 actions : - deregister - remove-launch-permissions - type : notify template : default.html priority_header : 1 subject : \"AMI DELETED - Non-Standard Region [custodian {{ account }} - {{ region }}]\" violation_desc : \"Launching resources outside of the standard regions is prohibited\" action_desc : \"Actions Taken: Your new Amazon Machine Image has been deleted. Please recreate in your accounts standard region which is either eu-west-1 or us-east-1.\" to : - CloudTeam@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 - name : s3-terminate-non-standard-region resource : s3 mode : type : cloudtrail events : - CreateBucket role : arn:aws:iam::{account_id}:role/Cloud_Custodian_Role timeout : 200 description : | Detect when a new S3 Bucket is created in a non-standard region and delete it and notify the customer filters : - type : event key : \"detail.awsRegion\" op : not-in value : - us-east-1 - eu-west-1 actions : - type : delete remove-contents : true - type : notify template : default.html priority_header : 1 subject : \"S3 DELETED - Non-Standard Region [custodian {{ account }} - {{ region }}]\" violation_desc : \"Launching resources outside of the standard regions is prohibited\" action_desc : \"Actions Taken: Your new S3 Bucket has been deleted. Please recreate in your accounts standard region which is either eu-west-1 or us-east-1.\" to : - CloudTeam@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 - name : dynamo-terminate-non-standard-region resource : dynamodb-table mode : type : cloudtrail events : - CreateTable description : | Detect when a new DynamoDB Table is created in a non-standard region and delete it and notify the customer filters : - type : event key : \"detail.awsRegion\" op : not-in value : - us-east-1 - eu-west-1 actions : - delete - type : notify template : default.html priority_header : 1 subject : \"DYNAMODB DELETED - Non-Standard Region [custodian {{ account }} - {{ region }}]\" violation_desc : \"Launching resources outside of the standard regions is prohibited\" action_desc : \"Actions Taken: Your new DynamoDB Table has been deleted. Please recreate in your accounts standard region which is either eu-west-1 or us-east-1.\" to : - CloudTeam@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 - name : kinesis-terminate-non-standard-region resource : kinesis mode : type : cloudtrail events : - source : \"kinesis.amazonaws.com\" event : \"CreateStream\" ids : \"requestParameters.streamName\" description : | Detect when a new Kinesis Stream is created in a non-standard region and delete it and notify the customer filters : - type : event key : \"detail.awsRegion\" op : not-in value : - us-east-1 - eu-west-1 actions : - type : delete - type : notify template : default.html priority_header : 1 subject : \"KINESIS DELETED - Non-Standard Region [custodian {{ account }} - {{ region }}]\" violation_desc : \"Launching resources outside of the standard regions is prohibited\" action_desc : \"Actions Taken: Your new Kinesis Stream has been deleted. Please recreate in your accounts standard region which is either eu-west-1 or us-east-1.\" to : - CloudTeam@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 - name : firehose-terminate-non-standard-region resource : firehose mode : type : cloudtrail events : - source : \"firehose.amazonaws.com\" event : \"CreateDeliveryStream\" ids : \"requestParameters.deliveryStreamName\" description : | Detect when a new Firehose is created in a non-standard region and delete it and notify the customer filters : - type : event key : \"detail.awsRegion\" op : not-in value : - us-east-1 - eu-west-1 actions : - type : delete - type : notify template : default.html priority_header : 1 subject : \"FIREHOSE DELETED - Non-Standard Region [custodian {{ account }} - {{ region }}]\" violation_desc : \"Launching resources outside of the standard regions is prohibited\" action_desc : \"Actions Taken: Your new Firehose has been deleted. Please recreate in your accounts standard region which is either eu-west-1 or us-east-1.\" to : - CloudTeam@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXX/cloud-custodian-mailer region : us-east-1","title":"Block New Resources In Non-Standard Regions"},{"location":"aws/examples/blocknonstandardregionresources/#block-new-resources-in-non-standard-regions","text":"The following are examples of Cloud Custodian policies which detect the region a resource is being launched in and deletes the resource if it\\'s outside your standard approved regions. These examples block the full creation of the resources launched outside of the us-east-1 and eu-west-1 regions and then emails the event-owner (the person launching the resource) and the Cloud Team. This set of policies covers several of the common AWS services but you may add your desired services if supported by Cloud Custodian. While a proactive approach through IAM or AWS Organizations policies is the ideal way to go, that isn\\'t always possible or manageable for all users. These policies take a reactive approach and may be a fitting use case for some users. For the notify action to work you will need to have installed and configured the Cloud Custodian c7n-mailer tool. policies : - name : ec2-terminate-non-standard-region resource : ec2 description : | Any EC2 instance launched in a non standard region outside of us-east-1 and eu-west-1 will be terminated mode : type : cloudtrail events : - RunInstances filters : - type : event key : \"detail.awsRegion\" op : not-in value : - us-east-1 - eu-west-1 actions : - type : terminate force : true - type : notify template : default.html priority_header : 1 subject : \"EC2 SERVER TERMINATED - Non-Standard Region [custodian {{ account }} - {{ region }}]\" violation_desc : \"Launching resources outside of the standard regions is prohibited\" action_desc : \"Actions Taken: Your new EC2 server has been terminated. Please relaunch the server in your accounts standard region which is either eu-west-1 or us-east-1.\" to : - CloudTeam@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 - name : asg-terminate-non-standard-region resource : asg mode : type : cloudtrail events : - source : autoscaling.amazonaws.com event : CreateAutoScalingGroup ids : requestParameters.autoScalingGroupName description : | Detect when a new AutoScaling Group is created in a non-standard region and delete it and notify the customer filters : - type : event key : \"detail.awsRegion\" op : not-in value : - us-east-1 - eu-west-1 actions : - type : delete force : true - type : notify template : default.html priority_header : 1 subject : \"ASG TERMINATED - Non-Standard Region [custodian {{ account }} - {{ region }}]\" violation_desc : \"Launching resources outside of the standard regions is prohibited\" action_desc : \"Actions Taken: Your new ASG has been terminated. Please relaunch the ASG in your accounts standard region which is either eu-west-1 or us-east-1.\" to : - CloudTeam@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 - name : app-elb-terminate-non-standard-region resource : app-elb mode : type : cloudtrail events : - source : \"elasticloadbalancing.amazonaws.com\" event : CreateLoadBalancer ids : \"requestParameters.name\" description : | Detect when a new Application Load Balancer Group is created in a non-standard region and delete it and notify the customer filters : - type : event key : \"detail.awsRegion\" op : not-in value : - us-east-1 - eu-west-1 actions : - type : delete - type : notify template : default.html priority_header : 1 subject : \"App ELB TERMINATED - Non-Standard Region [custodian {{ account }} - {{ region }}]\" violation_desc : \"Launching resources outside of the standard regions is prohibited\" action_desc : \"Actions Taken: Your new App ELB has been deleted. Please relaunch the App ELB in your accounts standard region which is either eu-west-1 or us-east-1.\" to : - CloudTeam@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 - name : elb-terminate-non-standard-region resource : elb mode : type : cloudtrail events : - CreateLoadBalancer description : | Detect when a new Load Balancer is created in a non-standard region and delete it and notify the customer filters : - type : event key : \"detail.awsRegion\" op : not-in value : - us-east-1 - eu-west-1 actions : - type : delete - type : notify template : default.html priority_header : 1 subject : \"ELB TERMINATED - Non-Standard Region [custodian {{ account }} - {{ region }}]\" violation_desc : \"Launching resources outside of the standard regions is prohibited\" action_desc : \"Actions Taken: Your new ELB has been deleted. Please relaunch the ELB in your accounts standard region which is either eu-west-1 or us-east-1.\" to : - CloudTeam@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 - name : es-terminate-non-standard-region resource : elasticsearch mode : type : cloudtrail events : - CreateElasticsearchDomain description : | Detect when a new Elasticsearch Domain is created in a non-standard region and delete it and notify the customer filters : - type : event key : \"detail.awsRegion\" op : not-in value : - us-east-1 - eu-west-1 actions : - delete - type : notify template : default.html priority_header : 1 subject : \"ES DOMAIN TERMINATED - Non-Standard Region [custodian {{ account }} - {{ region }}]\" violation_desc : \"Launching resources outside of the standard regions is prohibited\" action_desc : \"Actions Taken: Your new Elasticsearch Domain has been deleted. Please relaunch the Domain in your accounts standard region which is either eu-west-1 or us-east-1.\" to : - CloudTeam@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 - name : lambda-terminate-non-standard-region resource : lambda mode : type : cloudtrail events : - source : lambda.amazonaws.com event : CreateFunction20150331 ids : \"requestParameters.functionName\" description : | Detect when a new Lambda Function is created in a non-standard region and delete it and notify the customer filters : - type : event key : \"detail.awsRegion\" op : not-in value : - us-east-1 - eu-west-1 - not : - or : - type : value key : FunctionName op : regex value : ^(custodian?)\\w+ actions : - delete - type : notify template : default.html priority_header : 1 subject : \"LAMBDA DELETED - Non-Standard Region [custodian {{ account }} - {{ region }}]\" violation_desc : \"Launching resources outside of the standard regions is prohibited\" action_desc : \"Actions Taken: Your new Lambda Function has been deleted. Please relaunch in your accounts standard region which is either eu-west-1 or us-east-1.\" to : - CloudTeam@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 - name : rds-terminate-non-standard-region resource : rds mode : type : cloudtrail events : - source : rds.amazonaws.com event : CreateDBInstance ids : \"requestParameters.dBInstanceIdentifier\" description : | Detect when a new RDS is created in a non-standard region and delete it and notify the customer filters : - type : event key : \"detail.awsRegion\" op : not-in value : - us-east-1 - eu-west-1 actions : - type : delete skip-snapshot : true - type : notify template : default.html priority_header : 1 subject : \"RDS DELETED - Non-Standard Region [custodian {{ account }} - {{ region }}]\" violation_desc : \"Launching resources outside of the standard regions is prohibited\" action_desc : \"Actions Taken: Your new RDS Database has been deleted. Please relaunch in your accounts standard region which is either eu-west-1 or us-east-1.\" to : - CloudTeam@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 - name : rdscluster-terminate-non-standard-region resource : rds-cluster mode : type : cloudtrail events : - CreateCluster description : | Detect when a new RDS Cluster is created in a non-standard region and delete it and notify the customer filters : - type : event key : \"detail.awsRegion\" op : not-in value : - us-east-1 - eu-west-1 actions : - type : delete skip-snapshot : true delete-instances : true - type : notify template : default.html priority_header : 1 subject : \"RDS CLUSTER DELETED - Non-Standard Region [custodian {{ account }} - {{ region }}]\" violation_desc : \"Launching resources outside of the standard regions is prohibited\" action_desc : \"Actions Taken: Your new RDS Database Cluster has been deleted. Please relaunch in your accounts standard region which is either eu-west-1 or us-east-1.\" to : - CloudTeam@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 - name : sg-terminate-non-standard-region resource : security-group mode : type : cloudtrail events : - source : ec2.amazonaws.com event : CreateSecurityGroup ids : \"responseElements.groupId\" description : | Detect when a new Security Group is created in a non-standard region and delete it and notify the customer filters : - type : event key : \"detail.awsRegion\" op : not-in value : - us-east-1 - eu-west-1 actions : - delete - type : notify template : default.html priority_header : 1 subject : \"SG DELETED - Non-Standard Region [custodian {{ account }} - {{ region }}]\" violation_desc : \"Launching resources outside of the standard regions is prohibited\" action_desc : \"Actions Taken: Your new Security Group has been deleted. Please recreate in your accounts standard region which is either eu-west-1 or us-east-1.\" to : - CloudTeam@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 - name : ami-terminate-non-standard-region resource : ami mode : type : cloudtrail events : - source : \"ec2.amazonaws.com\" event : \"CreateImage\" ids : \"responseElements.imageId\" description : | Detect when a new Amazon Machine Image is created in a non-standard region and delete it and notify the customer filters : - type : event key : \"detail.awsRegion\" op : not-in value : - us-east-1 - eu-west-1 actions : - deregister - remove-launch-permissions - type : notify template : default.html priority_header : 1 subject : \"AMI DELETED - Non-Standard Region [custodian {{ account }} - {{ region }}]\" violation_desc : \"Launching resources outside of the standard regions is prohibited\" action_desc : \"Actions Taken: Your new Amazon Machine Image has been deleted. Please recreate in your accounts standard region which is either eu-west-1 or us-east-1.\" to : - CloudTeam@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 - name : s3-terminate-non-standard-region resource : s3 mode : type : cloudtrail events : - CreateBucket role : arn:aws:iam::{account_id}:role/Cloud_Custodian_Role timeout : 200 description : | Detect when a new S3 Bucket is created in a non-standard region and delete it and notify the customer filters : - type : event key : \"detail.awsRegion\" op : not-in value : - us-east-1 - eu-west-1 actions : - type : delete remove-contents : true - type : notify template : default.html priority_header : 1 subject : \"S3 DELETED - Non-Standard Region [custodian {{ account }} - {{ region }}]\" violation_desc : \"Launching resources outside of the standard regions is prohibited\" action_desc : \"Actions Taken: Your new S3 Bucket has been deleted. Please recreate in your accounts standard region which is either eu-west-1 or us-east-1.\" to : - CloudTeam@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 - name : dynamo-terminate-non-standard-region resource : dynamodb-table mode : type : cloudtrail events : - CreateTable description : | Detect when a new DynamoDB Table is created in a non-standard region and delete it and notify the customer filters : - type : event key : \"detail.awsRegion\" op : not-in value : - us-east-1 - eu-west-1 actions : - delete - type : notify template : default.html priority_header : 1 subject : \"DYNAMODB DELETED - Non-Standard Region [custodian {{ account }} - {{ region }}]\" violation_desc : \"Launching resources outside of the standard regions is prohibited\" action_desc : \"Actions Taken: Your new DynamoDB Table has been deleted. Please recreate in your accounts standard region which is either eu-west-1 or us-east-1.\" to : - CloudTeam@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 - name : kinesis-terminate-non-standard-region resource : kinesis mode : type : cloudtrail events : - source : \"kinesis.amazonaws.com\" event : \"CreateStream\" ids : \"requestParameters.streamName\" description : | Detect when a new Kinesis Stream is created in a non-standard region and delete it and notify the customer filters : - type : event key : \"detail.awsRegion\" op : not-in value : - us-east-1 - eu-west-1 actions : - type : delete - type : notify template : default.html priority_header : 1 subject : \"KINESIS DELETED - Non-Standard Region [custodian {{ account }} - {{ region }}]\" violation_desc : \"Launching resources outside of the standard regions is prohibited\" action_desc : \"Actions Taken: Your new Kinesis Stream has been deleted. Please recreate in your accounts standard region which is either eu-west-1 or us-east-1.\" to : - CloudTeam@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 - name : firehose-terminate-non-standard-region resource : firehose mode : type : cloudtrail events : - source : \"firehose.amazonaws.com\" event : \"CreateDeliveryStream\" ids : \"requestParameters.deliveryStreamName\" description : | Detect when a new Firehose is created in a non-standard region and delete it and notify the customer filters : - type : event key : \"detail.awsRegion\" op : not-in value : - us-east-1 - eu-west-1 actions : - type : delete - type : notify template : default.html priority_header : 1 subject : \"FIREHOSE DELETED - Non-Standard Region [custodian {{ account }} - {{ region }}]\" violation_desc : \"Launching resources outside of the standard regions is prohibited\" action_desc : \"Actions Taken: Your new Firehose has been deleted. Please recreate in your accounts standard region which is either eu-west-1 or us-east-1.\" to : - CloudTeam@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXX/cloud-custodian-mailer region : us-east-1","title":"Block New Resources In Non-Standard Regions"},{"location":"aws/examples/dmsenforcessl/","text":"DMS - DB Migration Service Endpoint - Enforce SSL \u00b6 The following example policies will allow you to enforce SSL connectivity on any new or modified DMS Endpoints. The supported SSL methods vary based on the database engine. See https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.SSL.html for more info. There are 2 policies to handle the different types of SSL. With sqlserver, mongodb, and postgres you can turn on the SSL mode to require without having to pass in a certificate. Most other database engines would require you to pass in the ARN of the CA certificate to use which is why automating those in a c7n policy is difficult and this example policy will just delete them instead. DMS certificate ARNS are unique per account and region which is why multi-account policy runs wouldn\\'t work. Both policies trigger off the creation or modification of any DMS endpoints so if a user tries to disable the SSL it would re-enable the SSL or delete the users endpoint and then email them depending on SSL modes supported. For the notify action in the second policy to work you must have setup the c7n_mailer tool: https://github.com/cloud-custodian/cloud-custodian/tree/master/tools/c7n_mailer policies : - name : dms-endpoint-enable-ssl-require-realtime resource : dms-endpoint description : | If the SSL Mode is none for a DMS Endpoint with engine of sql, mongo, or postgres it gets turned on to Require SSL setting mode : type : cloudtrail events : - source : dms.amazonaws.com event : CreateEndpoint ids : \"responseElements.endpoint.endpointArn\" - source : dms.amazonaws.com event : ModifyEndpoint ids : \"responseElements.endpoint.endpointArn\" filters : - or : - SslMode : none - type : event key : \"detail.requestParameters.sslMode\" op : eq value : \"none\" - or : - EngineName : sqlserver - EngineName : mongodb - EngineName : postgres actions : - type : modify-endpoint SslMode : require - name : dms-delete-endpoint-missing-ssl-ca-cert-realtime resource : dms-endpoint description : | If the SSL Mode is none for a DMS Endpoint with engine that is not one of sql, mongo, or postgres the endpoint is deleted and an email is sent stating that CA Certificates need to be used as a requirement mode : type : cloudtrail events : - source : dms.amazonaws.com event : CreateEndpoint ids : \"responseElements.endpoint.endpointArn\" - source : dms.amazonaws.com event : ModifyEndpoint ids : \"responseElements.endpoint.endpointArn\" filters : - or : - SslMode : none - type : event key : \"detail.requestParameters.sslMode\" op : eq value : \"none\" - or : - EngineName : aurora - EngineName : mariadb - EngineName : mysql - EngineName : sybase - EngineName : oracle actions : - delete - type : notify template : default.html priority_header : 1 subject : DMS Endpoint Deleted As It's Non-Compliant! - [custodian {{ account }} - {{ region }}] violation_desc : | Per regulations all DMS Endpoints have to use SSL connections and your endpoint was setup as 'none' for SSL mode! action_desc : | Actions Taken: You are required to enable SSL on your endpoint for a secure transmission of data. This incident has been reported and the invalid endpoint has been deleted. Please launch a new endpoint using SSL to : - CloudCustodian@Company.com - resource-owner - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/123456789012/cloud-custodian-mailer region : us-east-1","title":"DMS - DB Migration Service Endpoint - Enforce SSL"},{"location":"aws/examples/dmsenforcessl/#dms-db-migration-service-endpoint-enforce-ssl","text":"The following example policies will allow you to enforce SSL connectivity on any new or modified DMS Endpoints. The supported SSL methods vary based on the database engine. See https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.SSL.html for more info. There are 2 policies to handle the different types of SSL. With sqlserver, mongodb, and postgres you can turn on the SSL mode to require without having to pass in a certificate. Most other database engines would require you to pass in the ARN of the CA certificate to use which is why automating those in a c7n policy is difficult and this example policy will just delete them instead. DMS certificate ARNS are unique per account and region which is why multi-account policy runs wouldn\\'t work. Both policies trigger off the creation or modification of any DMS endpoints so if a user tries to disable the SSL it would re-enable the SSL or delete the users endpoint and then email them depending on SSL modes supported. For the notify action in the second policy to work you must have setup the c7n_mailer tool: https://github.com/cloud-custodian/cloud-custodian/tree/master/tools/c7n_mailer policies : - name : dms-endpoint-enable-ssl-require-realtime resource : dms-endpoint description : | If the SSL Mode is none for a DMS Endpoint with engine of sql, mongo, or postgres it gets turned on to Require SSL setting mode : type : cloudtrail events : - source : dms.amazonaws.com event : CreateEndpoint ids : \"responseElements.endpoint.endpointArn\" - source : dms.amazonaws.com event : ModifyEndpoint ids : \"responseElements.endpoint.endpointArn\" filters : - or : - SslMode : none - type : event key : \"detail.requestParameters.sslMode\" op : eq value : \"none\" - or : - EngineName : sqlserver - EngineName : mongodb - EngineName : postgres actions : - type : modify-endpoint SslMode : require - name : dms-delete-endpoint-missing-ssl-ca-cert-realtime resource : dms-endpoint description : | If the SSL Mode is none for a DMS Endpoint with engine that is not one of sql, mongo, or postgres the endpoint is deleted and an email is sent stating that CA Certificates need to be used as a requirement mode : type : cloudtrail events : - source : dms.amazonaws.com event : CreateEndpoint ids : \"responseElements.endpoint.endpointArn\" - source : dms.amazonaws.com event : ModifyEndpoint ids : \"responseElements.endpoint.endpointArn\" filters : - or : - SslMode : none - type : event key : \"detail.requestParameters.sslMode\" op : eq value : \"none\" - or : - EngineName : aurora - EngineName : mariadb - EngineName : mysql - EngineName : sybase - EngineName : oracle actions : - delete - type : notify template : default.html priority_header : 1 subject : DMS Endpoint Deleted As It's Non-Compliant! - [custodian {{ account }} - {{ region }}] violation_desc : | Per regulations all DMS Endpoints have to use SSL connections and your endpoint was setup as 'none' for SSL mode! action_desc : | Actions Taken: You are required to enable SSL on your endpoint for a secure transmission of data. This incident has been reported and the invalid endpoint has been deleted. Please launch a new endpoint using SSL to : - CloudCustodian@Company.com - resource-owner - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/123456789012/cloud-custodian-mailer region : us-east-1","title":"DMS - DB Migration Service Endpoint - Enforce SSL"},{"location":"aws/examples/ebsgarbagecollect/","text":"EBS - Garbage Collect Unattached Volumes \u00b6 Use the mark-for-op action to mark a resource for action later. One common pattern to follow is to mark a resource with an operation (example: delete) in n days. In the subsequent days leading up to the marked date, run a unmark or untag policy if the resource has become compliant in the mean time. You can use this principle to implement garbage collection on resources. In this example, Custodian will first mark all unattached EBS volumes for deletion. The next policy will then unmark any volume that has been attached and has the maid_status tag, indicating that it had been previously marked. Finally, the third policy will filter in any resources that have been marked and run the delete action. It is important to note that the delete policy will need to be run on the day that the resource is marked for, else the resource will still exist in the account. The mark operation only tags the resource with metadata about the upcoming operation. Operationally, the policy still must be executed on the day that is specified in the tag. Note: all resources that are marked-for-op up to and including the current date will be filtered in when utilizing the marked-for-op filter. - name : ebs-mark-unattached-deletion resource : ebs comments : | Mark any unattached EBS volumes for deletion in 30 days. Volumes set to not delete on instance termination do have valid use cases as data drives, but 99% of the time they appear to be just garbage creation. filters : - Attachments : [] - \"tag:maid_status\" : absent actions : - type : mark-for-op op : delete days : 30 - name : ebs-unmark-attached-deletion resource : ebs comments : | Unmark any attached EBS volumes that were scheduled for deletion if they are currently attached filters : - type : value key : \"Attachments[0].Device\" value : not-null - \"tag:maid_status\" : not-null actions : - unmark - name : ebs-delete-marked resource : ebs comments : | Delete any attached EBS volumes that were scheduled for deletion filters : - type : marked-for-op op : delete actions : - delete","title":"EBS - Garbage Collect Unattached Volumes"},{"location":"aws/examples/ebsgarbagecollect/#ebs-garbage-collect-unattached-volumes","text":"Use the mark-for-op action to mark a resource for action later. One common pattern to follow is to mark a resource with an operation (example: delete) in n days. In the subsequent days leading up to the marked date, run a unmark or untag policy if the resource has become compliant in the mean time. You can use this principle to implement garbage collection on resources. In this example, Custodian will first mark all unattached EBS volumes for deletion. The next policy will then unmark any volume that has been attached and has the maid_status tag, indicating that it had been previously marked. Finally, the third policy will filter in any resources that have been marked and run the delete action. It is important to note that the delete policy will need to be run on the day that the resource is marked for, else the resource will still exist in the account. The mark operation only tags the resource with metadata about the upcoming operation. Operationally, the policy still must be executed on the day that is specified in the tag. Note: all resources that are marked-for-op up to and including the current date will be filtered in when utilizing the marked-for-op filter. - name : ebs-mark-unattached-deletion resource : ebs comments : | Mark any unattached EBS volumes for deletion in 30 days. Volumes set to not delete on instance termination do have valid use cases as data drives, but 99% of the time they appear to be just garbage creation. filters : - Attachments : [] - \"tag:maid_status\" : absent actions : - type : mark-for-op op : delete days : 30 - name : ebs-unmark-attached-deletion resource : ebs comments : | Unmark any attached EBS volumes that were scheduled for deletion if they are currently attached filters : - type : value key : \"Attachments[0].Device\" value : not-null - \"tag:maid_status\" : not-null actions : - unmark - name : ebs-delete-marked resource : ebs comments : | Delete any attached EBS volumes that were scheduled for deletion filters : - type : marked-for-op op : delete actions : - delete","title":"EBS - Garbage Collect Unattached Volumes"},{"location":"aws/examples/ebssnapshots/","text":"EBS - Create and Manage Snapshots \u00b6 The following example policy will snapshot all EBS volumes attached to EC2 instances and copy the instances tags to the snapshot. Then when the snapshots are 7 days old they will get deleted so you always have a rolling 7 days worth of snapshots. policies : - name : ec2-create-ebs-snapshots resource : ec2 actions : - type : snapshot copy-tags : - CreatorName - \"Resource Contact\" - \"Resource Purpose\" - Environment - \"Billing Cost Center\" - Name tags : CloudCustodian : true - name : ebs-delete-old-ebs-snapshots resource : ebs-snapshot filters : - type : age days : 7 op : ge - \"tag:custodian_snapshot\" : present actions : - delete","title":"EBS - Create and Manage Snapshots"},{"location":"aws/examples/ebssnapshots/#ebs-create-and-manage-snapshots","text":"The following example policy will snapshot all EBS volumes attached to EC2 instances and copy the instances tags to the snapshot. Then when the snapshots are 7 days old they will get deleted so you always have a rolling 7 days worth of snapshots. policies : - name : ec2-create-ebs-snapshots resource : ec2 actions : - type : snapshot copy-tags : - CreatorName - \"Resource Contact\" - \"Resource Purpose\" - Environment - \"Billing Cost Center\" - Name tags : CloudCustodian : true - name : ebs-delete-old-ebs-snapshots resource : ebs-snapshot filters : - type : age days : 7 op : ge - \"tag:custodian_snapshot\" : present actions : - delete","title":"EBS - Create and Manage Snapshots"},{"location":"aws/examples/ebsunencrypted/","text":"EBS - Delete Unencrypted \u00b6 policies : - name : terminate-unencrypted-ebs description : | Terminate all unencrypted EBS volumes upon creation resource : ebs mode : type : cloudtrail events : - CreateVolume filters : - Encrypted : false actions : - delete","title":"EBS - Delete Unencrypted"},{"location":"aws/examples/ebsunencrypted/#ebs-delete-unencrypted","text":"policies : - name : terminate-unencrypted-ebs description : | Terminate all unencrypted EBS volumes upon creation resource : ebs mode : type : cloudtrail events : - CreateVolume filters : - Encrypted : false actions : - delete","title":"EBS - Delete Unencrypted"},{"location":"aws/examples/ec2-auto-tag-user/","text":"EC2 - auto-tag aws userName on resources \u00b6 Note that this can work for other resources besides EC2, and the principalId is optional. principalId tag is useful if you want to enforce users not being able to shut down each others VMs unless their principalId matches (meaning they originally spun up the resource). Documentation about principalId here: https://aws.amazon.com/blogs/security/how-to-automatically-tag-amazon-ec2-resources-in-response-to-api-events/ policies : - name : ec2-auto-tag-user resource : ec2 mode : type : cloudtrail role : arn:aws:iam::{account_id}:role/custodian-auto-tagger # note {account_id} is optional. If you put that there instead of # your actual account number, when the policy is provisioned it # will automatically inherit the account_id properly events : - RunInstances filters : - tag:CreatorName : absent actions : - type : auto-tag-user tag : CreatorName principal_id_tag : CreatorId","title":"EC2 - auto-tag aws userName on resources"},{"location":"aws/examples/ec2-auto-tag-user/#ec2-auto-tag-aws-username-on-resources","text":"Note that this can work for other resources besides EC2, and the principalId is optional. principalId tag is useful if you want to enforce users not being able to shut down each others VMs unless their principalId matches (meaning they originally spun up the resource). Documentation about principalId here: https://aws.amazon.com/blogs/security/how-to-automatically-tag-amazon-ec2-resources-in-response-to-api-events/ policies : - name : ec2-auto-tag-user resource : ec2 mode : type : cloudtrail role : arn:aws:iam::{account_id}:role/custodian-auto-tagger # note {account_id} is optional. If you put that there instead of # your actual account number, when the policy is provisioned it # will automatically inherit the account_id properly events : - RunInstances filters : - tag:CreatorName : absent actions : - type : auto-tag-user tag : CreatorName principal_id_tag : CreatorId","title":"EC2 - auto-tag aws userName on resources"},{"location":"aws/examples/ec2ModifyInstanceMetadataOptions/","text":"EC2 - Modify Instance Metadata Options \u00b6 The following examples allow you to enforce Instance metadata options over EC2 instances. to learn more about Instance Metadata option please visit: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html To filter the list of instances you can choose any combination of Ec2 mwtadate-instances elements. As of now below options are available: HttpEndpoint Valid Values: disabled | enabled Action value: HttpEndpoint HttpPutResponseHopLimit Possible values: Integers from 1 to 64 Action value: HttpPutResponseHopLimit HttpTokens Valid Values: optional | required Action value: tokens InstanceMetadataTags Valid Values: disabled | enabled Action value: metadata-tags Examples: \u00b6 policies : - name : ec2-require-imdsv2 resource : ec2 description : | Finds all instances with optional HttpTokens and change the policy to Requied. filters : - MetadataOptions.HttpTokens : optional actions : - type : set-metadata-access tokens : required policies : - name : ec2-disable-imds resource : ec2 description : | Finds all instacnes with Enabled httpsendpoint and change it to disabled. By default this option must be enabled therefore, please make sure before disabling this option. filters : - MetadataOptions.HttpEndpoint : enabled actions : - type : set-metadata-access endpoint : disabled policies : - name : ec2-disable-imds resource : ec2 description : | Finds all the instances with disables Instance Meta Data Tags and enable them. filters : - MetadataOptions.InstanceMetadataTags : disabled actions : - type : set-metadata-access metadata-tags : enabled Intance MetaDate Tags Reference: https://amzn.to/2XOuxpQ Custodian Filters reference: https://cloud-custodian.github.io/cloud-custodian/docs/filters.html","title":"EC2 - Modify Instance Metadata Options"},{"location":"aws/examples/ec2ModifyInstanceMetadataOptions/#ec2-modify-instance-metadata-options","text":"The following examples allow you to enforce Instance metadata options over EC2 instances. to learn more about Instance Metadata option please visit: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html To filter the list of instances you can choose any combination of Ec2 mwtadate-instances elements. As of now below options are available: HttpEndpoint Valid Values: disabled | enabled Action value: HttpEndpoint HttpPutResponseHopLimit Possible values: Integers from 1 to 64 Action value: HttpPutResponseHopLimit HttpTokens Valid Values: optional | required Action value: tokens InstanceMetadataTags Valid Values: disabled | enabled Action value: metadata-tags","title":"EC2 - Modify Instance Metadata Options"},{"location":"aws/examples/ec2ModifyInstanceMetadataOptions/#examples","text":"policies : - name : ec2-require-imdsv2 resource : ec2 description : | Finds all instances with optional HttpTokens and change the policy to Requied. filters : - MetadataOptions.HttpTokens : optional actions : - type : set-metadata-access tokens : required policies : - name : ec2-disable-imds resource : ec2 description : | Finds all instacnes with Enabled httpsendpoint and change it to disabled. By default this option must be enabled therefore, please make sure before disabling this option. filters : - MetadataOptions.HttpEndpoint : enabled actions : - type : set-metadata-access endpoint : disabled policies : - name : ec2-disable-imds resource : ec2 description : | Finds all the instances with disables Instance Meta Data Tags and enable them. filters : - MetadataOptions.InstanceMetadataTags : disabled actions : - type : set-metadata-access metadata-tags : enabled Intance MetaDate Tags Reference: https://amzn.to/2XOuxpQ Custodian Filters reference: https://cloud-custodian.github.io/cloud-custodian/docs/filters.html","title":"Examples:"},{"location":"aws/examples/ec2offhours/","text":"EC2 - Offhours Support \u00b6 Offhours are based on current time of the machine that is running custodian. Note, in this case you could tag an instance with the following two tags: StopAfterHours: off=(M-F,18);tz=est; and StartAfterHours: on=(M-F,8) . This would have the instance turn off every weekday at 6pm NY time, and turn on every day at 8am California time (since if no tz is set, it uses the default which is pt). Note when custodian runs, if it\\'s 6:00pm or 6:59 pm NY time, it will shut down the VM you tagged this way. The key is the hour integer on the NY clock matching 18. If custodian runs at 5:59pm or 7:00pm NY time, it won\\'t shut down the VM. Same idea for starting. The reason we filter for only seeing instances older than 1 hour, if a dev is on a VM that is shut down by the off hours schedule, and they turn it back on, if we run custodian again we don\\'t want to keep shutting down the VM on the dev repeatedly. policies : - name : stop-after-hours resource : ec2 filters : - type : offhour tag : CustodianOffHours default_tz : pt offhour : 19 - type : instance-age hours : 1 actions : - stop - name : start-after-hours resource : ec2 filters : - type : onhour tag : CustodianOffHours default_tz : pt onhour : 7 - type : value value : 1 key : LaunchTime op : less-than value_type : age actions : - start For detailed information on offhours/onhours support and configuration, see offhours .","title":"EC2 - Offhours Support"},{"location":"aws/examples/ec2offhours/#ec2-offhours-support","text":"Offhours are based on current time of the machine that is running custodian. Note, in this case you could tag an instance with the following two tags: StopAfterHours: off=(M-F,18);tz=est; and StartAfterHours: on=(M-F,8) . This would have the instance turn off every weekday at 6pm NY time, and turn on every day at 8am California time (since if no tz is set, it uses the default which is pt). Note when custodian runs, if it\\'s 6:00pm or 6:59 pm NY time, it will shut down the VM you tagged this way. The key is the hour integer on the NY clock matching 18. If custodian runs at 5:59pm or 7:00pm NY time, it won\\'t shut down the VM. Same idea for starting. The reason we filter for only seeing instances older than 1 hour, if a dev is on a VM that is shut down by the off hours schedule, and they turn it back on, if we run custodian again we don\\'t want to keep shutting down the VM on the dev repeatedly. policies : - name : stop-after-hours resource : ec2 filters : - type : offhour tag : CustodianOffHours default_tz : pt offhour : 19 - type : instance-age hours : 1 actions : - stop - name : start-after-hours resource : ec2 filters : - type : onhour tag : CustodianOffHours default_tz : pt onhour : 7 - type : value value : 1 key : LaunchTime op : less-than value_type : age actions : - start For detailed information on offhours/onhours support and configuration, see offhours .","title":"EC2 - Offhours Support"},{"location":"aws/examples/ec2oldinstances/","text":"EC2 - Old Instance Report \u00b6 - name : ec2-old-instances resource : ec2 comment : | Report running instances older than 60 days filters : - \"State.Name\" : running - type : instance-age days : 60 # Use Case: Report all AMIs that are 120+ days or older - name : ancient-images-report resource : ami comment : | Report on all images older than 90 days which should be de-registered. filters : - type : image-age days : 120 Instance Age Filter : The instance age filter allows for filtering the set of EC2 instances by their LaunchTime, i.e. all instances older than 60 or 90 days. The default date value is 60 days if otherwise unspecified. Configuring a specific value for instance-age to report all instances older than 90 days. ``` yaml policies: - name: old-instances resource: ec2 filters: - type: instance-age days: 90 ```","title":"EC2 - Old Instance Report"},{"location":"aws/examples/ec2oldinstances/#ec2-old-instance-report","text":"- name : ec2-old-instances resource : ec2 comment : | Report running instances older than 60 days filters : - \"State.Name\" : running - type : instance-age days : 60 # Use Case: Report all AMIs that are 120+ days or older - name : ancient-images-report resource : ami comment : | Report on all images older than 90 days which should be de-registered. filters : - type : image-age days : 120 Instance Age Filter : The instance age filter allows for filtering the set of EC2 instances by their LaunchTime, i.e. all instances older than 60 or 90 days. The default date value is 60 days if otherwise unspecified. Configuring a specific value for instance-age to report all instances older than 90 days. ``` yaml policies: - name: old-instances resource: ec2 filters: - type: instance-age days: 90 ```","title":"EC2 - Old Instance Report"},{"location":"aws/examples/ec2poweronstoppedforpatching/","text":"EC2 - Power On For Scheduled Patching \u00b6 The following example policies will automatically create CloudWatch cron rate triggered Lambda functions in your account and region. The Lambda functions will be triggered on the cron rate expression schedule you provide in the mode section of the policy. The following example policies find all EC2 instances that are both in a stopped state, and have a tag called Patch Group with a value of Linux Dev . Those instances are then started and tagged with an additional tag of PowerOffWhenDone and a value of True so that they can be stopped again after the patching window. Then all instances with the Linux Dev Patch Group get another tag called PatchingInProgress with a value of True . The PatchingInProgress tag can be used by other policies such as offhours policies where the presence of that tag would exclude it from being stopped by the offhours. When the patching window is done the last 2 policies in this example will remove the PatchingInProgress tag from all instances in that group and remove the PowerOffWhenDone tag and stop those instances that were previously stopped. The cron expressions for this example read as the following: cron(0 3 ? 1/1 SUN#1 *) means trigger on the 1st Sunday of every month at 3:00 UTC then cron(0 13 ? 1/1 SUN#1 *) is the same day at 13:00 UTC which allows for a 10 Hour patching window. Learn more on AWS cron rate expressions https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html policies : - name : power-on-patch-group-linux-dev resource : ec2 mode : type : periodic schedule : \"cron(0 3 ? 1/1 SUN#1 *)\" filters : - \"State.Name\" : stopped - type : value key : tag:Patch Group op : eq value : \"Linux Dev\" actions : - start - type : tag key : PowerOffWhenDone value : \"True\" - name : patching-exception-tag-linux-dev resource : ec2 mode : type : periodic schedule : \"cron(0 3 ? 1/1 SUN#1 *)\" filters : - type : value key : tag:Patch Group op : eq value : \"Linux Dev\" actions : - type : tag key : PatchingInProgress value : \"True\" - name : patching-exception-removal-linux-dev resource : ec2 mode : type : periodic schedule : \"cron(0 13 ? 1/1 SUN#1 *)\" filters : - type : value key : tag:Patch Group op : eq value : \"Linux Dev\" actions : - type : unmark tags : [ \"PatchingInProgress\" ] - name : power-down-patch-group-linux-dev resource : ec2 mode : type : periodic schedule : \"cron(0 13 ? 1/1 SUN#1 *)\" filters : - \"State.Name\" : running - \"tag:PowerOffWhenDone\" : present - type : value key : tag:Patch Group op : eq value : \"Linux Dev\" actions : - stop - type : unmark tags : [ \"PowerOffWhenDone\" ] Note that the notify action requires the cloud custodian mailer tool to be installed.","title":"EC2 - Power On For Scheduled Patching"},{"location":"aws/examples/ec2poweronstoppedforpatching/#ec2-power-on-for-scheduled-patching","text":"The following example policies will automatically create CloudWatch cron rate triggered Lambda functions in your account and region. The Lambda functions will be triggered on the cron rate expression schedule you provide in the mode section of the policy. The following example policies find all EC2 instances that are both in a stopped state, and have a tag called Patch Group with a value of Linux Dev . Those instances are then started and tagged with an additional tag of PowerOffWhenDone and a value of True so that they can be stopped again after the patching window. Then all instances with the Linux Dev Patch Group get another tag called PatchingInProgress with a value of True . The PatchingInProgress tag can be used by other policies such as offhours policies where the presence of that tag would exclude it from being stopped by the offhours. When the patching window is done the last 2 policies in this example will remove the PatchingInProgress tag from all instances in that group and remove the PowerOffWhenDone tag and stop those instances that were previously stopped. The cron expressions for this example read as the following: cron(0 3 ? 1/1 SUN#1 *) means trigger on the 1st Sunday of every month at 3:00 UTC then cron(0 13 ? 1/1 SUN#1 *) is the same day at 13:00 UTC which allows for a 10 Hour patching window. Learn more on AWS cron rate expressions https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html policies : - name : power-on-patch-group-linux-dev resource : ec2 mode : type : periodic schedule : \"cron(0 3 ? 1/1 SUN#1 *)\" filters : - \"State.Name\" : stopped - type : value key : tag:Patch Group op : eq value : \"Linux Dev\" actions : - start - type : tag key : PowerOffWhenDone value : \"True\" - name : patching-exception-tag-linux-dev resource : ec2 mode : type : periodic schedule : \"cron(0 3 ? 1/1 SUN#1 *)\" filters : - type : value key : tag:Patch Group op : eq value : \"Linux Dev\" actions : - type : tag key : PatchingInProgress value : \"True\" - name : patching-exception-removal-linux-dev resource : ec2 mode : type : periodic schedule : \"cron(0 13 ? 1/1 SUN#1 *)\" filters : - type : value key : tag:Patch Group op : eq value : \"Linux Dev\" actions : - type : unmark tags : [ \"PatchingInProgress\" ] - name : power-down-patch-group-linux-dev resource : ec2 mode : type : periodic schedule : \"cron(0 13 ? 1/1 SUN#1 *)\" filters : - \"State.Name\" : running - \"tag:PowerOffWhenDone\" : present - type : value key : tag:Patch Group op : eq value : \"Linux Dev\" actions : - stop - type : unmark tags : [ \"PowerOffWhenDone\" ] Note that the notify action requires the cloud custodian mailer tool to be installed.","title":"EC2 - Power On For Scheduled Patching"},{"location":"aws/examples/ec2unpatchedworkflow/","text":"EC2 - Terminate Unpatchable Instances \u00b6 The following example policy workflow uses the mark-for-op and marked-for-op filters and actions to chain together a set of policies to accomplish a task. In this example it will find and tag any instances that are in a stopped state. The example specifies a custom tag called c7n_stopped_instance and the value of the tag will be an op action of terminate for 60 days in the future. The reasoning behind terminating unpatchable instances is after 60 days the instance will be far enough behind on patching and virus defs(if used) that starting the instance after 60 days would present too large of a security risk. Note the use of the skew option with the marked-for-op filter in some of the policies to notify the resource owners X number of days ahead of the scheduled marked-for-op action date. policies : - name : ec2-mark-stopped-instance resource : ec2 description : | Mark any stopped ec2 instance for deletion in 60 days If an instance has not been started for 60 days or over then they will be deleted similar to internal policies as it wont be patched. filters : - \"tag:c7n_stopped_instance\" : absent - \"State.Name\" : stopped actions : - type : mark-for-op tag : c7n_stopped_instance op : terminate days : 60 - name : ec2-unmark-previously-stopped resource : ec2 description : | Unmark/untag any ec2 instance that was scheduled for deletion due to being stopped if they are currently running. filters : - \"State.Name\" : running - \"tag:c7n_stopped_instance\" : present actions : - type : unmark tags : [ \"c7n_stopped_instance\" ] - name : ec2-notify-before-delete-marked-14-days resource : ec2 description : | Notify on any ec2 instances that will be deleted in 14 days if not started comments : | Your EC2 server will be terminated in 14 days if not started and patched by then. Please start your stopped servers and leave them on for 24 hours minimum to allow for patching to occur. filters : - type : marked-for-op tag : c7n_stopped_instance op : terminate skew : 14 actions : - type : notify template : default.html priority_header : 2 subject : \"EC2 Stopped Instance Termination Scheduled! [custodian {{ account }} - {{ region }}]\" violation_desc : \"EC2(s) have been in a stopped state for 45 days and at 60 days will be termianted:\" action_desc : | Your EC2 server will be terminated in 14 days if not started and patched by then. Please start your stopped servers and leave them on for 24 hours minimum to allow for patching to occur. to : - CloudCustodian@Company.com - resource-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1 - name : ec2-notify-before-delete-marked-7-days resource : ec2 description : | Notify on any ec2 instances that will be deleted in 7 days if not started filters : - type : marked-for-op tag : c7n_stopped_instance op : terminate skew : 7 actions : - type : notify template : default.html priority_header : 1 subject : \"EC2 Stopped Instance Termination Scheduled! [custodian {{ account }} - {{ region }}]\" violation_desc : \"EC2(s) have been in a stopped state for 53 days and at 60 days will be termianted:\" action_desc : | Your EC2 server will be terminated in 7 days if not started and patched by then. Please start your stopped servers and leave them on for 24 hours minimum to allow for patching to occur. to : - CloudCustodian@Company.com - resource-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1 - name : ec2-delete-marked resource : ec2 description : | Terminate and notify on any ec2 instances that were scheduled for deletion if its been stopped for 60 days and no longer up-to-date on patching. filters : - type : marked-for-op tag : c7n_stopped_instance op : terminate actions : - type : terminate force : true - type : notify template : default.html priority_header : 1 subject : \"EC2 Stopped Instance Terminated [custodian {{ account }} - {{ region }}]\" violation_desc : \"EC2(s) had been stopped for 60 days and have now been terminated:\" action_desc : | Your EC2 server has been terminated as its patching is too far out-of-date and beyond the 60 day window. to : - CloudCustodian@Company.com - resource-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1","title":"EC2 - Terminate Unpatchable Instances"},{"location":"aws/examples/ec2unpatchedworkflow/#ec2-terminate-unpatchable-instances","text":"The following example policy workflow uses the mark-for-op and marked-for-op filters and actions to chain together a set of policies to accomplish a task. In this example it will find and tag any instances that are in a stopped state. The example specifies a custom tag called c7n_stopped_instance and the value of the tag will be an op action of terminate for 60 days in the future. The reasoning behind terminating unpatchable instances is after 60 days the instance will be far enough behind on patching and virus defs(if used) that starting the instance after 60 days would present too large of a security risk. Note the use of the skew option with the marked-for-op filter in some of the policies to notify the resource owners X number of days ahead of the scheduled marked-for-op action date. policies : - name : ec2-mark-stopped-instance resource : ec2 description : | Mark any stopped ec2 instance for deletion in 60 days If an instance has not been started for 60 days or over then they will be deleted similar to internal policies as it wont be patched. filters : - \"tag:c7n_stopped_instance\" : absent - \"State.Name\" : stopped actions : - type : mark-for-op tag : c7n_stopped_instance op : terminate days : 60 - name : ec2-unmark-previously-stopped resource : ec2 description : | Unmark/untag any ec2 instance that was scheduled for deletion due to being stopped if they are currently running. filters : - \"State.Name\" : running - \"tag:c7n_stopped_instance\" : present actions : - type : unmark tags : [ \"c7n_stopped_instance\" ] - name : ec2-notify-before-delete-marked-14-days resource : ec2 description : | Notify on any ec2 instances that will be deleted in 14 days if not started comments : | Your EC2 server will be terminated in 14 days if not started and patched by then. Please start your stopped servers and leave them on for 24 hours minimum to allow for patching to occur. filters : - type : marked-for-op tag : c7n_stopped_instance op : terminate skew : 14 actions : - type : notify template : default.html priority_header : 2 subject : \"EC2 Stopped Instance Termination Scheduled! [custodian {{ account }} - {{ region }}]\" violation_desc : \"EC2(s) have been in a stopped state for 45 days and at 60 days will be termianted:\" action_desc : | Your EC2 server will be terminated in 14 days if not started and patched by then. Please start your stopped servers and leave them on for 24 hours minimum to allow for patching to occur. to : - CloudCustodian@Company.com - resource-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1 - name : ec2-notify-before-delete-marked-7-days resource : ec2 description : | Notify on any ec2 instances that will be deleted in 7 days if not started filters : - type : marked-for-op tag : c7n_stopped_instance op : terminate skew : 7 actions : - type : notify template : default.html priority_header : 1 subject : \"EC2 Stopped Instance Termination Scheduled! [custodian {{ account }} - {{ region }}]\" violation_desc : \"EC2(s) have been in a stopped state for 53 days and at 60 days will be termianted:\" action_desc : | Your EC2 server will be terminated in 7 days if not started and patched by then. Please start your stopped servers and leave them on for 24 hours minimum to allow for patching to occur. to : - CloudCustodian@Company.com - resource-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1 - name : ec2-delete-marked resource : ec2 description : | Terminate and notify on any ec2 instances that were scheduled for deletion if its been stopped for 60 days and no longer up-to-date on patching. filters : - type : marked-for-op tag : c7n_stopped_instance op : terminate actions : - type : terminate force : true - type : notify template : default.html priority_header : 1 subject : \"EC2 Stopped Instance Terminated [custodian {{ account }} - {{ region }}]\" violation_desc : \"EC2(s) had been stopped for 60 days and have now been terminated:\" action_desc : | Your EC2 server has been terminated as its patching is too far out-of-date and beyond the 60 day window. to : - CloudCustodian@Company.com - resource-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1","title":"EC2 - Terminate Unpatchable Instances"},{"location":"aws/examples/eipgarbagecollect/","text":"EIP - Garbage Collect Unattached Elastic IPs \u00b6 Use the mark-for-op action to mark a resource for action later. One common pattern to follow is to mark a resource with an operation (example: release) in n days. In the subsequent days leading up to the marked date, run a unmark or untag policy if the resource has become compliant in the mean time. You can use this principle to implement garbage collection on resources. In this example, Custodian will first mark all unattached Elastic IPs for removal. The next policy will then unmark any EIP that has been attached and has the maid_status tag, indicating that it had been previously marked. Finally, the third policy will filter in any resources that have been marked and run the release action. It is important to note that the release policy will need to be run on the day that the resource is marked for, else the resource will still exist in the account. The mark operation only tags the resource with metadata about the upcoming operation. Operationally, the policy still must be executed on the day that is specified in the tag. Note: all resources that are marked-for-op up to and including the current date will be filtered in when utilizing the marked-for-op filter. vars : notify : &notify type : notify to : - slack://#slack-channel subject : \"EIP - No Instances Attached - [custodian {{ account }} - {{ region }}]\" transport : type : sqs queue : https://sqs.us-east-2.amazonaws.com/123456789012/mailer region : us-east-2 run_mode : &run_mode type : periodic schedule : \"rate(1 day)\" tags : app : \"c7n\" env : \"tools\" account : \"{account_id}\" eip_filters : &eip_filters - type : value key : InstanceId value : absent - type : value key : AssociationId value : absent policies : - name : unused-eip-mark resource : network-addr description : \"Mark any EIP with no instances attached for action in 7 days\" filters : - \"tag:maid_status_eip\" : absent - and : *eip_filters mode : << : *run_mode actions : - type : mark-for-op tag : maid_status_eip days : 7 op : release - name : unused-eip-unmark-if-in-use resource : network-addr description : | Remove the maid_status_eip tag from any eip which has instances attached filters : - \"tag:maid_status_eip\" : not-null - not : - or : *eip_filters mode : << : *run_mode actions : - type : remove-tag tags : [ maid_status_eip ] - name : unused-eip-action resource : network-addr description : \"Release EIP after 7 days of having no instances\" filters : - \"tag:maid_status_eip\" : not-null - type : marked-for-op op : release tag : maid_status_eip mode : << : *run_mode actions : - type : release - << : *notify action_desc : \"EIP released\" violation_desc : \"EIP has been unused for 7 days\"","title":"EIP - Garbage Collect Unattached Elastic IPs"},{"location":"aws/examples/eipgarbagecollect/#eip-garbage-collect-unattached-elastic-ips","text":"Use the mark-for-op action to mark a resource for action later. One common pattern to follow is to mark a resource with an operation (example: release) in n days. In the subsequent days leading up to the marked date, run a unmark or untag policy if the resource has become compliant in the mean time. You can use this principle to implement garbage collection on resources. In this example, Custodian will first mark all unattached Elastic IPs for removal. The next policy will then unmark any EIP that has been attached and has the maid_status tag, indicating that it had been previously marked. Finally, the third policy will filter in any resources that have been marked and run the release action. It is important to note that the release policy will need to be run on the day that the resource is marked for, else the resource will still exist in the account. The mark operation only tags the resource with metadata about the upcoming operation. Operationally, the policy still must be executed on the day that is specified in the tag. Note: all resources that are marked-for-op up to and including the current date will be filtered in when utilizing the marked-for-op filter. vars : notify : &notify type : notify to : - slack://#slack-channel subject : \"EIP - No Instances Attached - [custodian {{ account }} - {{ region }}]\" transport : type : sqs queue : https://sqs.us-east-2.amazonaws.com/123456789012/mailer region : us-east-2 run_mode : &run_mode type : periodic schedule : \"rate(1 day)\" tags : app : \"c7n\" env : \"tools\" account : \"{account_id}\" eip_filters : &eip_filters - type : value key : InstanceId value : absent - type : value key : AssociationId value : absent policies : - name : unused-eip-mark resource : network-addr description : \"Mark any EIP with no instances attached for action in 7 days\" filters : - \"tag:maid_status_eip\" : absent - and : *eip_filters mode : << : *run_mode actions : - type : mark-for-op tag : maid_status_eip days : 7 op : release - name : unused-eip-unmark-if-in-use resource : network-addr description : | Remove the maid_status_eip tag from any eip which has instances attached filters : - \"tag:maid_status_eip\" : not-null - not : - or : *eip_filters mode : << : *run_mode actions : - type : remove-tag tags : [ maid_status_eip ] - name : unused-eip-action resource : network-addr description : \"Release EIP after 7 days of having no instances\" filters : - \"tag:maid_status_eip\" : not-null - type : marked-for-op op : release tag : maid_status_eip mode : << : *run_mode actions : - type : release - << : *notify action_desc : \"EIP released\" violation_desc : \"EIP has been unused for 7 days\"","title":"EIP - Garbage Collect Unattached Elastic IPs"},{"location":"aws/examples/elbdeleteinetfacing/","text":"ELB - Delete New Internet-Facing ELBs \u00b6 The following example policy will automatically create a CloudWatch Event Rule triggered Lambda function in your account and region which will be triggered anytime a user creates a new classic Elastic Load Balancer. If the ELB is set to be internet-facing then delete it right away at launch. This provides near real-time auto-remediation (typically within 1-2 mins) of the ELB being created. Having such a quick auto-remediation action greatly reduces an attack window! By notifying the customer who tried to perform the action it helps drive user behaviour as well and lets them know why their ELBs keep deleting at launch! ;) policies : - name : elb-delete-new-internet-facing resource : elb mode : type : cloudtrail events : - CreateLoadBalancer description : | Any newly created Classic Load Balanacers launched with a internet-facing schema will be deleted right away. filters : - type : event key : \"detail.requestParameters.scheme\" op : eq value : \"internet-facing\" actions : - delete - type : notify template : default.html priority_header : 1 subject : \"Deleted New Internet-Facing ELB - [custodian {{ account }} - {{ region }}]\" violation_desc : \"Internet-Facing ELBs are not allowed and are deleted at launch.\" action_desc : | \"Actions Taken: Your new ELB has been deleted. Please launch a new non-internet-facing ELB\" to : - CloudCustodian@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1 By including - event-owner in the notify\\'s to: field it tells Cloud Custodian to extract the id of the user who made the API call for the event and email them. Being that the above policy runs in a cloudtrail mode the API call\\'s metadata event is present which is why the example uses event-owner. If you were to remove the mode: statement on the example policy and run it in a poll mode instead you could change - event-owner to - resource-owner which would rely on the resources tags for a id or email to send the notification to as no API event would be available at that time. Note that the notify action requires the cloud custodian mailer tool to be installed.","title":"ELB - Delete New Internet-Facing ELBs"},{"location":"aws/examples/elbdeleteinetfacing/#elb-delete-new-internet-facing-elbs","text":"The following example policy will automatically create a CloudWatch Event Rule triggered Lambda function in your account and region which will be triggered anytime a user creates a new classic Elastic Load Balancer. If the ELB is set to be internet-facing then delete it right away at launch. This provides near real-time auto-remediation (typically within 1-2 mins) of the ELB being created. Having such a quick auto-remediation action greatly reduces an attack window! By notifying the customer who tried to perform the action it helps drive user behaviour as well and lets them know why their ELBs keep deleting at launch! ;) policies : - name : elb-delete-new-internet-facing resource : elb mode : type : cloudtrail events : - CreateLoadBalancer description : | Any newly created Classic Load Balanacers launched with a internet-facing schema will be deleted right away. filters : - type : event key : \"detail.requestParameters.scheme\" op : eq value : \"internet-facing\" actions : - delete - type : notify template : default.html priority_header : 1 subject : \"Deleted New Internet-Facing ELB - [custodian {{ account }} - {{ region }}]\" violation_desc : \"Internet-Facing ELBs are not allowed and are deleted at launch.\" action_desc : | \"Actions Taken: Your new ELB has been deleted. Please launch a new non-internet-facing ELB\" to : - CloudCustodian@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1 By including - event-owner in the notify\\'s to: field it tells Cloud Custodian to extract the id of the user who made the API call for the event and email them. Being that the above policy runs in a cloudtrail mode the API call\\'s metadata event is present which is why the example uses event-owner. If you were to remove the mode: statement on the example policy and run it in a poll mode instead you could change - event-owner to - resource-owner which would rely on the resources tags for a id or email to send the notification to as no API event would be available at that time. Note that the notify action requires the cloud custodian mailer tool to be installed.","title":"ELB - Delete New Internet-Facing ELBs"},{"location":"aws/examples/elbgarbagecollection/","text":"ELB - Delete Unused Elastic Load Balancers \u00b6 The following example policy workflow uses the mark-for-op and marked-for-op filters and actions to chain together a set of policies to accomplish a task. In this example it will find any ELB that isn\\'t attached to any instances and tag it with a delete op and date 14 days out. The policy workflow will also email the ELB resource owner to inform them of the upcoming deletion if the ELB remains unused. If the customer adds an instance back to their ELB it will get unmarked so it doesn\\'t get deleted. Note the use of the notify action requires the Cloud Custodian mailer to be installed and configured. policies : - name : elb-mark-unused-for-deletion resource : elb description : | Mark any ELB with no instances attached for deletion in 14 days. Also send an email to the ELB resource owner informing them its unused. filters : - \"tag:maid_status\" : absent - Instances : [] actions : - type : mark-for-op tag : maid_status op : delete days : 14 - type : notify template : default.html priority_header : 1 subject : \"ELB - No Instances Attached - [custodian {{ account }} - {{ region }}]\" violation_desc : \"No Instances Are Attached To The Following ELB(s):\" action_desc : | Actions Taken: The unused ELBs have been marked for deletion in 14 if they remain unused. If you still need the ELBs listed below, please attach instances to them, otherwise please delete them if not needed anymore. to : - CloudCustodian@Company.com - resource-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1 - name : elb-unmark-if-in-use resource : elb description : | Remove the maid_status tag from any elb which has instances attached so it doesn't get deleted by the following policy filters : - \"tag:maid_status\" : not-null - not : - Instances : [] actions : - type : remove-tag tags : [ maid_status ] - name : elb-delete-unused resource : elb description : | Delete any marked ELB which has no instances attached if it has been that way for 14 days or more. filters : - type : marked-for-op op : delete actions : - delete - type : notify template : default.html priority_header : 1 subject : \"ELB - Deleted Stale ELB - [custodian {{ account }} - {{ region }}]\" violation_desc : \"No Instances Are Attached To ELB for over 14 days:\" action_desc : \"Actions Taken: The ELB has been deleted\" to : - CloudCustodian@Company.com - resource-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1","title":"ELB - Delete Unused Elastic Load Balancers"},{"location":"aws/examples/elbgarbagecollection/#elb-delete-unused-elastic-load-balancers","text":"The following example policy workflow uses the mark-for-op and marked-for-op filters and actions to chain together a set of policies to accomplish a task. In this example it will find any ELB that isn\\'t attached to any instances and tag it with a delete op and date 14 days out. The policy workflow will also email the ELB resource owner to inform them of the upcoming deletion if the ELB remains unused. If the customer adds an instance back to their ELB it will get unmarked so it doesn\\'t get deleted. Note the use of the notify action requires the Cloud Custodian mailer to be installed and configured. policies : - name : elb-mark-unused-for-deletion resource : elb description : | Mark any ELB with no instances attached for deletion in 14 days. Also send an email to the ELB resource owner informing them its unused. filters : - \"tag:maid_status\" : absent - Instances : [] actions : - type : mark-for-op tag : maid_status op : delete days : 14 - type : notify template : default.html priority_header : 1 subject : \"ELB - No Instances Attached - [custodian {{ account }} - {{ region }}]\" violation_desc : \"No Instances Are Attached To The Following ELB(s):\" action_desc : | Actions Taken: The unused ELBs have been marked for deletion in 14 if they remain unused. If you still need the ELBs listed below, please attach instances to them, otherwise please delete them if not needed anymore. to : - CloudCustodian@Company.com - resource-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1 - name : elb-unmark-if-in-use resource : elb description : | Remove the maid_status tag from any elb which has instances attached so it doesn't get deleted by the following policy filters : - \"tag:maid_status\" : not-null - not : - Instances : [] actions : - type : remove-tag tags : [ maid_status ] - name : elb-delete-unused resource : elb description : | Delete any marked ELB which has no instances attached if it has been that way for 14 days or more. filters : - type : marked-for-op op : delete actions : - delete - type : notify template : default.html priority_header : 1 subject : \"ELB - Deleted Stale ELB - [custodian {{ account }} - {{ region }}]\" violation_desc : \"No Instances Are Attached To ELB for over 14 days:\" action_desc : \"Actions Taken: The ELB has been deleted\" to : - CloudCustodian@Company.com - resource-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1","title":"ELB - Delete Unused Elastic Load Balancers"},{"location":"aws/examples/elbsslblacklist/","text":"ELB - SSL Blacklist \u00b6 - name : elb-ssl-whitelist description : | HTTPS/SSL ELBs should only have whitelisted ciphers/protocols resource : elb mode : type : cloudtrail events : - CreateLoadBalancer - CreateLoadBalancerPolicy - SetLoadBalancerPoliciesOfListener filters : - type : ssl-policy blacklist : - Protocol-TLSv1 - Protocol-TLSv1.1 - Protocol-TLSv1.2 actions : - delete","title":"ELB - SSL Blacklist"},{"location":"aws/examples/elbsslblacklist/#elb-ssl-blacklist","text":"- name : elb-ssl-whitelist description : | HTTPS/SSL ELBs should only have whitelisted ciphers/protocols resource : elb mode : type : cloudtrail events : - CreateLoadBalancer - CreateLoadBalancerPolicy - SetLoadBalancerPoliciesOfListener filters : - type : ssl-policy blacklist : - Protocol-TLSv1 - Protocol-TLSv1.1 - Protocol-TLSv1.2 actions : - delete","title":"ELB - SSL Blacklist"},{"location":"aws/examples/elbsslwhitelist/","text":"ELB - SSL Whitelist \u00b6 - name : elb-ssl-whitelist description : | HTTPS/SSL ELBs should only have whitelisted ciphers/protocols resource : elb mode : type : cloudtrail events : - CreateLoadBalancer - CreateLoadBalancerPolicy - SetLoadBalancerPoliciesOfListener filters : - type : ssl-policy whitelist : &POLICY - Protocol-TLSv1 - Protocol-TLSv1.1 - Protocol-TLSv1.2 actions : - type : set-ssl-listener-policy name : CustodianEnforcedPolicy attributes : *POLICY","title":"ELB - SSL Whitelist"},{"location":"aws/examples/elbsslwhitelist/#elb-ssl-whitelist","text":"- name : elb-ssl-whitelist description : | HTTPS/SSL ELBs should only have whitelisted ciphers/protocols resource : elb mode : type : cloudtrail events : - CreateLoadBalancer - CreateLoadBalancerPolicy - SetLoadBalancerPoliciesOfListener filters : - type : ssl-policy whitelist : &POLICY - Protocol-TLSv1 - Protocol-TLSv1.1 - Protocol-TLSv1.2 actions : - type : set-ssl-listener-policy name : CustodianEnforcedPolicy attributes : *POLICY","title":"ELB - SSL Whitelist"},{"location":"aws/examples/iamsetrolepolicy/","text":"IAM - Manage Whether A Specific IAM Policy is Attached to Roles \u00b6 Attach required IAM policy to Roles without it: - name : iam-attach-policy resource : iam-role filters : - type : no-specific-managed-policy value : my-iam-policy actions : - type : set-policy state : attached arn : arn:aws:iam::123456789012:policy/my-iam-policy Detach undesired IAM policy from Roles with it: - name : iam-detach-policy resource : iam-role filters : - type : has-specific-managed-policy value : my-iam-policy actions : - type : set-policy state : detached arn : arn:aws:iam::123456789012:policy/my-iam-policy","title":"IAM - Manage Whether A Specific IAM Policy is Attached to Roles"},{"location":"aws/examples/iamsetrolepolicy/#iam-manage-whether-a-specific-iam-policy-is-attached-to-roles","text":"Attach required IAM policy to Roles without it: - name : iam-attach-policy resource : iam-role filters : - type : no-specific-managed-policy value : my-iam-policy actions : - type : set-policy state : attached arn : arn:aws:iam::123456789012:policy/my-iam-policy Detach undesired IAM policy from Roles with it: - name : iam-detach-policy resource : iam-role filters : - type : has-specific-managed-policy value : my-iam-policy actions : - type : set-policy state : detached arn : arn:aws:iam::123456789012:policy/my-iam-policy","title":"IAM - Manage Whether A Specific IAM Policy is Attached to Roles"},{"location":"aws/examples/lambdaerrorsnotify/","text":"Lambda - Notify On Lambda Errors \u00b6 The following example policy will run hourly as a CloudWatch Scheduled Event triggered Lambda function. The policies filters will check each Lambdas CloudWatch Metrics for errors. If there are any errors in an hour period and the Lambda function is not tagged with Custodian_Lambda_Error_Exclude then the policy will take the action of notifying the Lambda function owner and the cloud team. These notifications can help developers by informing them if unexpected errors occur so they can be quickly addressed. For the notify action in the policy to work you must have setup the c7n_mailer tool: https://github.com/cloud-custodian/cloud-custodian/tree/master/tools/c7n_mailer Mailer Setup Guide: https://cloudcustodian.io/docs/tools/c7n-mailer.html policies : - name : lambda-invocation-errors resource : lambda description : | Hourly check that finds any Lambda functions that have any errors within the last hour and notifies the customer and Cloud Team. mode : type : periodic schedule : \"rate(1 hour)\" timeout : 300 tags : ResourceContact : \"cloudteam@company.com\" ResourcePurpose : \"Created by Cloud Custodian Automated Fleet Management\" Environment : prd filters : - type : metrics name : Errors days : 0.068 period : 3600 statistics : Sum op : greater-than value : 0 - not : - \"tag:Custodian_Lambda_Error_Exclude\" : present actions : - type : notify template : default.html priority_header : 1 subject : \"Lambda Function Errors Occuring! - [custodian {{ account }} - {{ region }}]\" violation_desc : | \"There has been one or more code errors occuring on this lambda function in the last hour:\" action_desc : | \"Actions Taken: Please investigate this lambda function as errors reported. To exclude the below function from this scan please add a tag with a Key called Custodian_Lambda_Error_Exclude with any value to the lambda function. to : - CloudCustodian@Company.com - resource-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/1234567890/cloud-custodian-mailer region : us-east-1","title":"Lambda - Notify On Lambda Errors"},{"location":"aws/examples/lambdaerrorsnotify/#lambda-notify-on-lambda-errors","text":"The following example policy will run hourly as a CloudWatch Scheduled Event triggered Lambda function. The policies filters will check each Lambdas CloudWatch Metrics for errors. If there are any errors in an hour period and the Lambda function is not tagged with Custodian_Lambda_Error_Exclude then the policy will take the action of notifying the Lambda function owner and the cloud team. These notifications can help developers by informing them if unexpected errors occur so they can be quickly addressed. For the notify action in the policy to work you must have setup the c7n_mailer tool: https://github.com/cloud-custodian/cloud-custodian/tree/master/tools/c7n_mailer Mailer Setup Guide: https://cloudcustodian.io/docs/tools/c7n-mailer.html policies : - name : lambda-invocation-errors resource : lambda description : | Hourly check that finds any Lambda functions that have any errors within the last hour and notifies the customer and Cloud Team. mode : type : periodic schedule : \"rate(1 hour)\" timeout : 300 tags : ResourceContact : \"cloudteam@company.com\" ResourcePurpose : \"Created by Cloud Custodian Automated Fleet Management\" Environment : prd filters : - type : metrics name : Errors days : 0.068 period : 3600 statistics : Sum op : greater-than value : 0 - not : - \"tag:Custodian_Lambda_Error_Exclude\" : present actions : - type : notify template : default.html priority_header : 1 subject : \"Lambda Function Errors Occuring! - [custodian {{ account }} - {{ region }}]\" violation_desc : | \"There has been one or more code errors occuring on this lambda function in the last hour:\" action_desc : | \"Actions Taken: Please investigate this lambda function as errors reported. To exclude the below function from this scan please add a tag with a Key called Custodian_Lambda_Error_Exclude with any value to the lambda function. to : - CloudCustodian@Company.com - resource-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/1234567890/cloud-custodian-mailer region : us-east-1","title":"Lambda - Notify On Lambda Errors"},{"location":"aws/examples/offhours/","text":"Example offhours policy \u00b6 c7n.filters. offhours Resource Scheduling Offhours \u00b6 Custodian provides for time based filters, that allow for taking periodic action on a resource, with resource schedule customization based on tag values. A common use is offhours scheduling for asgs and instances. Features \u00b6 Flexible offhours scheduling with opt-in, opt-out selection, and timezone support. Resume during offhours support. Can be combined with other filters to get a particular set ( resources with tag, vpc, etc). Can be combined with arbitrary actions Can omit a set of dates such as public holidays. Policy Configuration \u00b6 We provide an onhour and offhour time filter, each should be used in a different policy, they support the same configuration options: weekends : default true, whether to leave resources off for the weekend weekends-only : default false, whether to turn the resource off only on the weekend default_tz : which timezone to utilize when evaluating time (REQUIRED) fallback-schedule : If a resource doesn't support tagging or doesn't provide a tag you can supply a default schedule that will be used. When the tag is provided this will be ignored. See :ref: ScheduleParser Time Specifications <scheduleparser-time-spec> . tag : which resource tag name to use for per-resource configuration (schedule and timezone overrides and opt-in/opt-out); default is maid_offhours . opt-out : Determines the behavior for resources which do not have a tag matching the one specified for tag . Values can be either false (the default) where the policy operates on an opt-in basis and resources must have the tag in order to be acted on by the policy, or true where the policy operates on an opt-out basis, and resources without the tag are acted on by the policy. onhour : the default time to start/run resources, specified as 0-23 offhour : the default time to stop/suspend resources, specified as 0-23 skip-days : a list of dates to skip. Dates must use format YYYY-MM-DD skip-days-from : a list of dates to skip stored at a url. expr , format , and url must be passed as parameters. Same syntax as value_from . Can not specify both skip-days-from and skip-days . This example policy overrides most of the defaults for an offhour policy: .. code-block:: yaml policies: - name: offhours-stop resource: ec2 filters: - type: offhour weekends: false default_tz: pt tag: downtime opt-out: true onhour: 8 offhour: 20 Tag Based Configuration \u00b6 Resources can use a special tag to override the default configuration on a per-resource basis. Note that the name of the tag is configurable via the tag option in the policy; the examples below use the default tag name, maid_offhours . The value of the tag must be one of the following: (empty) or on - An empty tag value or a value of \"on\" implies night and weekend offhours using the default time zone configured in the policy (tz=est if unspecified) and the default onhour and offhour values configured in the policy. off - If offhours is configured to run in opt-out mode, this tag can be specified to disable offhours on a given instance. If offhours is configured to run in opt-in mode, this tag will have no effect (the resource will still be opted out). a semicolon-separated string composed of one or more of the following components, which override the defaults specified in the policy: tz=<timezone> to evaluate with a resource-specific timezone, where <timezone> is either one of the supported timezone aliases defined in attr: c7n.filters.offhours.Time.TZ_ALIASES (such as pt ) or the name of a geographic timezone identifier in IANA's tzinfo database , such as Americas/Los_Angeles . (Note all timezone aliases are referenced to a locality to ensure taking into account local daylight savings time, if applicable.) off=(time spec) and/or on=(time spec) matching time specifications supported by class: c7n.filters.offhours.ScheduleParser as described in the next section. .. _scheduleparser-time-spec: ScheduleParser Time Specifications \u00b6 Each time specification follows the format (days,hours) . Multiple time specifications can be combined in square-bracketed lists, i.e. [(days,hours),(days,hours),(days,hours)] . Examples :: # up mon-fri from 7am-7pm; eastern time off=(M-F,19);on=(M-F,7) # up mon-fri from 6am-9pm; up sun from 10am-6pm; pacific time off=[(M-F,21),(U,18)];on=[(M-F,6),(U,10)];tz=pt Possible values : +------------+----------------------+ | field | values | +============+======================+ | days | M, T, W, H, F, S, U | +------------+----------------------+ | hours | 0, 1, 2, ..., 22, 23 | +------------+----------------------+ Days can be specified in a range (ex. M-F). Policy examples \u00b6 Turn ec2 instances on and off .. code-block:: yaml policies: - name: offhours-stop resource: ec2 filters: - type: offhour actions: - stop - name: offhours-start resource: ec2 filters: - type: onhour actions: - start Here's doing the same with auto scale groups .. code-block:: yaml policies: - name: asg-offhours-stop resource: asg filters: - offhour actions: - suspend - name: asg-onhours-start resource: asg filters: - onhour actions: - resume Additional policy examples and resource-type-specific information can be seen in the :ref: EC2 Offhours <ec2offhours> and :ref: ASG Offhours <asgoffhours> use cases. Resume During Offhours \u00b6 These policies are evaluated hourly; during each run (once an hour), cloud-custodian will act on only the resources tagged for that exact hour. In other words, if a resource has an offhours policy of stopping/suspending at 23:00 Eastern daily and starting/resuming at 06:00 Eastern daily, and you run cloud-custodian once an hour via Lambda, that resource will only be stopped once a day sometime between 23:00 and 23:59, and will only be started once a day sometime between 06:00 and 06:59. If the current hour does not exactly match the hour specified in the policy, nothing will be done at all. As a result of this, if custodian stops an instance or suspends an ASG and you need to start/resume it, you can safely do so manually and custodian won't touch it again until the next day. ElasticBeanstalk, EFS and Other Services with Tag Value Restrictions \u00b6 A number of AWS services have restrictions on the characters that can be used in tag values, such as ElasticBeanstalk <http://docs.aws.amazon.com/elasticbean stalk/latest/dg/using-features.tagging.html> and EFS <http://docs.aws.amazon. com/efs/latest/ug/API_Tag.html> . In particular, these services do not allow parenthesis, square brackets, commas, or semicolons, or empty tag values. This proves to be problematic with the tag-based schedule configuration described above. The best current workaround is to define a separate policy with a unique tag name for each unique schedule that you want to use, and then tag resources with that tag name and a value of on . Note that this can only be used in opt-in mode, not opt-out. Another option is to escape the tag value with the following mapping, generated with the char's unicode number \"u\" + hex(ord(the_char))[2:] . This works for GCP resources as well. ( and ) as u28 and u29 [ and ] as u5b and u5d , as u2c ; as u3b = as u3d / as u2f Examples :: # off=(M-F,18);tz=Australia/Sydney offu3du28M-Fu2c18u29u3btzu3dAustraliau2fSydney # off=[(M-F,18),(S,13)] off=u5bu28M-Fu2c18u29u2cu28Su2c13u29u5d Public Holidays \u00b6 In order to properly implement support for public holidays, make sure to include either skip-days or skip-days-from with your policy. This list should contain all of the public holidays you wish to address and must use YYYY-MM-DD syntax for its dates. If the date the policy is being run on matches any one of those dates, the policy will not return any resources. These dates include year as many holidays vary from year to year so year is required to prevent errors. A sample policy that would not start stopped instances on a public holiday might look like: .. code-block:: yaml policies: - name: onhour-morning-start-skip-holidays resource: ec2 filters: - type: onhour tag: custodian_downtime default_tz: et onhour: 6 skip-days: ['2017-12-25'] actions: - start","title":"Example offhours policy"},{"location":"aws/examples/offhours/#example-offhours-policy","text":"c7n.filters. offhours","title":"Example offhours policy"},{"location":"aws/examples/rdsdeleteunused/","text":"RDS - Delete Unused Databases With No Connections \u00b6 The following example policy workflow uses the mark-for-op and marked-for-op filters and actions to chain together a set of policies to accomplish a task. In this example it will find any RDS that is older than 14 days that has had no connections to it in the last 14 days and tag it with a delete op and date 14 days out. The policy workflow will also email the RDS resource owner to inform them of the upcoming stopping and deletion if the RDS remains unused. If a customer connects to the RDS before the 14 day window it will get unmarked so it doesn\\'t get deleted. Note the use of the notify action requires the Cloud Custodian mailer to be installed and configured. vars : metrics-filters : &metrics-filter type : metrics name : DatabaseConnections days : 14 value : 0 op : equal policies : - name : rds-unused-databases-notify-step1 resource : rds description : | Take the average number of connections over 14 days for databases that are greater than 14 days old and notify the resources owner on any unused RDS and mark for delete action in 14 days. filters : - \"tag:c7n_rds_unused\" : absent - type : value value_type : age key : InstanceCreateTime value : 14 op : greater-than - << : *metrics-filter - or : - \"tag:Resource Contact\" : present - \"tag:CreatorName\" : present actions : - type : mark-for-op tag : c7n_rds_unused op : delete days : 14 - type : notify template : default.html priority_header : 1 subject : \"RDS - Unused Database - [custodian {{ account }} - {{ region }}]\" violation_desc : \"RDS Instance has had no connections in the last 2 weeks and is unused:\" action_desc : | \"Actions Taken: Database deletion has been scheduled for 14 days from now. At this point we are just notifying you of the upcoming deletion if not used.\" to : - CloudCustodian@Company.com - resource-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1 - name : rds-unused-databases-notify-step2 resource : rds description : | Take the average number of connections over 21 days and notify on any unused RDS that have already been marked for delete filters : - \"tag:c7n_rds_unused\" : present - type : marked-for-op tag : c7n_rds_unused op : delete skew : 7 - type : value value_type : age key : InstanceCreateTime value : 21 op : gte - << : *metrics-filter - or : - \"tag:Resource Contact\" : present - \"tag:CreatorName\" : present actions : - type : notify template : default.html priority_header : 1 subject : \"RDS - URGENT - Unused Database - [custodian {{ account }} - {{ region }}]\" violation_desc : | \"RDS Instance has had no connections in the last 3 weeks and is unused and will be stopped hourly in 5 days (if supported by DB type) and then deleted 2 days after its stopped:\" action_desc : | \"Actions Taken: Hourly database stopping and email will occur in 5 days and deleted will occur in 7 days. At this point we are just notifying you of the upcoming stoppage and deleted if not used\" to : - resource-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1 - name : rds-unused-databases-stop-and-nag-hourly-step3 resource : rds mode : type : periodic schedule : \"rate(1 hour)\" timeout : 300 description : | This policy deploys a Lambda function with an hourly CloudWatch Event Schedule trigger. The policy takes the average number of connections over 26 days and stops the RDS and notifies the resource owner hourly on any of their unused databases that have already been marked for deletion. filters : - \"tag:c7n_rds_unused\" : present - type : marked-for-op tag : c7n_rds_unused op : delete skew : 1 - type : value value_type : age key : InstanceCreateTime value : 26 op : gte - << : *metrics-filter - or : - \"tag:Resource Contact\" : present - \"tag:CreatorName\" : present actions : - type : notify template : default.html priority_header : 1 subject : \"RDS - URGENT!!! - Unused Database! - [custodian {{ account }} - {{ region }}]\" violation_desc : | \"RDS Instance has had no connections in the last 26 days and is unused and will be deleted in less than 48 hours\" action_desc : | \"Actions Taken: Hourly Stopping of RDS and notify. Deletion will occur in less than 48 hours. Please connect to the RDS or snapshot it if you don't need it at this time.\" to : - resource-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1 - name : rds-unused-databases-delete-step4 resource : rds description : | Take the average number of connections over 28 days and delete any unused databases that have already been marked for delete filters : - \"tag:c7n_rds_unused\" : present - type : marked-for-op tag : c7n_rds_unused op : delete - type : value value_type : age key : InstanceCreateTime value : 28 op : gte - << : *metrics-filter - or : - \"tag:Resource Contact\" : present - \"tag:CreatorName\" : present actions : - type : delete skip-snapshot : true - type : notify template : default.html priority_header : 1 subject : \"RDS - URGENT!!! - Unused Database Deleted! - [custodian {{ account }} - {{ region }}]\" violation_desc : \"RDS Instance has had no connections in the last 28 days and has been deleted.\" action_desc : \"Actions Taken: RDS Instance(s) have been deleted.\" to : - CloudCustodian@Company.com - resource-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1 - name : rds-unused-databases-unmark resource : rds description : | The policy takes the average number of connections over 14 days and if there are connections then unmark the RDS instance and notify the resource owner. filters : - \"tag:c7n_rds_unused\" : present - type : value value_type : age key : InstanceCreateTime value : 14 op : gte - type : metrics name : DatabaseConnections days : 14 value : 0 op : gt - or : - \"tag:Resource Contact\" : present - \"tag:CreatorName\" : present actions : - type : unmark tags : [ \"c7n_rds_unused\" ] - type : notify template : default.html priority_header : 1 subject : \"RDS - Previously Unused DB Unmarked! - [custodian {{ account }} - {{ region }}]\" violation_desc : | \"RDS Instance that previously had no connections for over 2 weeks is now showing connections and it has been unmarked for deletion.\" action_desc : \"Actions Taken: RDS Instance(s) have been unmarked. No further action needed\" to : - CloudCustodian@Company.com - resource-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1","title":"RDS - Delete Unused Databases With No Connections {#rdsdeleteunused}"},{"location":"aws/examples/rdsdeleteunused/#rdsdeleteunused","text":"The following example policy workflow uses the mark-for-op and marked-for-op filters and actions to chain together a set of policies to accomplish a task. In this example it will find any RDS that is older than 14 days that has had no connections to it in the last 14 days and tag it with a delete op and date 14 days out. The policy workflow will also email the RDS resource owner to inform them of the upcoming stopping and deletion if the RDS remains unused. If a customer connects to the RDS before the 14 day window it will get unmarked so it doesn\\'t get deleted. Note the use of the notify action requires the Cloud Custodian mailer to be installed and configured. vars : metrics-filters : &metrics-filter type : metrics name : DatabaseConnections days : 14 value : 0 op : equal policies : - name : rds-unused-databases-notify-step1 resource : rds description : | Take the average number of connections over 14 days for databases that are greater than 14 days old and notify the resources owner on any unused RDS and mark for delete action in 14 days. filters : - \"tag:c7n_rds_unused\" : absent - type : value value_type : age key : InstanceCreateTime value : 14 op : greater-than - << : *metrics-filter - or : - \"tag:Resource Contact\" : present - \"tag:CreatorName\" : present actions : - type : mark-for-op tag : c7n_rds_unused op : delete days : 14 - type : notify template : default.html priority_header : 1 subject : \"RDS - Unused Database - [custodian {{ account }} - {{ region }}]\" violation_desc : \"RDS Instance has had no connections in the last 2 weeks and is unused:\" action_desc : | \"Actions Taken: Database deletion has been scheduled for 14 days from now. At this point we are just notifying you of the upcoming deletion if not used.\" to : - CloudCustodian@Company.com - resource-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1 - name : rds-unused-databases-notify-step2 resource : rds description : | Take the average number of connections over 21 days and notify on any unused RDS that have already been marked for delete filters : - \"tag:c7n_rds_unused\" : present - type : marked-for-op tag : c7n_rds_unused op : delete skew : 7 - type : value value_type : age key : InstanceCreateTime value : 21 op : gte - << : *metrics-filter - or : - \"tag:Resource Contact\" : present - \"tag:CreatorName\" : present actions : - type : notify template : default.html priority_header : 1 subject : \"RDS - URGENT - Unused Database - [custodian {{ account }} - {{ region }}]\" violation_desc : | \"RDS Instance has had no connections in the last 3 weeks and is unused and will be stopped hourly in 5 days (if supported by DB type) and then deleted 2 days after its stopped:\" action_desc : | \"Actions Taken: Hourly database stopping and email will occur in 5 days and deleted will occur in 7 days. At this point we are just notifying you of the upcoming stoppage and deleted if not used\" to : - resource-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1 - name : rds-unused-databases-stop-and-nag-hourly-step3 resource : rds mode : type : periodic schedule : \"rate(1 hour)\" timeout : 300 description : | This policy deploys a Lambda function with an hourly CloudWatch Event Schedule trigger. The policy takes the average number of connections over 26 days and stops the RDS and notifies the resource owner hourly on any of their unused databases that have already been marked for deletion. filters : - \"tag:c7n_rds_unused\" : present - type : marked-for-op tag : c7n_rds_unused op : delete skew : 1 - type : value value_type : age key : InstanceCreateTime value : 26 op : gte - << : *metrics-filter - or : - \"tag:Resource Contact\" : present - \"tag:CreatorName\" : present actions : - type : notify template : default.html priority_header : 1 subject : \"RDS - URGENT!!! - Unused Database! - [custodian {{ account }} - {{ region }}]\" violation_desc : | \"RDS Instance has had no connections in the last 26 days and is unused and will be deleted in less than 48 hours\" action_desc : | \"Actions Taken: Hourly Stopping of RDS and notify. Deletion will occur in less than 48 hours. Please connect to the RDS or snapshot it if you don't need it at this time.\" to : - resource-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1 - name : rds-unused-databases-delete-step4 resource : rds description : | Take the average number of connections over 28 days and delete any unused databases that have already been marked for delete filters : - \"tag:c7n_rds_unused\" : present - type : marked-for-op tag : c7n_rds_unused op : delete - type : value value_type : age key : InstanceCreateTime value : 28 op : gte - << : *metrics-filter - or : - \"tag:Resource Contact\" : present - \"tag:CreatorName\" : present actions : - type : delete skip-snapshot : true - type : notify template : default.html priority_header : 1 subject : \"RDS - URGENT!!! - Unused Database Deleted! - [custodian {{ account }} - {{ region }}]\" violation_desc : \"RDS Instance has had no connections in the last 28 days and has been deleted.\" action_desc : \"Actions Taken: RDS Instance(s) have been deleted.\" to : - CloudCustodian@Company.com - resource-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1 - name : rds-unused-databases-unmark resource : rds description : | The policy takes the average number of connections over 14 days and if there are connections then unmark the RDS instance and notify the resource owner. filters : - \"tag:c7n_rds_unused\" : present - type : value value_type : age key : InstanceCreateTime value : 14 op : gte - type : metrics name : DatabaseConnections days : 14 value : 0 op : gt - or : - \"tag:Resource Contact\" : present - \"tag:CreatorName\" : present actions : - type : unmark tags : [ \"c7n_rds_unused\" ] - type : notify template : default.html priority_header : 1 subject : \"RDS - Previously Unused DB Unmarked! - [custodian {{ account }} - {{ region }}]\" violation_desc : | \"RDS Instance that previously had no connections for over 2 weeks is now showing connections and it has been unmarked for deletion.\" action_desc : \"Actions Taken: RDS Instance(s) have been unmarked. No further action needed\" to : - CloudCustodian@Company.com - resource-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1","title":"RDS - Delete Unused Databases With No Connections"},{"location":"aws/examples/rdspublicunencrypted/","text":"RDS - Terminate Unencrypted Public Instances \u00b6 - name : terminate-unencrypted-public-rds description : | Terminate all unencrypted or publicly available RDS upon creation resource : rds mode : type : cloudtrail events : - CreateDBInstance filters : - or : - StorageEncrypted : false - PubliclyAccessible : true actions : - type : delete skip-snapshot : true","title":"RDS - Terminate Unencrypted Public Instances"},{"location":"aws/examples/rdspublicunencrypted/#rds-terminate-unencrypted-public-instances","text":"- name : terminate-unencrypted-public-rds description : | Terminate all unencrypted or publicly available RDS upon creation resource : rds mode : type : cloudtrail events : - CreateDBInstance filters : - or : - StorageEncrypted : false - PubliclyAccessible : true actions : - type : delete skip-snapshot : true","title":"RDS - Terminate Unencrypted Public Instances"},{"location":"aws/examples/s3configurenewbucket/","text":"S3 - Configure New Buckets Settings and Standards \u00b6 The following example policy will automatically create a CloudWatch Event Rule triggered Lambda function in your account and region which will be triggered anytime a new S3 bucket is created in that region. The policy then applies several configurations such as enabling the default S3 AES256 bucket encryption, turns on object versioning, creates a s3 object lifecycle, enables logging on the bucket, and tags the user that created the bucket. When using the toggle-logging action as shown below you must make sure the s3 bucket the logs are getting sent to already exists. Buckets can only send logs to logging buckets in the same region as it so you may need to create multiple logging buckets per account if you use more than 1 region. In the below example the logging buckets would be named using account and region like the following: 0123456789012-us-east-1-s3-logs The S3 bucket lifecycle will help to save S3 costs by getting rid of old object versions and moving objects from standard storage class to infrequent access storage after 180 days in this example. policies : - name : s3-configure-standards-real-time resource : s3 description : | This policy is triggered when a new S3 bucket is created and it applies the AWS AES256 Default Bucket Encryption, Tags the creators ID, enables object versioning, configures the bucket lifecycle and enables logging. mode : type : cloudtrail events : - CreateBucket role : arn:aws:iam::{account_id}:role/Cloud_Custodian_S3_Lambda_Role timeout : 200 actions : - type : auto-tag-user tag : CreatorName - type : set-bucket-encryption - type : toggle-versioning enabled : true - type : toggle-logging target_bucket : \"{account_id}-{region}-s3-logs\" target_prefix : \"{source_bucket_name}/\" - type : configure-lifecycle rules : - ID : company-s3-lifecycle Status : Enabled Filter : Prefix : / Transitions : - Days : 180 StorageClass : STANDARD_IA NoncurrentVersionExpiration : NoncurrentDays : 35","title":"S3 - Configure New Buckets Settings and Standards {#s3configurenewbucket}"},{"location":"aws/examples/s3configurenewbucket/#s3configurenewbucket","text":"The following example policy will automatically create a CloudWatch Event Rule triggered Lambda function in your account and region which will be triggered anytime a new S3 bucket is created in that region. The policy then applies several configurations such as enabling the default S3 AES256 bucket encryption, turns on object versioning, creates a s3 object lifecycle, enables logging on the bucket, and tags the user that created the bucket. When using the toggle-logging action as shown below you must make sure the s3 bucket the logs are getting sent to already exists. Buckets can only send logs to logging buckets in the same region as it so you may need to create multiple logging buckets per account if you use more than 1 region. In the below example the logging buckets would be named using account and region like the following: 0123456789012-us-east-1-s3-logs The S3 bucket lifecycle will help to save S3 costs by getting rid of old object versions and moving objects from standard storage class to infrequent access storage after 180 days in this example. policies : - name : s3-configure-standards-real-time resource : s3 description : | This policy is triggered when a new S3 bucket is created and it applies the AWS AES256 Default Bucket Encryption, Tags the creators ID, enables object versioning, configures the bucket lifecycle and enables logging. mode : type : cloudtrail events : - CreateBucket role : arn:aws:iam::{account_id}:role/Cloud_Custodian_S3_Lambda_Role timeout : 200 actions : - type : auto-tag-user tag : CreatorName - type : set-bucket-encryption - type : toggle-versioning enabled : true - type : toggle-logging target_bucket : \"{account_id}-{region}-s3-logs\" target_prefix : \"{source_bucket_name}/\" - type : configure-lifecycle rules : - ID : company-s3-lifecycle Status : Enabled Filter : Prefix : / Transitions : - Days : 180 StorageClass : STANDARD_IA NoncurrentVersionExpiration : NoncurrentDays : 35","title":"S3 - Configure New Buckets Settings and Standards"},{"location":"aws/examples/s3denypublicobjectacls/","text":"S3 - Block Public S3 Object ACLs \u00b6 The following example policies will append a S3 bucket policy to every S3 bucket with a policy statement called DenyS3PublicObjectACL This will prevent any object in these buckets from being set to public-read, public-read-write ,or authenticated-read (Any authenticated AWS user, not just local to account). Being that S3 object permissions can be hard to track and restrict due to the huge amount of S3 objects usually present in accounts, this policy allows you to prevent the issue from occurring in the first place and helps maintain tighter S3 security to avoid accidentally setting sensitive S3 objects to public. Note the S3 bucket policy has a NotPrincipal statement with several \\\"AWS\\\": arns. These arns are owned by AWS and they are used for the AWS logging services for Log Delivery Group, ELB Logs, and Redshift Logs. The ELB and Redshift arns are region specific (sample includesus-east-1 and eu-west-1) so depending on the regions you are utilizing you might need to add or remove addtional arns found here: Redshift Log Accounts: https://docs.aws.amazon.com/redshift/latest/mgmt/db-auditing.html ELB Log Accounts: https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-access-logs.html policies : - name : s3-deny-public-object-acl-poll resource : s3 description : | Appends a bucket policy statement to all existing s3 buckets to deny anyone except for the AWS Logging Services from setting s3 objects in the bucket to public-read, public-read-write, or any authenticated AWS user. actions : - type : set-statements statements : - Sid : \"DenyS3PublicObjectACL\" Effect : \"Deny\" Action : \"s3:PutObjectAcl\" NotPrincipal : \"AWS\" : - \"arn:aws:iam::858827067514:root\" - \"arn:aws:iam::193672423079:user/logs\" - \"arn:aws:iam::210876761215:user/logs\" - \"arn:aws:iam::127311923021:root\" - \"arn:aws:iam::156460612806:root\" Resource : - \"arn:aws:s3:::{bucket_name}/*\" - \"arn:aws:s3:::{bucket_name}\" Condition : StringEqualsIgnoreCaseIfExists : 's3:x-amz-acl' : - \"public-read\" - \"public-read-write\" - \"authenticated-read\" - name : s3-deny-public-object-acl-realtime resource : s3 mode : type : cloudtrail events : - CreateBucket - source : 's3.amazonaws.com' event : PutBucketPolicy ids : \"requestParameters.bucketName\" role : arn:aws:iam::{account_id}:role/Cloud_Custodian_Role timeout : 200 description : | Appends a bucket policy statement to an s3 bucket when it detects a policy change to the bucket or a new bucket is created which will deny anyone except some AWS logging services from setting s3 objects in the bucket to public-read, public-read-write, or any authenticated AWS user. actions : - type : set-statements statements : - Sid : \"DenyS3PublicObjectACL\" Effect : \"Deny\" Action : \"s3:PutObjectAcl\" NotPrincipal : \"AWS\" : - \"arn:aws:iam::858827067514:root\" - \"arn:aws:iam::193672423079:user/logs\" - \"arn:aws:iam::210876761215:user/logs\" - \"arn:aws:iam::127311923021:root\" - \"arn:aws:iam::156460612806:root\" Resource : - \"arn:aws:s3:::{bucket_name}/*\" - \"arn:aws:s3:::{bucket_name}\" Condition : StringEqualsIgnoreCaseIfExists : 's3:x-amz-acl' : - \"public-read\" - \"public-read-write\" - \"authenticated-read\"","title":"S3 - Block Public S3 Object ACLs {#s3denypublicobjectacls}"},{"location":"aws/examples/s3denypublicobjectacls/#s3denypublicobjectacls","text":"The following example policies will append a S3 bucket policy to every S3 bucket with a policy statement called DenyS3PublicObjectACL This will prevent any object in these buckets from being set to public-read, public-read-write ,or authenticated-read (Any authenticated AWS user, not just local to account). Being that S3 object permissions can be hard to track and restrict due to the huge amount of S3 objects usually present in accounts, this policy allows you to prevent the issue from occurring in the first place and helps maintain tighter S3 security to avoid accidentally setting sensitive S3 objects to public. Note the S3 bucket policy has a NotPrincipal statement with several \\\"AWS\\\": arns. These arns are owned by AWS and they are used for the AWS logging services for Log Delivery Group, ELB Logs, and Redshift Logs. The ELB and Redshift arns are region specific (sample includesus-east-1 and eu-west-1) so depending on the regions you are utilizing you might need to add or remove addtional arns found here: Redshift Log Accounts: https://docs.aws.amazon.com/redshift/latest/mgmt/db-auditing.html ELB Log Accounts: https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-access-logs.html policies : - name : s3-deny-public-object-acl-poll resource : s3 description : | Appends a bucket policy statement to all existing s3 buckets to deny anyone except for the AWS Logging Services from setting s3 objects in the bucket to public-read, public-read-write, or any authenticated AWS user. actions : - type : set-statements statements : - Sid : \"DenyS3PublicObjectACL\" Effect : \"Deny\" Action : \"s3:PutObjectAcl\" NotPrincipal : \"AWS\" : - \"arn:aws:iam::858827067514:root\" - \"arn:aws:iam::193672423079:user/logs\" - \"arn:aws:iam::210876761215:user/logs\" - \"arn:aws:iam::127311923021:root\" - \"arn:aws:iam::156460612806:root\" Resource : - \"arn:aws:s3:::{bucket_name}/*\" - \"arn:aws:s3:::{bucket_name}\" Condition : StringEqualsIgnoreCaseIfExists : 's3:x-amz-acl' : - \"public-read\" - \"public-read-write\" - \"authenticated-read\" - name : s3-deny-public-object-acl-realtime resource : s3 mode : type : cloudtrail events : - CreateBucket - source : 's3.amazonaws.com' event : PutBucketPolicy ids : \"requestParameters.bucketName\" role : arn:aws:iam::{account_id}:role/Cloud_Custodian_Role timeout : 200 description : | Appends a bucket policy statement to an s3 bucket when it detects a policy change to the bucket or a new bucket is created which will deny anyone except some AWS logging services from setting s3 objects in the bucket to public-read, public-read-write, or any authenticated AWS user. actions : - type : set-statements statements : - Sid : \"DenyS3PublicObjectACL\" Effect : \"Deny\" Action : \"s3:PutObjectAcl\" NotPrincipal : \"AWS\" : - \"arn:aws:iam::858827067514:root\" - \"arn:aws:iam::193672423079:user/logs\" - \"arn:aws:iam::210876761215:user/logs\" - \"arn:aws:iam::127311923021:root\" - \"arn:aws:iam::156460612806:root\" Resource : - \"arn:aws:s3:::{bucket_name}/*\" - \"arn:aws:s3:::{bucket_name}\" Condition : StringEqualsIgnoreCaseIfExists : 's3:x-amz-acl' : - \"public-read\" - \"public-read-write\" - \"authenticated-read\"","title":"S3 - Block Public S3 Object ACLs"},{"location":"aws/examples/s3encryption/","text":"S3 - Encryption \u00b6 Enable Bucket Encryption \u00b6 The following policy will enable bucket encryption on all s3 buckets. policies : - name : s3-set-bucket-encryption resource : s3 actions : - type : set-bucket-encryption crypto : AES256 enabled : True Remediate Existing \u00b6 Will scan all keys in the bucket for unencrypted keys and by default remediate them such that they are encrypted. policies : - name : s3-key-encryption resource : s3 actions : - type : encrypt-keys crypto : aws:kms Options \u00b6 crypto for determining the crypto mechanism, this can either be aws:kms or AES256 (default) key-id for specifying the customer KMS key to use for the SSE, if the crypto value passed is aws:kms the AWS default KMS key will be used instead. report-only generate reports of unencrypted keys in a bucket, but do not remediate them. Remediate Incoming \u00b6 Note: the set-bucket-encryption action is a much more effective way of enabling encryption on a bucket. Will scan all newly created objects and remediate them such that they are encrypted. policies : - name : s3-attach-encryption resource : s3 actions : - type : attach-encrypt role : arn:aws:iam::123456789012:role/my-role topic : arn:aws:sns::123456789012:my-topic Options \u00b6 role for the role the encrypting Lambda should run as (not necessary if you provide --assume-role on the command line). topic for the SNS topic to subscribe the Lambda to. If you set topic to default then we will reuse any existing SNS topic that specifies s3:ObjectCreated:* , or set one up if needed. If topic is missing, then we\\'ll attach via a bucket notification. Bucket Policy \u00b6 Note: the set-bucket-encryption action is a much more effective way of enabling encryption on a bucket. Adds an encryption required bucket policy and merges with extant policy statements. Note filters should be used to avoid hitting any buckets that are being written to by AWS services, as these do not write encrypted and will be blocked by this policy. policies : - name : s3-encryption-policy resource : s3 actions : - encryption-policy","title":"S3 - Encryption"},{"location":"aws/examples/s3encryption/#s3-encryption","text":"","title":"S3 - Encryption"},{"location":"aws/examples/s3encryption/#enable-bucket-encryption","text":"The following policy will enable bucket encryption on all s3 buckets. policies : - name : s3-set-bucket-encryption resource : s3 actions : - type : set-bucket-encryption crypto : AES256 enabled : True","title":"Enable Bucket Encryption"},{"location":"aws/examples/s3encryption/#remediate-existing","text":"Will scan all keys in the bucket for unencrypted keys and by default remediate them such that they are encrypted. policies : - name : s3-key-encryption resource : s3 actions : - type : encrypt-keys crypto : aws:kms","title":"Remediate Existing"},{"location":"aws/examples/s3encryption/#options","text":"crypto for determining the crypto mechanism, this can either be aws:kms or AES256 (default) key-id for specifying the customer KMS key to use for the SSE, if the crypto value passed is aws:kms the AWS default KMS key will be used instead. report-only generate reports of unencrypted keys in a bucket, but do not remediate them.","title":"Options"},{"location":"aws/examples/s3encryption/#remediate-incoming","text":"Note: the set-bucket-encryption action is a much more effective way of enabling encryption on a bucket. Will scan all newly created objects and remediate them such that they are encrypted. policies : - name : s3-attach-encryption resource : s3 actions : - type : attach-encrypt role : arn:aws:iam::123456789012:role/my-role topic : arn:aws:sns::123456789012:my-topic","title":"Remediate Incoming"},{"location":"aws/examples/s3encryption/#options_1","text":"role for the role the encrypting Lambda should run as (not necessary if you provide --assume-role on the command line). topic for the SNS topic to subscribe the Lambda to. If you set topic to default then we will reuse any existing SNS topic that specifies s3:ObjectCreated:* , or set one up if needed. If topic is missing, then we\\'ll attach via a bucket notification.","title":"Options"},{"location":"aws/examples/s3encryption/#bucket-policy","text":"Note: the set-bucket-encryption action is a much more effective way of enabling encryption on a bucket. Adds an encryption required bucket policy and merges with extant policy statements. Note filters should be used to avoid hitting any buckets that are being written to by AWS services, as these do not write encrypted and will be blocked by this policy. policies : - name : s3-encryption-policy resource : s3 actions : - encryption-policy","title":"Bucket Policy"},{"location":"aws/examples/s3globalgrants/","text":"S3 - Global Grants \u00b6 Scan buckets that allow for global access in their ACLs and delete the associated ACL permissions. policies : - name : s3-global-access resource : s3 filters : - type : global-grants actions : - type : delete-global-grants grantees : - \"http://acs.amazonaws.com/groups/global/AllUsers\" - \"http://acs.amazonaws.com/groups/global/AuthenticatedUsers\"","title":"S3 - Global Grants"},{"location":"aws/examples/s3globalgrants/#s3-global-grants","text":"Scan buckets that allow for global access in their ACLs and delete the associated ACL permissions. policies : - name : s3-global-access resource : s3 filters : - type : global-grants actions : - type : delete-global-grants grantees : - \"http://acs.amazonaws.com/groups/global/AllUsers\" - \"http://acs.amazonaws.com/groups/global/AuthenticatedUsers\"","title":"S3 - Global Grants"},{"location":"aws/examples/sagemakernotebookdeletepublicorunencrypted/","text":"SageMaker Notebook - Delete Public or Unencrypted \u00b6 The following example policy chain will detect if new SageMaker Notebooks are internet-facing (public) or unencrypted (not using KMS) at launch and then tag, stop, and delete the notebook and email the customer and cloud custodian admin. SageMaker Notebooks cannot be deleted unless they are in a Stopped status and they cannot be stopped until they are in a InService status which is why this needs a chain of policies that will trigger in order using tags and scheduled Lambda runs. policies : - name : sagemaker-notebook-auto-tag-user resource : sagemaker-notebook description : | When a new Sagemaker notebook is created tag the creators ID to CreatorName tag mode : type : cloudtrail events : - source : sagemaker.amazonaws.com event : CreateNotebookInstance ids : \"responseElements.notebookInstanceArn\" actions : - type : auto-tag-user tag : CreatorName - name : sagemaker-notebook-tag-non-compliant resource : sagemaker-notebook description : | When a new Sagemaker Notebook is created that is public or not encrypted it will get tagged for stopping and then deletion mode : type : cloudtrail events : - source : sagemaker.amazonaws.com event : CreateNotebookInstance ids : \"responseElements.notebookInstanceArn\" filters : - or : - \"DirectInternetAccess\" : \"Enabled\" - \"KmsKeyId\" : absent actions : - type : tag key : NonCompliantTag value : \"TRUE\" - name : sagemaker-notebook-stop-non-compliant resource : sagemaker-notebook description : | If a SageMaker Notebook is tagged with NonCompliantTag then it gets stopped and tagged with NonCompliantTagStopped for deletion mode : type : periodic schedule : \"rate(5 minutes)\" timeout : 45 filters : - \"tag:NonCompliantTag\" : \"TRUE\" - \"NotebookInstanceStatus\" : \"InService\" actions : - type : tag key : NonCompliantTagStopped value : \"TRUE\" - stop - name : sagemaker-notebook-delete-non-compliant resource : sagemaker-notebook description : | When a new Sagemaker notebook is tagged as non-compliant and in a stopped state, delete it mode : type : periodic schedule : \"rate(5 minutes)\" timeout : 45 filters : - \"tag:NonCompliantTagStopped\" : \"TRUE\" - \"NotebookInstanceStatus\" : \"Stopped\" actions : - delete - type : notify template : default.html priority_header : 1 subject : SageMaker Notebook - Deleted! - [custodian {{ account }} - {{ region }}] violation_desc : | Public facing (Non-VPC) OR Non-Encrypted Sagemaker Notebooks Are Prohibited! All Notebooks Must Be in VPC mode and encrypted! action_desc : | Actions Taken: Your SageMaker Notebook Instance has been deleted due to being non-compliant. Please create a new SageMaker notebook in VPC mode with KMS encryption enabled. to : - CloudCustodian@Company.com - resource-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/123456789123/cloud-custodian-mailer region : us-east-1","title":"SageMaker Notebook - Delete Public or Unencrypted"},{"location":"aws/examples/sagemakernotebookdeletepublicorunencrypted/#sagemaker-notebook-delete-public-or-unencrypted","text":"The following example policy chain will detect if new SageMaker Notebooks are internet-facing (public) or unencrypted (not using KMS) at launch and then tag, stop, and delete the notebook and email the customer and cloud custodian admin. SageMaker Notebooks cannot be deleted unless they are in a Stopped status and they cannot be stopped until they are in a InService status which is why this needs a chain of policies that will trigger in order using tags and scheduled Lambda runs. policies : - name : sagemaker-notebook-auto-tag-user resource : sagemaker-notebook description : | When a new Sagemaker notebook is created tag the creators ID to CreatorName tag mode : type : cloudtrail events : - source : sagemaker.amazonaws.com event : CreateNotebookInstance ids : \"responseElements.notebookInstanceArn\" actions : - type : auto-tag-user tag : CreatorName - name : sagemaker-notebook-tag-non-compliant resource : sagemaker-notebook description : | When a new Sagemaker Notebook is created that is public or not encrypted it will get tagged for stopping and then deletion mode : type : cloudtrail events : - source : sagemaker.amazonaws.com event : CreateNotebookInstance ids : \"responseElements.notebookInstanceArn\" filters : - or : - \"DirectInternetAccess\" : \"Enabled\" - \"KmsKeyId\" : absent actions : - type : tag key : NonCompliantTag value : \"TRUE\" - name : sagemaker-notebook-stop-non-compliant resource : sagemaker-notebook description : | If a SageMaker Notebook is tagged with NonCompliantTag then it gets stopped and tagged with NonCompliantTagStopped for deletion mode : type : periodic schedule : \"rate(5 minutes)\" timeout : 45 filters : - \"tag:NonCompliantTag\" : \"TRUE\" - \"NotebookInstanceStatus\" : \"InService\" actions : - type : tag key : NonCompliantTagStopped value : \"TRUE\" - stop - name : sagemaker-notebook-delete-non-compliant resource : sagemaker-notebook description : | When a new Sagemaker notebook is tagged as non-compliant and in a stopped state, delete it mode : type : periodic schedule : \"rate(5 minutes)\" timeout : 45 filters : - \"tag:NonCompliantTagStopped\" : \"TRUE\" - \"NotebookInstanceStatus\" : \"Stopped\" actions : - delete - type : notify template : default.html priority_header : 1 subject : SageMaker Notebook - Deleted! - [custodian {{ account }} - {{ region }}] violation_desc : | Public facing (Non-VPC) OR Non-Encrypted Sagemaker Notebooks Are Prohibited! All Notebooks Must Be in VPC mode and encrypted! action_desc : | Actions Taken: Your SageMaker Notebook Instance has been deleted due to being non-compliant. Please create a new SageMaker notebook in VPC mode with KMS encryption enabled. to : - CloudCustodian@Company.com - resource-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/123456789123/cloud-custodian-mailer region : us-east-1","title":"SageMaker Notebook - Delete Public or Unencrypted"},{"location":"aws/examples/securitygroupsaddpermission/","text":"Security Groups - add permission \u00b6 The following example policy will automatically create a CloudWatch Event Rule triggered Lambda function in your account and region which will be triggered anytime a user creates or modifies a security group. This provides near real-time auto-remediation action (typically within a minute) of the security group change. Having such a quick auto-remediation action greatly reduces any attack window! User defined rule is added to the filtered results. policies : - name : sg-add-permission resource : security-group description : | Add rule to a security group. Filter any security group that allows 0.0.0.0/0 or ::/0 (IPv6) ingress on port 22, remove the rule and add user defined sg rule mode : type : cloudtrail events : - source : ec2.amazonaws.com event : AuthorizeSecurityGroupIngress ids : \"responseElements.securityGroupRuleSet.items[].groupId\" - source : ec2.amazonaws.com event : RevokeSecurityGroupIngress ids : \"requestParameters.groupId\" filters : - or : - type : ingress IpProtocol : \"-1\" Ports : [ 22 ] Cidr : \"0.0.0.0/0\" - type : ingress IpProtocol : \"-1\" Ports : [ 22 ] CidrV6 : \"::/0\" actions : - type : set-permissions # remove the permission matched by a previous ingress filter. remove-ingress : matched # add a list of permissions to the group. add-ingress : # full syntax/parameters to authorize can be used. - IpPermissions : - IpProtocol : TCP FromPort : 22 ToPort : 22 IpRanges : - Description : Ops SSH Access CidrIp : \"1.1.1.1/32\" - Description : Security SSH Access CidrIp : \"2.2.2.2/32\"","title":"Security Groups - add permission {#securitygroupsaddpermission}"},{"location":"aws/examples/securitygroupsaddpermission/#securitygroupsaddpermission","text":"The following example policy will automatically create a CloudWatch Event Rule triggered Lambda function in your account and region which will be triggered anytime a user creates or modifies a security group. This provides near real-time auto-remediation action (typically within a minute) of the security group change. Having such a quick auto-remediation action greatly reduces any attack window! User defined rule is added to the filtered results. policies : - name : sg-add-permission resource : security-group description : | Add rule to a security group. Filter any security group that allows 0.0.0.0/0 or ::/0 (IPv6) ingress on port 22, remove the rule and add user defined sg rule mode : type : cloudtrail events : - source : ec2.amazonaws.com event : AuthorizeSecurityGroupIngress ids : \"responseElements.securityGroupRuleSet.items[].groupId\" - source : ec2.amazonaws.com event : RevokeSecurityGroupIngress ids : \"requestParameters.groupId\" filters : - or : - type : ingress IpProtocol : \"-1\" Ports : [ 22 ] Cidr : \"0.0.0.0/0\" - type : ingress IpProtocol : \"-1\" Ports : [ 22 ] CidrV6 : \"::/0\" actions : - type : set-permissions # remove the permission matched by a previous ingress filter. remove-ingress : matched # add a list of permissions to the group. add-ingress : # full syntax/parameters to authorize can be used. - IpPermissions : - IpProtocol : TCP FromPort : 22 ToPort : 22 IpRanges : - Description : Ops SSH Access CidrIp : \"1.1.1.1/32\" - Description : Security SSH Access CidrIp : \"2.2.2.2/32\"","title":"Security Groups - add permission"},{"location":"aws/examples/securitygroupsdetectremediate/","text":"Security Groups - Detect and Remediate Violations \u00b6 The following example policy will automatically create a CloudWatch Event Rule triggered Lambda function in your account and region which will be triggered anytime a user creates or modifies a security group. This provides near real-time auto-remediation action (typically within a minute) of the security group change. Having such a quick auto-remediation action greatly reduces any attack window! By notifying the customer who tried to perform the action it helps drive user behaviour and lets them know why the security group keeps reverting their 0.0.0.0/0 rule additions on them! policies : - name : high-risk-security-groups-remediate resource : security-group description : | Remove any rule from a security group that allows 0.0.0.0/0 or ::/0 (IPv6) ingress and notify the user who added the violating rule. mode : type : cloudtrail events : - source : ec2.amazonaws.com event : AuthorizeSecurityGroupIngress ids : \"responseElements.securityGroupRuleSet.items[].groupId\" - source : ec2.amazonaws.com event : AuthorizeSecurityGroupEgress ids : \"responseElements.securityGroupRuleSet.items[].groupId\" - source : ec2.amazonaws.com event : RevokeSecurityGroupEgress ids : \"requestParameters.groupId\" - source : ec2.amazonaws.com event : RevokeSecurityGroupIngress ids : \"requestParameters.groupId\" filters : - or : - type : ingress Cidr : value : \"0.0.0.0/0\" - type : ingress CidrV6 : value : \"::/0\" actions : - type : remove-permissions ingress : matched - type : notify template : default.html priority_header : 1 subject : \"Open Security Group Rule Created-[custodian {{ account }} - {{ region }}]\" violation_desc : \"Security Group(s) Which Had Rules Open To The World:\" action_desc : | \"Actions Taken: The Violating Security Group Rule Has Been Removed As It Typically Allows Direct Incoming Public Internet Traffic Access To Your Resource Which Violates Our Company's Cloud Security Policy. Please Refer To Our Company's Cloud Security Best Practices Documentation. If This Ingress Rule Is Required You May Contact The Security Team To Request An Exception.\" to : - CloudCustodian@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1 By including - event-owner in the notify\\'s to: field it tells Cloud Custodian to extract the id of the user who made the API call for the event and email them. Being that the above policy runs in a cloudtrail mode the API call\\'s metadata event is present which is why the example uses event-owner. If you were to remove the mode: statement on the example policy and run it in a poll mode instead you could change - event-owner to - resource-owner which would rely on the resources tags for a id or email to send the notification to as no API event would be available at that time. Note that the notify action requires the cloud custodian mailer tool to be installed.","title":"Security Groups - Detect and Remediate Violations {#securitygroupsdetectremediate}"},{"location":"aws/examples/securitygroupsdetectremediate/#securitygroupsdetectremediate","text":"The following example policy will automatically create a CloudWatch Event Rule triggered Lambda function in your account and region which will be triggered anytime a user creates or modifies a security group. This provides near real-time auto-remediation action (typically within a minute) of the security group change. Having such a quick auto-remediation action greatly reduces any attack window! By notifying the customer who tried to perform the action it helps drive user behaviour and lets them know why the security group keeps reverting their 0.0.0.0/0 rule additions on them! policies : - name : high-risk-security-groups-remediate resource : security-group description : | Remove any rule from a security group that allows 0.0.0.0/0 or ::/0 (IPv6) ingress and notify the user who added the violating rule. mode : type : cloudtrail events : - source : ec2.amazonaws.com event : AuthorizeSecurityGroupIngress ids : \"responseElements.securityGroupRuleSet.items[].groupId\" - source : ec2.amazonaws.com event : AuthorizeSecurityGroupEgress ids : \"responseElements.securityGroupRuleSet.items[].groupId\" - source : ec2.amazonaws.com event : RevokeSecurityGroupEgress ids : \"requestParameters.groupId\" - source : ec2.amazonaws.com event : RevokeSecurityGroupIngress ids : \"requestParameters.groupId\" filters : - or : - type : ingress Cidr : value : \"0.0.0.0/0\" - type : ingress CidrV6 : value : \"::/0\" actions : - type : remove-permissions ingress : matched - type : notify template : default.html priority_header : 1 subject : \"Open Security Group Rule Created-[custodian {{ account }} - {{ region }}]\" violation_desc : \"Security Group(s) Which Had Rules Open To The World:\" action_desc : | \"Actions Taken: The Violating Security Group Rule Has Been Removed As It Typically Allows Direct Incoming Public Internet Traffic Access To Your Resource Which Violates Our Company's Cloud Security Policy. Please Refer To Our Company's Cloud Security Best Practices Documentation. If This Ingress Rule Is Required You May Contact The Security Team To Request An Exception.\" to : - CloudCustodian@Company.com - event-owner transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1 By including - event-owner in the notify\\'s to: field it tells Cloud Custodian to extract the id of the user who made the API call for the event and email them. Being that the above policy runs in a cloudtrail mode the API call\\'s metadata event is present which is why the example uses event-owner. If you were to remove the mode: statement on the example policy and run it in a poll mode instead you could change - event-owner to - resource-owner which would rely on the resources tags for a id or email to send the notification to as no API event would be available at that time. Note that the notify action requires the cloud custodian mailer tool to be installed.","title":"Security Groups - Detect and Remediate Violations"},{"location":"aws/examples/tagcompliance/","text":"Tag Compliance Across Resources (EC2, ASG, ELB, S3, etc) \u00b6 Tag : Tags instances matching filters with a \\'c7n_status\\' tag by default and configurable value. Here\\'s an example of renaming an extant tag ``` yaml policies: - name: ec2-tag-instances resource: ec2 filters: - \"tag:CostCenter\": foobar actions: - type: tag key: CostCenter value: barrum ``` Report on Tag Compliance : ``` yaml policies: - name: ec2-tag-compliance resource: ec2 comment: | Report on total count of non compliant instances filters: - or: - \"tag:Owner\": absent - \"tag:CostCenter\": absent - \"tag:Project\": absent ``` Enforce Tag Compliance : All EC2 non-AutoScaling instances that do not have the three required tags (CostCenter, Owner, Project) will be stopped hourly after 2 days, and terminated after 5 days. ``` yaml policies: - name: ec2-tag-compliance-mark resource: ec2 comment: | Find all (non-ASG) instances that are not conformant to tagging policies, and tag them for stoppage in 1 days. filters: - \"tag:aws:autoscaling:groupName\": absent - \"tag:c7n_status\": absent - or: - \"tag:Owner\": absent - \"tag:CostCenter\": absent - \"tag:Project\": absent actions: - type: mark-for-op op: stop days: 1 - name: ec2-tag-compliance-unmark resource: ec2 comment: | Any instances which have previously been marked as non compliant with tag policies, that are now compliant should be unmarked as non-compliant. filters: - \"tag:Owner\": not-null - \"tag:CostCenter\": not-null - \"tag:Project\": not-null - \"tag:c7n_status\": not-null actions: - unmark - start - name: ec2-tag-compliance-stop resource: ec2 comment: | Stop all non autoscaling group instances previously marked for stoppage by today's date, and schedule termination in 2 days. Also verify that they continue to not meet tagging policies. filters: - \"tag:aws:autoscaling:groupName\": absent - type: marked-for-op op: stop - or: - \"tag:Owner\": absent - \"tag:CostCenter\": absent - \"tag:Project\": absent actions: - stop - type: mark-for-op op: terminate days: 3 - name: ec2-tag-compliance-terminate resource: ec2 comment: | Terminate all stopped instances marked for termination by today's date. filters: - \"tag:aws:autoscaling:groupName\": absent - type: marked-for-op op: terminate - or: - \"tag:Owner\": absent - \"tag:CostCenter\": absent - \"tag:Project\": absent actions: - type: terminate force: true - name: ec2-tag-compliance-nag-stop resource: ec2 comment: | Stop all instances marked for termination every hour starting 1 day before their termination. filters: - \"tag:aws:autoscaling:groupName\": absent - type: marked-for-op op: terminate skew: 1 - or: - \"tag:CostCenter\": absent - \"tag:Owner\": absent - \"tag:Project\": absent actions: - stop ``` Enforce Tag Compliance : All AutoScaling Groups that do not have the 5 required tags: (Resource Contact, Billing Cost Center, Environment, Resource Purpose, Business Unit) will be suspended and stopped once after 24 hours and then hourly after 2 days, and terminated after 3 days. We are using a custom tag named c7n_tag_compliance ``` yaml vars: tag-filters: &tag-compliance-filters - \"tag:Resource Contact\": absent - \"tag:Billing Cost Center\": absent - \"tag:Environment\": absent - \"tag:Resource Purpose\": absent - \"tag:Business Unit\": absent policies: - name: asg-tag-compliance-mark-new-day-0 resource: asg mode: type: cloudtrail events: - source: autoscaling.amazonaws.com event: CreateAutoScalingGroup ids: requestParameters.autoScalingGroupName description: | Marks newly launched non-compliant ASGs if missing any of the required tags also tags the owners. comments: | Your ASG and ASG instances do not have all the required tags on them and will be suspended in 24 hours if all the required tags have not been added. If tags are not made compliant after 3 days your ASG and instances will be deleted. filters: - \"tag:c7n_tag_compliance\": absent - or: *tag-compliance-filters actions: - type: mark-for-op tag: c7n_tag_compliance op: suspend days: 1 - type: auto-tag-user tag: CreatorName principal_id_tag: CreatorId - type: notify template: default.html priority_header: 1 subject: \"ASG - Missing Required Tags - [custodian {{ account }} - {{ region }}]\" violation_desc: | Your ASG and related servers are missing the required tags and is now marked for suspension if tags not added within 24 hours: action_desc: | \"Actions Taken: The ASG is marked to be suspended tomorrow if required tags don't get added to the ASG\" to: - CloudCustodian@Company.com - event-owner transport: type: sqs queue: https://sqs.us-east-1.amazonaws.com/XXXXXXXXXX/cloud-custodian-mailer region: us-east-1 - name: asg-tag-compliance-unmark resource: asg mode: type: periodic schedule: \"rate(5 minutes)\" description: | Any ASG which have previously been marked as non compliant with tag policies, that are now compliant should be unmarked as non-compliant. comments: | Thank you for adding the required tags to your ASG! It is now compliant and has been resumed if it was in a suspended state. filters: - \"tag:c7n_tag_compliance\": not-null - \"tag:Resource Contact\": not-null - \"tag:Billing Cost Center\": not-null - \"tag:Environment\": not-null - \"tag:Resource Purpose\": not-null - \"tag:Business Unit\": not-null actions: - type: unmark key: \"c7n_tag_compliance\" - resume - type: propagate-tags tags: - \"Resource Contact\" - \"Billing Cost Center\" - \"Environment\" - \"Resource Purpose\" - \"Business Unit\" - type: notify template: default.html priority_header: 1 subject: \"ASG - AutoScaling Group is now compliant - [custodian {{ account }} - {{ region }}]\" violation_desc: | \"Your ASG which was previously missing required tags is now compliant and won't be suspended:\" action_desc: | \"Actions Taken: The ASG has been unmarked for suspending as its now compliant with tags\" to: - resource-owner transport: type: sqs queue: https://sqs.us-east-1.amazonaws.com/XXXXXXXXXX/cloud-custodian-mailer region: us-east-1 - name: asg-tag-compliance-suspend-day-1 resource: asg mode: type: periodic schedule: \"rate(1 hour)\" description: | Suspends the ASG and resizes to 0 instances as the tags are still not compliant comments: | Your ASG has been suspended and resized to 0 instances as they do not have all the required tags on them. Please login to AWS and add the required tags to your ASG. Starting tomorrow hourly emails and suspensions will start occuring if the ASG is still not compliant. The following day your ASG will be deleted. filters: - or: *tag-compliance-filters - type: marked-for-op tag: c7n_tag_compliance op: suspend - type: value key: CreatedTime op: gte value_type: age value: 1 actions: - suspend - type: mark-for-op tag: c7n_tag_compliance op: delete days: 2 - type: notify template: default.html priority_header: 1 subject: \"ASG - !!!! Missing Required Tags !!!! - [custodian {{ account }} - {{ region }}]\" violation_desc: | \"Your ASG is missing the required tags and will be deleted in 2 days if still not compliant. Until then the ASG will be suspended every hour until tagged:\" action_desc: | \"Actions Taken: The ASG has been suspended as it doesn't meet tagging requirements. Please tag your ASG. ASG will be deleted in 2 days if not tagged.\" to: - resource-owner transport: type: sqs queue: https://sqs.us-east-1.amazonaws.com/XXXXXXXXXX/cloud-custodian-mailer region: us-east-1 - name: asg-tag-compliance-nag-stop-day-2 resource: asg mode: type: periodic schedule: \"rate(1 hour)\" description: | Suspends ASGT and stops ASG instances every hour starting 1 day before their deletion if tags are still not compliant. filters: - or: *tag-compliance-filters - type: marked-for-op tag: c7n_tag_compliance op: delete skew: 1 - type: value key: CreatedTime op: gte value_type: age value: 2 actions: - suspend - type: notify template: default.html priority_header: 1 subject: \"ASG - AutoScaling Group Suspended!!! - [custodian {{ account }} - {{ region }}]\" violation_desc: | \"Your ASG is missing the required tags and will be deleted in less than 1 day if still not compliant. Until then the ASG will be suspended every hour until tagged or Deleted:\" action_desc: | \"Actions Taken: The ASG has been suspended and set to 0 instances as it doesn't meet tagging requirements. Please tag your ASG now. ASG will be deleted in less than 1 day if not tagged.\" to: - resource-owner transport: type: sqs queue: https://sqs.us-east-1.amazonaws.com/XXXXXXXXXX/cloud-custodian-mailer region: us-east-1 - name: asg-tag-compliance-delete-day3 resource: asg mode: type: periodic schedule: \"rate(1 hour)\" description: | Delete all ASG marked for deletion by today's date. comments: | Your ASG has been deleted as it still did not meet the required tag compliance! filters: - or: *tag-compliance-filters - type: marked-for-op tag: c7n_tag_compliance op: delete - type: value key: CreatedTime op: gte value_type: age value: 3 actions: - type: delete force: true - type: notify template: default.html priority_header: 1 subject: \"ASG - ASG Deleted Due To Missing Tags - [custodian {{ account }} - {{ region }}]\" violation_desc: \"Your ASG is still missing the required tags :\" action_desc: | \"Actions Taken: The ASG has been Deleted. A new ASG will need to be launched to replace this if needed. Please make sure to tag the new ASG\" to: - CloudCustodian@Company.com - resource-owner transport: type: sqs queue: https://sqs.us-east-1.amazonaws.com/XXXXXXXXXX/cloud-custodian-mailer region: us-east-1 ```","title":"Tag Compliance Across Resources (EC2, ASG, ELB, S3, etc)"},{"location":"aws/examples/tagcompliance/#tag-compliance-across-resources-ec2-asg-elb-s3-etc","text":"Tag : Tags instances matching filters with a \\'c7n_status\\' tag by default and configurable value. Here\\'s an example of renaming an extant tag ``` yaml policies: - name: ec2-tag-instances resource: ec2 filters: - \"tag:CostCenter\": foobar actions: - type: tag key: CostCenter value: barrum ``` Report on Tag Compliance : ``` yaml policies: - name: ec2-tag-compliance resource: ec2 comment: | Report on total count of non compliant instances filters: - or: - \"tag:Owner\": absent - \"tag:CostCenter\": absent - \"tag:Project\": absent ``` Enforce Tag Compliance : All EC2 non-AutoScaling instances that do not have the three required tags (CostCenter, Owner, Project) will be stopped hourly after 2 days, and terminated after 5 days. ``` yaml policies: - name: ec2-tag-compliance-mark resource: ec2 comment: | Find all (non-ASG) instances that are not conformant to tagging policies, and tag them for stoppage in 1 days. filters: - \"tag:aws:autoscaling:groupName\": absent - \"tag:c7n_status\": absent - or: - \"tag:Owner\": absent - \"tag:CostCenter\": absent - \"tag:Project\": absent actions: - type: mark-for-op op: stop days: 1 - name: ec2-tag-compliance-unmark resource: ec2 comment: | Any instances which have previously been marked as non compliant with tag policies, that are now compliant should be unmarked as non-compliant. filters: - \"tag:Owner\": not-null - \"tag:CostCenter\": not-null - \"tag:Project\": not-null - \"tag:c7n_status\": not-null actions: - unmark - start - name: ec2-tag-compliance-stop resource: ec2 comment: | Stop all non autoscaling group instances previously marked for stoppage by today's date, and schedule termination in 2 days. Also verify that they continue to not meet tagging policies. filters: - \"tag:aws:autoscaling:groupName\": absent - type: marked-for-op op: stop - or: - \"tag:Owner\": absent - \"tag:CostCenter\": absent - \"tag:Project\": absent actions: - stop - type: mark-for-op op: terminate days: 3 - name: ec2-tag-compliance-terminate resource: ec2 comment: | Terminate all stopped instances marked for termination by today's date. filters: - \"tag:aws:autoscaling:groupName\": absent - type: marked-for-op op: terminate - or: - \"tag:Owner\": absent - \"tag:CostCenter\": absent - \"tag:Project\": absent actions: - type: terminate force: true - name: ec2-tag-compliance-nag-stop resource: ec2 comment: | Stop all instances marked for termination every hour starting 1 day before their termination. filters: - \"tag:aws:autoscaling:groupName\": absent - type: marked-for-op op: terminate skew: 1 - or: - \"tag:CostCenter\": absent - \"tag:Owner\": absent - \"tag:Project\": absent actions: - stop ``` Enforce Tag Compliance : All AutoScaling Groups that do not have the 5 required tags: (Resource Contact, Billing Cost Center, Environment, Resource Purpose, Business Unit) will be suspended and stopped once after 24 hours and then hourly after 2 days, and terminated after 3 days. We are using a custom tag named c7n_tag_compliance ``` yaml vars: tag-filters: &tag-compliance-filters - \"tag:Resource Contact\": absent - \"tag:Billing Cost Center\": absent - \"tag:Environment\": absent - \"tag:Resource Purpose\": absent - \"tag:Business Unit\": absent policies: - name: asg-tag-compliance-mark-new-day-0 resource: asg mode: type: cloudtrail events: - source: autoscaling.amazonaws.com event: CreateAutoScalingGroup ids: requestParameters.autoScalingGroupName description: | Marks newly launched non-compliant ASGs if missing any of the required tags also tags the owners. comments: | Your ASG and ASG instances do not have all the required tags on them and will be suspended in 24 hours if all the required tags have not been added. If tags are not made compliant after 3 days your ASG and instances will be deleted. filters: - \"tag:c7n_tag_compliance\": absent - or: *tag-compliance-filters actions: - type: mark-for-op tag: c7n_tag_compliance op: suspend days: 1 - type: auto-tag-user tag: CreatorName principal_id_tag: CreatorId - type: notify template: default.html priority_header: 1 subject: \"ASG - Missing Required Tags - [custodian {{ account }} - {{ region }}]\" violation_desc: | Your ASG and related servers are missing the required tags and is now marked for suspension if tags not added within 24 hours: action_desc: | \"Actions Taken: The ASG is marked to be suspended tomorrow if required tags don't get added to the ASG\" to: - CloudCustodian@Company.com - event-owner transport: type: sqs queue: https://sqs.us-east-1.amazonaws.com/XXXXXXXXXX/cloud-custodian-mailer region: us-east-1 - name: asg-tag-compliance-unmark resource: asg mode: type: periodic schedule: \"rate(5 minutes)\" description: | Any ASG which have previously been marked as non compliant with tag policies, that are now compliant should be unmarked as non-compliant. comments: | Thank you for adding the required tags to your ASG! It is now compliant and has been resumed if it was in a suspended state. filters: - \"tag:c7n_tag_compliance\": not-null - \"tag:Resource Contact\": not-null - \"tag:Billing Cost Center\": not-null - \"tag:Environment\": not-null - \"tag:Resource Purpose\": not-null - \"tag:Business Unit\": not-null actions: - type: unmark key: \"c7n_tag_compliance\" - resume - type: propagate-tags tags: - \"Resource Contact\" - \"Billing Cost Center\" - \"Environment\" - \"Resource Purpose\" - \"Business Unit\" - type: notify template: default.html priority_header: 1 subject: \"ASG - AutoScaling Group is now compliant - [custodian {{ account }} - {{ region }}]\" violation_desc: | \"Your ASG which was previously missing required tags is now compliant and won't be suspended:\" action_desc: | \"Actions Taken: The ASG has been unmarked for suspending as its now compliant with tags\" to: - resource-owner transport: type: sqs queue: https://sqs.us-east-1.amazonaws.com/XXXXXXXXXX/cloud-custodian-mailer region: us-east-1 - name: asg-tag-compliance-suspend-day-1 resource: asg mode: type: periodic schedule: \"rate(1 hour)\" description: | Suspends the ASG and resizes to 0 instances as the tags are still not compliant comments: | Your ASG has been suspended and resized to 0 instances as they do not have all the required tags on them. Please login to AWS and add the required tags to your ASG. Starting tomorrow hourly emails and suspensions will start occuring if the ASG is still not compliant. The following day your ASG will be deleted. filters: - or: *tag-compliance-filters - type: marked-for-op tag: c7n_tag_compliance op: suspend - type: value key: CreatedTime op: gte value_type: age value: 1 actions: - suspend - type: mark-for-op tag: c7n_tag_compliance op: delete days: 2 - type: notify template: default.html priority_header: 1 subject: \"ASG - !!!! Missing Required Tags !!!! - [custodian {{ account }} - {{ region }}]\" violation_desc: | \"Your ASG is missing the required tags and will be deleted in 2 days if still not compliant. Until then the ASG will be suspended every hour until tagged:\" action_desc: | \"Actions Taken: The ASG has been suspended as it doesn't meet tagging requirements. Please tag your ASG. ASG will be deleted in 2 days if not tagged.\" to: - resource-owner transport: type: sqs queue: https://sqs.us-east-1.amazonaws.com/XXXXXXXXXX/cloud-custodian-mailer region: us-east-1 - name: asg-tag-compliance-nag-stop-day-2 resource: asg mode: type: periodic schedule: \"rate(1 hour)\" description: | Suspends ASGT and stops ASG instances every hour starting 1 day before their deletion if tags are still not compliant. filters: - or: *tag-compliance-filters - type: marked-for-op tag: c7n_tag_compliance op: delete skew: 1 - type: value key: CreatedTime op: gte value_type: age value: 2 actions: - suspend - type: notify template: default.html priority_header: 1 subject: \"ASG - AutoScaling Group Suspended!!! - [custodian {{ account }} - {{ region }}]\" violation_desc: | \"Your ASG is missing the required tags and will be deleted in less than 1 day if still not compliant. Until then the ASG will be suspended every hour until tagged or Deleted:\" action_desc: | \"Actions Taken: The ASG has been suspended and set to 0 instances as it doesn't meet tagging requirements. Please tag your ASG now. ASG will be deleted in less than 1 day if not tagged.\" to: - resource-owner transport: type: sqs queue: https://sqs.us-east-1.amazonaws.com/XXXXXXXXXX/cloud-custodian-mailer region: us-east-1 - name: asg-tag-compliance-delete-day3 resource: asg mode: type: periodic schedule: \"rate(1 hour)\" description: | Delete all ASG marked for deletion by today's date. comments: | Your ASG has been deleted as it still did not meet the required tag compliance! filters: - or: *tag-compliance-filters - type: marked-for-op tag: c7n_tag_compliance op: delete - type: value key: CreatedTime op: gte value_type: age value: 3 actions: - type: delete force: true - type: notify template: default.html priority_header: 1 subject: \"ASG - ASG Deleted Due To Missing Tags - [custodian {{ account }} - {{ region }}]\" violation_desc: \"Your ASG is still missing the required tags :\" action_desc: | \"Actions Taken: The ASG has been Deleted. A new ASG will need to be launched to replace this if needed. Please make sure to tag the new ASG\" to: - CloudCustodian@Company.com - resource-owner transport: type: sqs queue: https://sqs.us-east-1.amazonaws.com/XXXXXXXXXX/cloud-custodian-mailer region: us-east-1 ```","title":"Tag Compliance Across Resources (EC2, ASG, ELB, S3, etc)"},{"location":"aws/examples/vpcflowlog/","text":"VPC - Flow Log Configuration Check \u00b6 The following example policy will find any VPC Flow Log in your region that is not properly configured and notify a group via email. Ensuring VPC Flow Logs are enabled and setup properly is very important for compliance and security. Flow Logs themselves capture IP traffic information to and from network interfaces and can be used for troubleshooting traffic issues and monitoring network traffic as a security tool. See more info on example dashboarding of VPC Flow Logs using Elasticsearch and Kibana https://aws.amazon.com/blogs/aws/cloudwatch-logs-subscription-consumer-elasticsearch-kibana-dashboards/ policies : - name : vpc-flow-log-check resource : vpc filters : - not : - type : flow-logs enabled : true set-op : or op : equal traffic-type : all log-group : myVPCFlowLogs status : active actions : - type : notify template : default.html priority_header : 1 subject : \"Cloud Custodian - VPC Flow Log(s) Not Setup Properly\" violation_desc : \"The Following Flow Logs Are Invalid:\" action_desc : \"Actions Taken: Notification Only\" to : - CloudCustodian@Company.com transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1 Note that the notify action requires the cloud custodian mailer tool to be installed.","title":"VPC - Flow Log Configuration Check"},{"location":"aws/examples/vpcflowlog/#vpc-flow-log-configuration-check","text":"The following example policy will find any VPC Flow Log in your region that is not properly configured and notify a group via email. Ensuring VPC Flow Logs are enabled and setup properly is very important for compliance and security. Flow Logs themselves capture IP traffic information to and from network interfaces and can be used for troubleshooting traffic issues and monitoring network traffic as a security tool. See more info on example dashboarding of VPC Flow Logs using Elasticsearch and Kibana https://aws.amazon.com/blogs/aws/cloudwatch-logs-subscription-consumer-elasticsearch-kibana-dashboards/ policies : - name : vpc-flow-log-check resource : vpc filters : - not : - type : flow-logs enabled : true set-op : or op : equal traffic-type : all log-group : myVPCFlowLogs status : active actions : - type : notify template : default.html priority_header : 1 subject : \"Cloud Custodian - VPC Flow Log(s) Not Setup Properly\" violation_desc : \"The Following Flow Logs Are Invalid:\" action_desc : \"Actions Taken: Notification Only\" to : - CloudCustodian@Company.com transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/12345678900/cloud-custodian-mailer region : us-east-1 Note that the notify action requires the cloud custodian mailer tool to be installed.","title":"VPC - Flow Log Configuration Check"},{"location":"aws/examples/vpcpeeringcrossaccount/","text":"VPC - Notify On Invalid External Peering Connections \u00b6 The following example policy will automatically create a CloudWatch Event Rule triggered Lambda function in your account and region which will be triggered anytime a new VPC Peering Connection is created. The policy will then check to see if the peering accepter account id and peering requester account id are both AWS account numbers owned by you. This is done by having the account ids from the CloudWatch Event compared against a S3 hosted CSV of your AWS account numbers. You must provide the CSV file of your account numbers or you can hardcode your account numbers into the policy if you have a small static number of accounts. The CSV would look something like: \\\"271212121293\\\",\\\"171717171716\\\",\\\"27272727272724\\\",\\\"121212112128\\\",\\\"118118118118\\\" policies : - name : vpc-peering-cross-account-checker-real-time resource : peering-connection mode : type : cloudtrail events : - source : ec2.amazonaws.com event : CreateVpcPeeringConnection ids : 'responseElements.vpcPeeringConnection.vpcPeeringConnectionId' timeout : 90 memory : 256 role : arn:aws:iam::{account_id}:role/Cloud_Custodian_EC2_Lambda_Role description : | When a new peering connection is created the Accepter and Requester account numbers are compared and if they aren't both internally owned accounts then the cloud and security teams are notified to investigate and delete the peering connection. filters : - or : - type : event key : \"detail.responseElements.vpcPeeringConnection.accepterVpcInfo.ownerId\" op : not-in value_from : url : s3://s3bucketname/AccountNumbers.csv format : csv2dict - type : event key : \"detail.responseElements.vpcPeeringConnection.requesterVpcInfo.ownerId\" op : not-in value_from : url : s3://s3bucketname/AccountNumbers.csv format : csv2dict actions : - type : notify template : default.html priority_header : 1 subject : \"ATTN!! External VPC Peering Violation [custodian {{ account }} - {{ region }}]\" violation_desc : | VPC Peers are not to be setup to or from external AWS accounts so this policy verifies that both the source and destination accounts are internally owned. If the peering connection is going to/from an external account, this policy will email the Cloud and Security Teams as well as the customer. action_desc : | Please investigate this VPC Peering connection and terminate it if it's connecting to a unapproved external VPC to : - CloudTeam@company.com - security@company.com - resource-contact transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 The following policy runs in pull mode and will scan all existing vpc peering connections to see if any of them have external connections. You will notice that the filters syntax to pull the accepter and requester ids is slightly different between these 2 policies. The first one pulls the information from the CloudTrail API event metadata and the second policy uses information pulled back from a describe_vpc_peering_connections API call. Using both policies allows you to check both new and existing peering connections. policies : - name : vpc-peering-cross-account-checker-pull resource : peering-connection description : | Checks existing VPC Peering Connections to see if the Accepter and Requester account numbers are both internally owned accounts. If a connection is going to/from an external AWS account then the cloud and security teams are notified of the violating peering connection. filters : - or : - type : value key : \"RequesterVpcInfo.OwnerId\" op : not-in value_from : url : s3://s3bucketname/AccountNumbers.csv format : csv2dict - type : value key : \"AccepterVpcInfo.OwnerId\" op : not-in value_from : url : s3://s3bucketname/AccountNumbers.csv format : csv2dict actions : - type : notify template : default.html priority_header : 1 subject : \"ATTN!! External VPC Peering Violation [custodian {{ account }} - {{ region }}]\" violation_desc : | VPC Peers are not to be setup to or from external AWS accounts so this policy verifies that both the source and destination accounts are internally owned. If the peering connection is going to/from an external account, this policy will email the Cloud and Security Teams as well as the customer. action_desc : | Please investigate this VPC Peering connection and terminate it if it's connecting to a unapproved external VPC to : - CloudTeam@company.com - security@company.com - resource-contact transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 Note that for email delivery to work with the notify action, the cloud custodian mailer tool must be installed, configured, and running. See https://github.com/cloud-custodian/cloud-custodian/tree/master/tools/c7n_mailer for docs.","title":"VPC - Notify On Invalid External Peering Connections"},{"location":"aws/examples/vpcpeeringcrossaccount/#vpc-notify-on-invalid-external-peering-connections","text":"The following example policy will automatically create a CloudWatch Event Rule triggered Lambda function in your account and region which will be triggered anytime a new VPC Peering Connection is created. The policy will then check to see if the peering accepter account id and peering requester account id are both AWS account numbers owned by you. This is done by having the account ids from the CloudWatch Event compared against a S3 hosted CSV of your AWS account numbers. You must provide the CSV file of your account numbers or you can hardcode your account numbers into the policy if you have a small static number of accounts. The CSV would look something like: \\\"271212121293\\\",\\\"171717171716\\\",\\\"27272727272724\\\",\\\"121212112128\\\",\\\"118118118118\\\" policies : - name : vpc-peering-cross-account-checker-real-time resource : peering-connection mode : type : cloudtrail events : - source : ec2.amazonaws.com event : CreateVpcPeeringConnection ids : 'responseElements.vpcPeeringConnection.vpcPeeringConnectionId' timeout : 90 memory : 256 role : arn:aws:iam::{account_id}:role/Cloud_Custodian_EC2_Lambda_Role description : | When a new peering connection is created the Accepter and Requester account numbers are compared and if they aren't both internally owned accounts then the cloud and security teams are notified to investigate and delete the peering connection. filters : - or : - type : event key : \"detail.responseElements.vpcPeeringConnection.accepterVpcInfo.ownerId\" op : not-in value_from : url : s3://s3bucketname/AccountNumbers.csv format : csv2dict - type : event key : \"detail.responseElements.vpcPeeringConnection.requesterVpcInfo.ownerId\" op : not-in value_from : url : s3://s3bucketname/AccountNumbers.csv format : csv2dict actions : - type : notify template : default.html priority_header : 1 subject : \"ATTN!! External VPC Peering Violation [custodian {{ account }} - {{ region }}]\" violation_desc : | VPC Peers are not to be setup to or from external AWS accounts so this policy verifies that both the source and destination accounts are internally owned. If the peering connection is going to/from an external account, this policy will email the Cloud and Security Teams as well as the customer. action_desc : | Please investigate this VPC Peering connection and terminate it if it's connecting to a unapproved external VPC to : - CloudTeam@company.com - security@company.com - resource-contact transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 The following policy runs in pull mode and will scan all existing vpc peering connections to see if any of them have external connections. You will notice that the filters syntax to pull the accepter and requester ids is slightly different between these 2 policies. The first one pulls the information from the CloudTrail API event metadata and the second policy uses information pulled back from a describe_vpc_peering_connections API call. Using both policies allows you to check both new and existing peering connections. policies : - name : vpc-peering-cross-account-checker-pull resource : peering-connection description : | Checks existing VPC Peering Connections to see if the Accepter and Requester account numbers are both internally owned accounts. If a connection is going to/from an external AWS account then the cloud and security teams are notified of the violating peering connection. filters : - or : - type : value key : \"RequesterVpcInfo.OwnerId\" op : not-in value_from : url : s3://s3bucketname/AccountNumbers.csv format : csv2dict - type : value key : \"AccepterVpcInfo.OwnerId\" op : not-in value_from : url : s3://s3bucketname/AccountNumbers.csv format : csv2dict actions : - type : notify template : default.html priority_header : 1 subject : \"ATTN!! External VPC Peering Violation [custodian {{ account }} - {{ region }}]\" violation_desc : | VPC Peers are not to be setup to or from external AWS accounts so this policy verifies that both the source and destination accounts are internally owned. If the peering connection is going to/from an external account, this policy will email the Cloud and Security Teams as well as the customer. action_desc : | Please investigate this VPC Peering connection and terminate it if it's connecting to a unapproved external VPC to : - CloudTeam@company.com - security@company.com - resource-contact transport : type : sqs queue : https://sqs.us-east-1.amazonaws.com/XXXXXXXXXXXXXXX/cloud-custodian-mailer region : us-east-1 Note that for email delivery to work with the notify action, the cloud custodian mailer tool must be installed, configured, and running. See https://github.com/cloud-custodian/cloud-custodian/tree/master/tools/c7n_mailer for docs.","title":"VPC - Notify On Invalid External Peering Connections"},{"location":"aws/topics/","text":"AWS Topics \u00b6 Deeper dives on custodian integration with particular services or common best practices.","title":"AWS Topics"},{"location":"aws/topics/#aws-topics","text":"Deeper dives on custodian integration with particular services or common best practices.","title":"AWS Topics"},{"location":"aws/topics/config/","text":"AWS Config \u00b6 Custodian has deep integration with config, a custodian policy: Can be deployed as config-rule for any resource type supported by config. Can use config as resource database instead of querying service describe apis. Custodian supports server side querying resources with Config\\'s SQL expression language. Can filter resources based on their compliance with one or more config rules. Can be deployed as a config-poll-rule against any resource type supported by cloudformation. Custodian does the legwork of normalizing the resource description from config\\'s idiosyncratic format to one that looks like describe api call output, so policies can utilize config with a simple change of source or execution mode. Config Source \u00b6 You can use config as a cmdb of resources instead of doing describes by adding source: config to any policy on a resource type that config supports. This also supports doing arbitrary sql selects (via config\\'s select resources api) on the resources in addition to the standard custodian filters. policies : - name : dynamdb-checker resource : aws.dynamodb-table source : config query : - clause : \"resourceId = 'MyTable'\" filters : - SSEDescription : absent Config Rule \u00b6 Custodian is also one of the easiest ways of authoring custom config rules. For any config supported resource, you can just add a mode with type:config-rule to have the policy deployed as a custom config rule lambda. policies : - name : ec2-checker resource : aws.ec2 mode : type : config-rule role : MyLambdaConfigRole filters : - type : image tag : \"NotSupported\" value : absent Filter \u00b6 Custodian also supports filtering resources based on their compliance with other config-rules. policies : - name : ec2-remediate-non-compliant resource : aws.ec2 filters : - type : config-compliance rules : [ my_other_config_rule , some_other_rule ] states : [ NON_COMPLIANT ] actions : - stop Config Poll Rule \u00b6 For resources not supported natively by AWS Config, an execution mode of type: config-poll-rule can be used for any resource supported by CloudFormation. This is effectively a periodic policy that queries the resource\\'s service api and filters resources to evaluate compliance/non-compliance and then records results to AWS Config. CloudFormation resources are only partially supported by AWS Config, and are not supported for [source: config]{.title-ref} nor do they support resource timeline or resource attributes. policies : - name : kinesis-one-stream resource : aws.kinesis mode : type : config-poll-rule role : custodian-config-role schedule : Three_Hours filters : - tag:App : Dev","title":"AWS Config"},{"location":"aws/topics/config/#aws-config","text":"Custodian has deep integration with config, a custodian policy: Can be deployed as config-rule for any resource type supported by config. Can use config as resource database instead of querying service describe apis. Custodian supports server side querying resources with Config\\'s SQL expression language. Can filter resources based on their compliance with one or more config rules. Can be deployed as a config-poll-rule against any resource type supported by cloudformation. Custodian does the legwork of normalizing the resource description from config\\'s idiosyncratic format to one that looks like describe api call output, so policies can utilize config with a simple change of source or execution mode.","title":"AWS Config"},{"location":"aws/topics/config/#config-source","text":"You can use config as a cmdb of resources instead of doing describes by adding source: config to any policy on a resource type that config supports. This also supports doing arbitrary sql selects (via config\\'s select resources api) on the resources in addition to the standard custodian filters. policies : - name : dynamdb-checker resource : aws.dynamodb-table source : config query : - clause : \"resourceId = 'MyTable'\" filters : - SSEDescription : absent","title":"Config Source"},{"location":"aws/topics/config/#config-rule","text":"Custodian is also one of the easiest ways of authoring custom config rules. For any config supported resource, you can just add a mode with type:config-rule to have the policy deployed as a custom config rule lambda. policies : - name : ec2-checker resource : aws.ec2 mode : type : config-rule role : MyLambdaConfigRole filters : - type : image tag : \"NotSupported\" value : absent","title":"Config Rule"},{"location":"aws/topics/config/#filter","text":"Custodian also supports filtering resources based on their compliance with other config-rules. policies : - name : ec2-remediate-non-compliant resource : aws.ec2 filters : - type : config-compliance rules : [ my_other_config_rule , some_other_rule ] states : [ NON_COMPLIANT ] actions : - stop","title":"Filter"},{"location":"aws/topics/config/#config-poll-rule","text":"For resources not supported natively by AWS Config, an execution mode of type: config-poll-rule can be used for any resource supported by CloudFormation. This is effectively a periodic policy that queries the resource\\'s service api and filters resources to evaluate compliance/non-compliance and then records results to AWS Config. CloudFormation resources are only partially supported by AWS Config, and are not supported for [source: config]{.title-ref} nor do they support resource timeline or resource attributes. policies : - name : kinesis-one-stream resource : aws.kinesis mode : type : config-poll-rule role : custodian-config-role schedule : Three_Hours filters : - tag:App : Dev","title":"Config Poll Rule"},{"location":"aws/topics/securityhub/","text":"Security Hub \u00b6 Security Hub gives a centralized dashboard of security events across data feeds from many different tools. Custodian supports deep integration with security hub to support the following use cases. post and update findings on any resource type to security hub See post-finding action <aws.common.actions.post-finding> {.interpreted-text role=\"ref\"} filtering resources on the basis of extant findings See finding filter <aws.common.filters.finding> {.interpreted-text role=\"ref\"} lambda execution mode triggered on ingestion of security hub findings [mode: hub-finding]{.title-ref} lambda execution mode as a custom action in the security hub ui. Note custodian security hub actions work against both findings and insights. [mode: hub-action]{.title-ref} Getting Started \u00b6 To post findings with cloud-custodian (v0.9+) you need to enable the product integration from the security hub console. From the left side menu click integrations, search for Cloud Custodian, and enable the Cloud Custodian integration. Modes \u00b6 Execute a policy lambda in response to security hub finding event or action. This policy will provision a lambda and security hub custom action. The action can be invoked on a finding or insight result (collection of findings). The action name will have the resource type prefixed as custodian actions are resource specific. policies : - name : remediate resource : aws.ec2 mode : type : hub-action role : MyRole actions : - snapshot - type : set-instance-profile name : null - stop This policy will provision a lambda that will process high alert findings from guard duty (note custodian also has support for guard duty events directly). policies : - name : remediate resource : aws.iam mode : type : hub-finding role : MyRole filters : - type : event key : detail.findings[].ProductFields.aws/securityhub/ProductName value : GuardDuty - type : event key : detail.findings[].ProductFields.aws/securityhub/ProductName value : GuardDuty actions : - remove-keys Note, for custodian we support additional resources in the finding via the Other resource, so these modes work for resources that security hub doesn\\'t natively support. https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-cloudwatch-events.html The Amazon Security Finding Format is documented at https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-findings-format.html Cloud Custodian ASFF Attribute Rationale derived from execution context: AwsAccountId Direct account_id metadata.json Confidence User supplied value in policy.actions.compliance_status policy configuration metadata.json Confidence User supplied value in policy.actions.confidence policy configuration metadata.json Criticality User supplied value in policy.actions.criticality policy configuration derived value: current_time aka Now CreatedAt Timestamp when the finding record was composed for the first time metadata.json Description User supplied value in policy.actions.description policy configuration metadata.json policy.name GeneratorId Policy is equivilent to a Rule digest of region, account_id, policy Id Enforces uniqueness by contents, and Resource Arn/Id combinding policy attributes with resource attributes metadata.json policy.resource_type ProductFields.resource Direct fixed value: CloudCustodian ProductFields.ProviderName Name of project derived value from executable: ProductFields.ProviderVersioN Direct version fixed value: ACTIVE RecordState Always ACTIVE at Create/Update time metadata.json Recommendation.Text User supplied value in policy.actions.recommendation policy configuration metadata.json Recommendation.Url User supplied value in policy.actions.recommendation_url policy configuration resources.json attributes Resources.Details.\\${Type}.* Direct Mapping from columns in Describe output resources.json Arn Resources.Id Direct resource.json Tags Resources.Tags Direct metadata.json policy.resource_type Resources.Type Direct Hardcoded Fixed Value: SchemaVersion Only Valid value \\\"2018-10-08\\\" metadata.json Severity.Label User supplied value in policy.actions.severity_label policy configuration metadata.json Severity.Normalized User supplied value in policy.actions.severity_normalized policy configuration metadata.json policy.name Title Primary Identifer metadata.json policy.actions.types Types User supplied value in policy configuration derived value: current_time aka Now UpdatedAt Timestamp when the finding record update is composed : Mapping data in Cloud Custodian into the Amazon Security Finding Format (ASFF)","title":"Security Hub {#aws-securityhub}"},{"location":"aws/topics/securityhub/#aws-securityhub","text":"Security Hub gives a centralized dashboard of security events across data feeds from many different tools. Custodian supports deep integration with security hub to support the following use cases. post and update findings on any resource type to security hub See post-finding action <aws.common.actions.post-finding> {.interpreted-text role=\"ref\"} filtering resources on the basis of extant findings See finding filter <aws.common.filters.finding> {.interpreted-text role=\"ref\"} lambda execution mode triggered on ingestion of security hub findings [mode: hub-finding]{.title-ref} lambda execution mode as a custom action in the security hub ui. Note custodian security hub actions work against both findings and insights. [mode: hub-action]{.title-ref}","title":"Security Hub"},{"location":"aws/topics/securityhub/#getting-started","text":"To post findings with cloud-custodian (v0.9+) you need to enable the product integration from the security hub console. From the left side menu click integrations, search for Cloud Custodian, and enable the Cloud Custodian integration.","title":"Getting Started"},{"location":"aws/topics/securityhub/#modes","text":"Execute a policy lambda in response to security hub finding event or action. This policy will provision a lambda and security hub custom action. The action can be invoked on a finding or insight result (collection of findings). The action name will have the resource type prefixed as custodian actions are resource specific. policies : - name : remediate resource : aws.ec2 mode : type : hub-action role : MyRole actions : - snapshot - type : set-instance-profile name : null - stop This policy will provision a lambda that will process high alert findings from guard duty (note custodian also has support for guard duty events directly). policies : - name : remediate resource : aws.iam mode : type : hub-finding role : MyRole filters : - type : event key : detail.findings[].ProductFields.aws/securityhub/ProductName value : GuardDuty - type : event key : detail.findings[].ProductFields.aws/securityhub/ProductName value : GuardDuty actions : - remove-keys Note, for custodian we support additional resources in the finding via the Other resource, so these modes work for resources that security hub doesn\\'t natively support. https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-cloudwatch-events.html The Amazon Security Finding Format is documented at https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-findings-format.html Cloud Custodian ASFF Attribute Rationale derived from execution context: AwsAccountId Direct account_id metadata.json Confidence User supplied value in policy.actions.compliance_status policy configuration metadata.json Confidence User supplied value in policy.actions.confidence policy configuration metadata.json Criticality User supplied value in policy.actions.criticality policy configuration derived value: current_time aka Now CreatedAt Timestamp when the finding record was composed for the first time metadata.json Description User supplied value in policy.actions.description policy configuration metadata.json policy.name GeneratorId Policy is equivilent to a Rule digest of region, account_id, policy Id Enforces uniqueness by contents, and Resource Arn/Id combinding policy attributes with resource attributes metadata.json policy.resource_type ProductFields.resource Direct fixed value: CloudCustodian ProductFields.ProviderName Name of project derived value from executable: ProductFields.ProviderVersioN Direct version fixed value: ACTIVE RecordState Always ACTIVE at Create/Update time metadata.json Recommendation.Text User supplied value in policy.actions.recommendation policy configuration metadata.json Recommendation.Url User supplied value in policy.actions.recommendation_url policy configuration resources.json attributes Resources.Details.\\${Type}.* Direct Mapping from columns in Describe output resources.json Arn Resources.Id Direct resource.json Tags Resources.Tags Direct metadata.json policy.resource_type Resources.Type Direct Hardcoded Fixed Value: SchemaVersion Only Valid value \\\"2018-10-08\\\" metadata.json Severity.Label User supplied value in policy.actions.severity_label policy configuration metadata.json Severity.Normalized User supplied value in policy.actions.severity_normalized policy configuration metadata.json policy.name Title Primary Identifer metadata.json policy.actions.types Types User supplied value in policy configuration derived value: current_time aka Now UpdatedAt Timestamp when the finding record update is composed : Mapping data in Cloud Custodian into the Amazon Security Finding Format (ASFF)","title":"Modes"},{"location":"aws/topics/ssm/","text":"AWS Systems Manager \u00b6 EC2 Systems Manager \u00b6 Cloud custodian enables several use cases with SSM. Filtering instances on the basis of their association to SSM. See ssm filter <aws.ec2.filters.ssm> Executing actions on instances with an ssm agent installed. See ec2 send command action <aws.ec2.actions.send-command> {.interpreted-text role=\"ref\"} Ops Center \u00b6 AWS Systems Manager Ops Center is an operations dashboard that provides a central location to collect, triage, and remediate operation issues related to resource in an AWS account. It automatically pulls in contextual information from Cloud Trail and AWS Config to enable easier triage. For more details on Ops Center see. https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html Cloud Custodian has deep support for integrating with SSM Ops Center. With custodian you can. Filter resources by extant ops items associated to them. See ops-item filter <aws.common.filters.ops-item> {.interpreted-text role=\"ref\"} Post new ops items for a resource from any custodian policy. See post-item action <aws.common.actions.post-item> {.interpreted-text role=\"ref\"} Manage ops items as a resource, to resolve or update ops items. See ops-item resource <aws.ops-item> {.interpreted-text role=\"ref\"} OmniSSM \u00b6 Custodian project maintains a tool OmniSSM for enabling cross account, and cross cloud provider systems manager setups using the data center/hybrid mode support of SSM. It provides for secure introduction (using signed metadata documents), automated discovery and garbage collection using a set of golang lambda functions. See tools section of the docs for more info.","title":"AWS Systems Manager"},{"location":"aws/topics/ssm/#aws-systems-manager","text":"","title":"AWS Systems Manager"},{"location":"aws/topics/ssm/#ec2-systems-manager","text":"Cloud custodian enables several use cases with SSM. Filtering instances on the basis of their association to SSM. See ssm filter <aws.ec2.filters.ssm> Executing actions on instances with an ssm agent installed. See ec2 send command action <aws.ec2.actions.send-command> {.interpreted-text role=\"ref\"}","title":"EC2 Systems Manager"},{"location":"aws/topics/ssm/#ops-center","text":"AWS Systems Manager Ops Center is an operations dashboard that provides a central location to collect, triage, and remediate operation issues related to resource in an AWS account. It automatically pulls in contextual information from Cloud Trail and AWS Config to enable easier triage. For more details on Ops Center see. https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html Cloud Custodian has deep support for integrating with SSM Ops Center. With custodian you can. Filter resources by extant ops items associated to them. See ops-item filter <aws.common.filters.ops-item> {.interpreted-text role=\"ref\"} Post new ops items for a resource from any custodian policy. See post-item action <aws.common.actions.post-item> {.interpreted-text role=\"ref\"} Manage ops items as a resource, to resolve or update ops items. See ops-item resource <aws.ops-item> {.interpreted-text role=\"ref\"}","title":"Ops Center"},{"location":"aws/topics/ssm/#omnissm","text":"Custodian project maintains a tool OmniSSM for enabling cross account, and cross cloud provider systems manager setups using the data center/hybrid mode support of SSM. It provides for secure introduction (using signed metadata documents), automated discovery and garbage collection using a set of golang lambda functions. See tools section of the docs for more info.","title":"OmniSSM"},{"location":"aws/topics/xray/","text":"AWS X-Ray Support \u00b6 Custodian supports tracing policy execution using [AWS X-Ray \\<https://aws.amazon.com/xray/>]{.title-ref} As a pre-requisite the [aws_xray_sdk]{.title-ref} package must be installed. [pip install aws_xray_sdk]{.title-ref} The package comes pre-installed on the custodian docker images. The xray support can be enabled on the command line using: custodian run -s out --trace xray custodian.yml Note custodian does not require an X-Ray daemon running as it will stream traces directly sending to the X-Ray service. It will use the daemon if the AWS_XRAY_DAEMON_ADDRESS environment variable is set. Lambda policies should set tracing_config to enable use of the daemon. By default custodian XRay integration will use the account\\'s xray sampling rules sampling can be turned off by setting a flag: custodian run -s out --trace xray://?sampling=off custodian.yml Note XRay integration is enabled for the entire process, it cannot be configured per policy.","title":"AWS X-Ray Support"},{"location":"aws/topics/xray/#aws-x-ray-support","text":"Custodian supports tracing policy execution using [AWS X-Ray \\<https://aws.amazon.com/xray/>]{.title-ref} As a pre-requisite the [aws_xray_sdk]{.title-ref} package must be installed. [pip install aws_xray_sdk]{.title-ref} The package comes pre-installed on the custodian docker images. The xray support can be enabled on the command line using: custodian run -s out --trace xray custodian.yml Note custodian does not require an X-Ray daemon running as it will stream traces directly sending to the X-Ray service. It will use the daemon if the AWS_XRAY_DAEMON_ADDRESS environment variable is set. Lambda policies should set tracing_config to enable use of the daemon. By default custodian XRay integration will use the account\\'s xray sampling rules sampling can be turned off by setting a flag: custodian run -s out --trace xray://?sampling=off custodian.yml Note XRay integration is enabled for the entire process, it cannot be configured per policy.","title":"AWS X-Ray Support"}]}